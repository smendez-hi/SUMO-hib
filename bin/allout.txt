Loading configuration... done.
Loading extra-file: ../../Lucca/fevs.xml
----> ScenParser::ScenParser(filePath=../../Lucca/fevs.xml)
[010] ScenParser::ScenParser(filePath=../../Lucca/fevs.xml)
aux=0x25f8490
*aux=1422269242
----> void MyHandler2::setInitialTime(...)
VehicleToTrack::setFinalPoint(std::string finalPoint{FinalPoint0})
ducato vehicle type parsed
[020] ScenParser::ScenParser(filePath=../../Lucca/fevs.xml)
  result = defaultHandler->vehicles;
VehicleToTrack
{
 Identifier=identifier0;
 InitialBattery=50;
 InitialPoint=initialPoint0;
 FinalPoint=FinalPoint0;
 VehicleType=ducato;
 Behaviour=Normal;
 Overload=;
 AsConsumption=;
 CoefDrag=;
}[030] ScenParser::ScenParser(filePath=../../Lucca/fevs.xml)
  result = defaultHandler->showVehiclesToTrack(result);
There are 1 vehicles
------Id--------Behaviour------
identifier0 | Normal
<---- ScenParser::ScenParser(filePath=../../Lucca/fevs.xml)
Loading net...
----> MSVehicleControl::MSVehicleControl(bool ecoGemRouterFlag=1)
[050] MSVehicleControl::MSVehicleControl(bool ecoGemRouterFlag=1)
 (will now execute... SUMOVTypeParameter defType(DEFAULT_VTYPE_ID);)
----> SUMOVTypeParameter::SUMOVTypeParameter(const std::string defVehTypeId{DEFAULT_VEHTYPE})

vehiclesList->size(){1}
[SAM] TYPE at(0): ducato
!strcmp(vehiclesList->at(i)->getVehicleType().c_str(),"ducato")
----> void SUMOVTypeParameter::updateCapacity(SUMOReal et)
 getCapacity(){60.000000}
 getCapacity(){53.400000}
MSVehicleType* MSVehicleType::build(...)
MSVehicleType::MSVehicleType(const std::string& id{DEFAULT_VEHTYPE}...(bigConstructorNonFevAlike))
[060] MSVehicleControl::MSVehicleControl(bool ecoGemRouterFlag=1)
 (will now execute... SUMOVTypeParameter defType(DDEFAULT_ELECVTYPE_ID);)
----> SUMOVTypeParameter::SUMOVTypeParameter(const std::string defVehTypeId{DEFAULT_ELECVEHTYPE})

vehiclesList->size(){1}
[SAM] TYPE at(0): ducato
!strcmp(vehiclesList->at(i)->getVehicleType().c_str(),"ducato")
----> void SUMOVTypeParameter::updateCapacity(SUMOReal et)
 getCapacity(){60.000000}
 getCapacity(){53.400000}
MSVehicleType* MSVehicleType::build(...)
MSVehicleType::MSVehicleType(const std::string& id{DEFAULT_ELECVEHTYPE}...(biggerConstructorFevAlike))
attempting to catch vehicles to track
catched vehicles to track
VehicleToTrack::getVehiclesToTrackWithCharacteristicsList()->size()=1
MSInsertionControl::MSInsertionControl(...)
MSRouteHandler::MSRouteHandler(file=, addVehiclesDirectly=1) - MSRouteHandler instance=0x7fff16c1c680
NLHandler::NLHandler() - NLHandler instance=0x7fff16c1c680
NLBuilder::load(const std::string& mmlWhat=net-file)
NLBuilder::load(...)
 ../../Lucca/Lucca.alturas.net.xml
Loading net-file from '../../Lucca/Lucca.alturas.net.xml'... The file to be parsed: ../../Lucca/Lucca.alturas.net.xml
 done (3360ms).
<---- MSJunctionControl *NLJunctionControlBuilder::build() const
junctions->size()=4988
MSEdge::setSlope(SUMOReal arg=-0.012805)
MSEdge::setSlope(SUMOReal arg=0.000669)
MSEdge::setSlope(SUMOReal arg=-0.006710)
MSEdge::setSlope(SUMOReal arg=0.003835)
MSEdge::setSlope(SUMOReal arg=0.000842)
MSEdge::setSlope(SUMOReal arg=0.012808)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.038894)
MSEdge::setSlope(SUMOReal arg=0.018971)
MSEdge::setSlope(SUMOReal arg=0.003788)
MSEdge::setSlope(SUMOReal arg=-0.037312)
MSEdge::setSlope(SUMOReal arg=0.204947)
MSEdge::setSlope(SUMOReal arg=0.017102)
MSEdge::setSlope(SUMOReal arg=-0.204947)
MSEdge::setSlope(SUMOReal arg=-0.207522)
MSEdge::setSlope(SUMOReal arg=-0.189348)
MSEdge::setSlope(SUMOReal arg=-0.024610)
MSEdge::setSlope(SUMOReal arg=-0.004598)
MSEdge::setSlope(SUMOReal arg=0.018275)
MSEdge::setSlope(SUMOReal arg=-0.002212)
MSEdge::setSlope(SUMOReal arg=-0.200181)
MSEdge::setSlope(SUMOReal arg=0.044151)
MSEdge::setSlope(SUMOReal arg=0.200181)
MSEdge::setSlope(SUMOReal arg=0.000023)
MSEdge::setSlope(SUMOReal arg=-0.019846)
MSEdge::setSlope(SUMOReal arg=0.005642)
MSEdge::setSlope(SUMOReal arg=0.069681)
MSEdge::setSlope(SUMOReal arg=0.045411)
MSEdge::setSlope(SUMOReal arg=0.012531)
MSEdge::setSlope(SUMOReal arg=0.016029)
MSEdge::setSlope(SUMOReal arg=-0.003788)
MSEdge::setSlope(SUMOReal arg=0.006598)
MSEdge::setSlope(SUMOReal arg=0.000949)
MSEdge::setSlope(SUMOReal arg=-0.006763)
MSEdge::setSlope(SUMOReal arg=-0.001839)
MSEdge::setSlope(SUMOReal arg=0.049372)
MSEdge::setSlope(SUMOReal arg=0.001047)
MSEdge::setSlope(SUMOReal arg=0.030158)
MSEdge::setSlope(SUMOReal arg=0.207522)
MSEdge::setSlope(SUMOReal arg=0.037312)
CRITICAL setting slope for second time
 (MSEdge was:-115422625#0)
 (reported 0 times)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.159764)
MSEdge::setSlope(SUMOReal arg=0.003500)
MSEdge::setSlope(SUMOReal arg=0.159764)
MSEdge::setSlope(SUMOReal arg=0.001550)
MSEdge::setSlope(SUMOReal arg=-0.026302)
MSEdge::setSlope(SUMOReal arg=0.005789)
MSEdge::setSlope(SUMOReal arg=0.026466)
MSEdge::setSlope(SUMOReal arg=0.018879)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.027158)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.004598)
MSEdge::setSlope(SUMOReal arg=-0.000947)
MSEdge::setSlope(SUMOReal arg=-0.002549)
MSEdge::setSlope(SUMOReal arg=0.099669)
MSEdge::setSlope(SUMOReal arg=0.001834)
MSEdge::setSlope(SUMOReal arg=0.030796)
MSEdge::setSlope(SUMOReal arg=-0.069681)
MSEdge::setSlope(SUMOReal arg=0.019493)
MSEdge::setSlope(SUMOReal arg=-0.012531)
MSEdge::setSlope(SUMOReal arg=0.003882)
MSEdge::setSlope(SUMOReal arg=-0.003894)
MSEdge::setSlope(SUMOReal arg=-0.047410)
MSEdge::setSlope(SUMOReal arg=-0.006079)
MSEdge::setSlope(SUMOReal arg=0.005968)
MSEdge::setSlope(SUMOReal arg=-0.001609)
MSEdge::setSlope(SUMOReal arg=-0.003413)
MSEdge::setSlope(SUMOReal arg=0.003413)
MSEdge::setSlope(SUMOReal arg=0.002290)
MSEdge::setSlope(SUMOReal arg=0.000920)
MSEdge::setSlope(SUMOReal arg=-0.000916)
MSEdge::setSlope(SUMOReal arg=-0.000190)
MSEdge::setSlope(SUMOReal arg=0.003490)
MSEdge::setSlope(SUMOReal arg=-0.003409)
MSEdge::setSlope(SUMOReal arg=-0.000393)
MSEdge::setSlope(SUMOReal arg=0.010627)
MSEdge::setSlope(SUMOReal arg=-0.002055)
MSEdge::setSlope(SUMOReal arg=-0.000701)
MSEdge::setSlope(SUMOReal arg=-0.003152)
MSEdge::setSlope(SUMOReal arg=0.000891)
MSEdge::setSlope(SUMOReal arg=0.000220)
MSEdge::setSlope(SUMOReal arg=0.010215)
MSEdge::setSlope(SUMOReal arg=-0.005217)
MSEdge::setSlope(SUMOReal arg=-0.047485)
MSEdge::setSlope(SUMOReal arg=0.047485)
MSEdge::setSlope(SUMOReal arg=0.037339)
MSEdge::setSlope(SUMOReal arg=0.009026)
MSEdge::setSlope(SUMOReal arg=-0.037339)
MSEdge::setSlope(SUMOReal arg=0.023033)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.013333)
MSEdge::setSlope(SUMOReal arg=0.009581)
MSEdge::setSlope(SUMOReal arg=0.003912)
MSEdge::setSlope(SUMOReal arg=0.003471)
MSEdge::setSlope(SUMOReal arg=0.002301)
MSEdge::setSlope(SUMOReal arg=0.000994)
MSEdge::setSlope(SUMOReal arg=0.001935)
MSEdge::setSlope(SUMOReal arg=-0.004465)
MSEdge::setSlope(SUMOReal arg=0.000243)
MSEdge::setSlope(SUMOReal arg=0.008297)
MSEdge::setSlope(SUMOReal arg=-0.001336)
MSEdge::setSlope(SUMOReal arg=-0.001903)
MSEdge::setSlope(SUMOReal arg=0.001336)
MSEdge::setSlope(SUMOReal arg=0.000698)
MSEdge::setSlope(SUMOReal arg=-0.002194)
MSEdge::setSlope(SUMOReal arg=0.003147)
MSEdge::setSlope(SUMOReal arg=-0.000397)
MSEdge::setSlope(SUMOReal arg=0.000397)
MSEdge::setSlope(SUMOReal arg=0.008106)
MSEdge::setSlope(SUMOReal arg=-0.000037)
MSEdge::setSlope(SUMOReal arg=-0.004086)
MSEdge::setSlope(SUMOReal arg=0.004089)
MSEdge::setSlope(SUMOReal arg=0.022626)
MSEdge::setSlope(SUMOReal arg=0.003137)
MSEdge::setSlope(SUMOReal arg=-0.001924)
MSEdge::setSlope(SUMOReal arg=-0.022636)
MSEdge::setSlope(SUMOReal arg=0.010615)
MSEdge::setSlope(SUMOReal arg=-0.010604)
MSEdge::setSlope(SUMOReal arg=-0.015016)
MSEdge::setSlope(SUMOReal arg=-0.009804)
MSEdge::setSlope(SUMOReal arg=-0.000229)
MSEdge::setSlope(SUMOReal arg=-0.005338)
MSEdge::setSlope(SUMOReal arg=0.001363)
MSEdge::setSlope(SUMOReal arg=0.000159)
MSEdge::setSlope(SUMOReal arg=-0.001672)
MSEdge::setSlope(SUMOReal arg=-0.004365)
MSEdge::setSlope(SUMOReal arg=-0.000544)
MSEdge::setSlope(SUMOReal arg=0.004365)
MSEdge::setSlope(SUMOReal arg=0.000160)
MSEdge::setSlope(SUMOReal arg=0.002055)
MSEdge::setSlope(SUMOReal arg=-0.000545)
MSEdge::setSlope(SUMOReal arg=-0.000160)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.003137)
MSEdge::setSlope(SUMOReal arg=0.004515)
MSEdge::setSlope(SUMOReal arg=0.004450)
MSEdge::setSlope(SUMOReal arg=0.000190)
MSEdge::setSlope(SUMOReal arg=0.002088)
MSEdge::setSlope(SUMOReal arg=0.005313)
MSEdge::setSlope(SUMOReal arg=0.002319)
MSEdge::setSlope(SUMOReal arg=-0.009162)
MSEdge::setSlope(SUMOReal arg=0.009163)
MSEdge::setSlope(SUMOReal arg=0.005342)
MSEdge::setSlope(SUMOReal arg=-0.029338)
MSEdge::setSlope(SUMOReal arg=0.029387)
MSEdge::setSlope(SUMOReal arg=0.028051)
MSEdge::setSlope(SUMOReal arg=0.031791)
MSEdge::setSlope(SUMOReal arg=-0.031866)
MSEdge::setSlope(SUMOReal arg=0.001548)
MSEdge::setSlope(SUMOReal arg=0.044759)
MSEdge::setSlope(SUMOReal arg=0.004465)
MSEdge::setSlope(SUMOReal arg=0.002167)
MSEdge::setSlope(SUMOReal arg=-0.002086)
MSEdge::setSlope(SUMOReal arg=0.002086)
MSEdge::setSlope(SUMOReal arg=0.001895)
MSEdge::setSlope(SUMOReal arg=0.009877)
MSEdge::setSlope(SUMOReal arg=0.003156)
MSEdge::setSlope(SUMOReal arg=0.009804)
MSEdge::setSlope(SUMOReal arg=-0.009657)
MSEdge::setSlope(SUMOReal arg=0.003191)
MSEdge::setSlope(SUMOReal arg=0.000393)
MSEdge::setSlope(SUMOReal arg=0.009399)
MSEdge::setSlope(SUMOReal arg=-0.001897)
MSEdge::setSlope(SUMOReal arg=0.001673)
MSEdge::setSlope(SUMOReal arg=-0.004771)
MSEdge::setSlope(SUMOReal arg=-0.001444)
MSEdge::setSlope(SUMOReal arg=-0.001862)
MSEdge::setSlope(SUMOReal arg=0.001862)
MSEdge::setSlope(SUMOReal arg=0.002373)
MSEdge::setSlope(SUMOReal arg=0.008150)
MSEdge::setSlope(SUMOReal arg=-0.002369)
MSEdge::setSlope(SUMOReal arg=-0.014919)
MSEdge::setSlope(SUMOReal arg=-0.003147)
MSEdge::setSlope(SUMOReal arg=-0.002306)
MSEdge::setSlope(SUMOReal arg=-0.001548)
MSEdge::setSlope(SUMOReal arg=0.000701)
MSEdge::setSlope(SUMOReal arg=0.000547)
MSEdge::setSlope(SUMOReal arg=0.001609)
MSEdge::setSlope(SUMOReal arg=-0.009877)
MSEdge::setSlope(SUMOReal arg=0.000689)
MSEdge::setSlope(SUMOReal arg=0.014919)
MSEdge::setSlope(SUMOReal arg=-0.000691)
MSEdge::setSlope(SUMOReal arg=-0.008162)
MSEdge::setSlope(SUMOReal arg=-0.001259)
MSEdge::setSlope(SUMOReal arg=-0.008284)
MSEdge::setSlope(SUMOReal arg=-0.001767)
MSEdge::setSlope(SUMOReal arg=0.000229)
MSEdge::setSlope(SUMOReal arg=0.001769)
MSEdge::setSlope(SUMOReal arg=-0.029824)
MSEdge::setSlope(SUMOReal arg=-0.002319)
MSEdge::setSlope(SUMOReal arg=-0.002287)
MSEdge::setSlope(SUMOReal arg=-0.000243)
MSEdge::setSlope(SUMOReal arg=-0.000993)
MSEdge::setSlope(SUMOReal arg=-0.005343)
MSEdge::setSlope(SUMOReal arg=0.017745)
MSEdge::setSlope(SUMOReal arg=0.005381)
MSEdge::setSlope(SUMOReal arg=-0.003197)
MSEdge::setSlope(SUMOReal arg=0.048218)
MSEdge::setSlope(SUMOReal arg=0.023618)
MSEdge::setSlope(SUMOReal arg=0.026936)
MSEdge::setSlope(SUMOReal arg=-0.023618)
MSEdge::setSlope(SUMOReal arg=0.000946)
MSEdge::setSlope(SUMOReal arg=0.002417)
MSEdge::setSlope(SUMOReal arg=-0.002230)
MSEdge::setSlope(SUMOReal arg=-0.001202)
MSEdge::setSlope(SUMOReal arg=0.005578)
MSEdge::setSlope(SUMOReal arg=-0.109358)
MSEdge::setSlope(SUMOReal arg=-0.007756)
MSEdge::setSlope(SUMOReal arg=1.012197)
MSEdge::setSlope(SUMOReal arg=0.010866)
MSEdge::setSlope(SUMOReal arg=-1.012197)
MSEdge::setSlope(SUMOReal arg=0.073594)
MSEdge::setSlope(SUMOReal arg=-0.011997)
MSEdge::setSlope(SUMOReal arg=0.011997)
MSEdge::setSlope(SUMOReal arg=0.058427)
MSEdge::setSlope(SUMOReal arg=0.142706)
MSEdge::setSlope(SUMOReal arg=0.054437)
MSEdge::setSlope(SUMOReal arg=0.116383)
MSEdge::setSlope(SUMOReal arg=0.133623)
MSEdge::setSlope(SUMOReal arg=-0.061517)
MSEdge::setSlope(SUMOReal arg=-0.133623)
MSEdge::setSlope(SUMOReal arg=-0.077580)
MSEdge::setSlope(SUMOReal arg=0.225516)
MSEdge::setSlope(SUMOReal arg=-0.231180)
MSEdge::setSlope(SUMOReal arg=-0.372198)
MSEdge::setSlope(SUMOReal arg=-0.387820)
MSEdge::setSlope(SUMOReal arg=0.387820)
MSEdge::setSlope(SUMOReal arg=-0.028321)
MSEdge::setSlope(SUMOReal arg=-0.025713)
MSEdge::setSlope(SUMOReal arg=-0.142706)
MSEdge::setSlope(SUMOReal arg=0.025713)
MSEdge::setSlope(SUMOReal arg=-0.015014)
MSEdge::setSlope(SUMOReal arg=-0.031116)
MSEdge::setSlope(SUMOReal arg=-0.045020)
MSEdge::setSlope(SUMOReal arg=-0.073594)
MSEdge::setSlope(SUMOReal arg=0.045020)
MSEdge::setSlope(SUMOReal arg=-0.048788)
MSEdge::setSlope(SUMOReal arg=0.028321)
MSEdge::setSlope(SUMOReal arg=-0.058427)
MSEdge::setSlope(SUMOReal arg=0.072269)
MSEdge::setSlope(SUMOReal arg=0.048788)
MSEdge::setSlope(SUMOReal arg=0.209640)
MSEdge::setSlope(SUMOReal arg=-0.011742)
MSEdge::setSlope(SUMOReal arg=0.031116)
MSEdge::setSlope(SUMOReal arg=-0.072269)
MSEdge::setSlope(SUMOReal arg=-0.007545)
MSEdge::setSlope(SUMOReal arg=0.011627)
MSEdge::setSlope(SUMOReal arg=-0.002469)
MSEdge::setSlope(SUMOReal arg=0.004571)
MSEdge::setSlope(SUMOReal arg=-0.016128)
MSEdge::setSlope(SUMOReal arg=0.072164)
MSEdge::setSlope(SUMOReal arg=-0.013069)
MSEdge::setSlope(SUMOReal arg=-0.072164)
MSEdge::setSlope(SUMOReal arg=-0.004543)
MSEdge::setSlope(SUMOReal arg=-0.009776)
MSEdge::setSlope(SUMOReal arg=0.033377)
MSEdge::setSlope(SUMOReal arg=0.003666)
MSEdge::setSlope(SUMOReal arg=-0.010822)
MSEdge::setSlope(SUMOReal arg=-0.000223)
MSEdge::setSlope(SUMOReal arg=-0.002021)
MSEdge::setSlope(SUMOReal arg=-0.042406)
MSEdge::setSlope(SUMOReal arg=-0.000388)
MSEdge::setSlope(SUMOReal arg=-0.033377)
MSEdge::setSlope(SUMOReal arg=0.009655)
MSEdge::setSlope(SUMOReal arg=0.012220)
MSEdge::setSlope(SUMOReal arg=0.004016)
MSEdge::setSlope(SUMOReal arg=-0.022068)
MSEdge::setSlope(SUMOReal arg=-0.021921)
MSEdge::setSlope(SUMOReal arg=-0.024727)
MSEdge::setSlope(SUMOReal arg=0.019634)
MSEdge::setSlope(SUMOReal arg=0.018086)
MSEdge::setSlope(SUMOReal arg=-0.019964)
MSEdge::setSlope(SUMOReal arg=0.019964)
MSEdge::setSlope(SUMOReal arg=0.000223)
MSEdge::setSlope(SUMOReal arg=-0.000199)
MSEdge::setSlope(SUMOReal arg=0.010822)
MSEdge::setSlope(SUMOReal arg=0.000188)
MSEdge::setSlope(SUMOReal arg=0.003716)
MSEdge::setSlope(SUMOReal arg=-0.003666)
MSEdge::setSlope(SUMOReal arg=-0.003367)
MSEdge::setSlope(SUMOReal arg=-0.017000)
MSEdge::setSlope(SUMOReal arg=0.002021)
MSEdge::setSlope(SUMOReal arg=0.017000)
MSEdge::setSlope(SUMOReal arg=0.004843)
MSEdge::setSlope(SUMOReal arg=-0.004843)
MSEdge::setSlope(SUMOReal arg=-0.005548)
MSEdge::setSlope(SUMOReal arg=0.057344)
MSEdge::setSlope(SUMOReal arg=-0.012220)
MSEdge::setSlope(SUMOReal arg=-0.057344)
MSEdge::setSlope(SUMOReal arg=-0.003868)
MSEdge::setSlope(SUMOReal arg=0.003868)
MSEdge::setSlope(SUMOReal arg=-0.010344)
MSEdge::setSlope(SUMOReal arg=0.004216)
MSEdge::setSlope(SUMOReal arg=-0.005015)
MSEdge::setSlope(SUMOReal arg=0.002137)
MSEdge::setSlope(SUMOReal arg=-0.014303)
MSEdge::setSlope(SUMOReal arg=0.005145)
MSEdge::setSlope(SUMOReal arg=-0.001883)
MSEdge::setSlope(SUMOReal arg=0.014303)
MSEdge::setSlope(SUMOReal arg=0.007350)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.053982)
MSEdge::setSlope(SUMOReal arg=0.003989)
MSEdge::setSlope(SUMOReal arg=0.023813)
MSEdge::setSlope(SUMOReal arg=-0.007075)
MSEdge::setSlope(SUMOReal arg=-0.023813)
MSEdge::setSlope(SUMOReal arg=0.015840)
MSEdge::setSlope(SUMOReal arg=-0.001838)
MSEdge::setSlope(SUMOReal arg=0.001838)
MSEdge::setSlope(SUMOReal arg=0.007017)
MSEdge::setSlope(SUMOReal arg=-0.007017)
MSEdge::setSlope(SUMOReal arg=0.061516)
MSEdge::setSlope(SUMOReal arg=-0.061516)
MSEdge::setSlope(SUMOReal arg=-0.016413)
MSEdge::setSlope(SUMOReal arg=-0.030212)
MSEdge::setSlope(SUMOReal arg=-0.015861)
MSEdge::setSlope(SUMOReal arg=-0.002868)
MSEdge::setSlope(SUMOReal arg=-0.011028)
MSEdge::setSlope(SUMOReal arg=0.041992)
MSEdge::setSlope(SUMOReal arg=-0.003855)
MSEdge::setSlope(SUMOReal arg=-0.041992)
MSEdge::setSlope(SUMOReal arg=0.004839)
MSEdge::setSlope(SUMOReal arg=0.008697)
MSEdge::setSlope(SUMOReal arg=-0.008692)
MSEdge::setSlope(SUMOReal arg=-0.029850)
MSEdge::setSlope(SUMOReal arg=-0.005615)
MSEdge::setSlope(SUMOReal arg=0.029049)
MSEdge::setSlope(SUMOReal arg=0.002177)
MSEdge::setSlope(SUMOReal arg=-0.028131)
MSEdge::setSlope(SUMOReal arg=0.049203)
MSEdge::setSlope(SUMOReal arg=-0.006617)
MSEdge::setSlope(SUMOReal arg=-0.001137)
MSEdge::setSlope(SUMOReal arg=0.001344)
MSEdge::setSlope(SUMOReal arg=-0.003178)
MSEdge::setSlope(SUMOReal arg=-0.000283)
MSEdge::setSlope(SUMOReal arg=0.003178)
MSEdge::setSlope(SUMOReal arg=0.000308)
MSEdge::setSlope(SUMOReal arg=0.006263)
MSEdge::setSlope(SUMOReal arg=0.009679)
MSEdge::setSlope(SUMOReal arg=-0.009662)
MSEdge::setSlope(SUMOReal arg=-0.009679)
MSEdge::setSlope(SUMOReal arg=-0.001599)
MSEdge::setSlope(SUMOReal arg=0.004373)
MSEdge::setSlope(SUMOReal arg=-0.004373)
MSEdge::setSlope(SUMOReal arg=-0.094191)
MSEdge::setSlope(SUMOReal arg=0.094191)
MSEdge::setSlope(SUMOReal arg=0.004380)
MSEdge::setSlope(SUMOReal arg=0.049044)
MSEdge::setSlope(SUMOReal arg=0.006478)
MSEdge::setSlope(SUMOReal arg=-0.004373)
MSEdge::setSlope(SUMOReal arg=0.012329)
MSEdge::setSlope(SUMOReal arg=0.014873)
MSEdge::setSlope(SUMOReal arg=-0.012260)
MSEdge::setSlope(SUMOReal arg=0.104019)
MSEdge::setSlope(SUMOReal arg=-0.000467)
MSEdge::setSlope(SUMOReal arg=-0.104019)
MSEdge::setSlope(SUMOReal arg=0.005018)
MSEdge::setSlope(SUMOReal arg=-0.004547)
MSEdge::setSlope(SUMOReal arg=0.004529)
MSEdge::setSlope(SUMOReal arg=0.031009)
MSEdge::setSlope(SUMOReal arg=-0.103525)
MSEdge::setSlope(SUMOReal arg=-0.001944)
MSEdge::setSlope(SUMOReal arg=-0.002740)
MSEdge::setSlope(SUMOReal arg=-0.004298)
MSEdge::setSlope(SUMOReal arg=-0.001635)
MSEdge::setSlope(SUMOReal arg=-0.004745)
MSEdge::setSlope(SUMOReal arg=0.001681)
MSEdge::setSlope(SUMOReal arg=-0.019888)
MSEdge::setSlope(SUMOReal arg=-0.002496)
MSEdge::setSlope(SUMOReal arg=-0.024000)
MSEdge::setSlope(SUMOReal arg=-0.008883)
MSEdge::setSlope(SUMOReal arg=-0.026717)
MSEdge::setSlope(SUMOReal arg=-0.005392)
MSEdge::setSlope(SUMOReal arg=0.004932)
MSEdge::setSlope(SUMOReal arg=0.000233)
MSEdge::setSlope(SUMOReal arg=-0.035285)
MSEdge::setSlope(SUMOReal arg=-0.001371)
MSEdge::setSlope(SUMOReal arg=0.005392)
MSEdge::setSlope(SUMOReal arg=-0.004097)
MSEdge::setSlope(SUMOReal arg=0.002052)
MSEdge::setSlope(SUMOReal arg=-0.000816)
MSEdge::setSlope(SUMOReal arg=0.041643)
MSEdge::setSlope(SUMOReal arg=0.033119)
MSEdge::setSlope(SUMOReal arg=0.000179)
MSEdge::setSlope(SUMOReal arg=-0.033119)
MSEdge::setSlope(SUMOReal arg=0.007202)
MSEdge::setSlope(SUMOReal arg=-0.003287)
MSEdge::setSlope(SUMOReal arg=-0.001550)
MSEdge::setSlope(SUMOReal arg=-0.019548)
MSEdge::setSlope(SUMOReal arg=-0.003758)
MSEdge::setSlope(SUMOReal arg=0.157342)
MSEdge::setSlope(SUMOReal arg=-0.017051)
MSEdge::setSlope(SUMOReal arg=0.004472)
MSEdge::setSlope(SUMOReal arg=0.017051)
MSEdge::setSlope(SUMOReal arg=0.006095)
MSEdge::setSlope(SUMOReal arg=0.042125)
MSEdge::setSlope(SUMOReal arg=-0.002967)
MSEdge::setSlope(SUMOReal arg=-0.007086)
MSEdge::setSlope(SUMOReal arg=-0.157342)
MSEdge::setSlope(SUMOReal arg=0.007086)
MSEdge::setSlope(SUMOReal arg=0.024995)
MSEdge::setSlope(SUMOReal arg=-0.002427)
MSEdge::setSlope(SUMOReal arg=-0.024995)
MSEdge::setSlope(SUMOReal arg=-0.004472)
MSEdge::setSlope(SUMOReal arg=-0.005508)
MSEdge::setSlope(SUMOReal arg=0.002427)
MSEdge::setSlope(SUMOReal arg=-0.021529)
MSEdge::setSlope(SUMOReal arg=0.001909)
MSEdge::setSlope(SUMOReal arg=-0.065152)
MSEdge::setSlope(SUMOReal arg=0.032294)
MSEdge::setSlope(SUMOReal arg=0.130569)
MSEdge::setSlope(SUMOReal arg=0.001788)
MSEdge::setSlope(SUMOReal arg=-0.001712)
MSEdge::setSlope(SUMOReal arg=0.140413)
MSEdge::setSlope(SUMOReal arg=0.002617)
MSEdge::setSlope(SUMOReal arg=0.005255)
MSEdge::setSlope(SUMOReal arg=-0.000128)
MSEdge::setSlope(SUMOReal arg=-0.001059)
MSEdge::setSlope(SUMOReal arg=0.242683)
MSEdge::setSlope(SUMOReal arg=-0.009836)
MSEdge::setSlope(SUMOReal arg=-0.007513)
MSEdge::setSlope(SUMOReal arg=-0.000060)
MSEdge::setSlope(SUMOReal arg=-0.002739)
MSEdge::setSlope(SUMOReal arg=0.003930)
MSEdge::setSlope(SUMOReal arg=-0.001728)
MSEdge::setSlope(SUMOReal arg=-0.009119)
MSEdge::setSlope(SUMOReal arg=0.001723)
MSEdge::setSlope(SUMOReal arg=-0.000491)
MSEdge::setSlope(SUMOReal arg=-0.029052)
MSEdge::setSlope(SUMOReal arg=0.000491)
MSEdge::setSlope(SUMOReal arg=0.008009)
MSEdge::setSlope(SUMOReal arg=-0.005676)
MSEdge::setSlope(SUMOReal arg=0.005673)
MSEdge::setSlope(SUMOReal arg=-0.017960)
MSEdge::setSlope(SUMOReal arg=-0.002255)
MSEdge::setSlope(SUMOReal arg=0.002251)
MSEdge::setSlope(SUMOReal arg=-0.001553)
MSEdge::setSlope(SUMOReal arg=-0.004414)
MSEdge::setSlope(SUMOReal arg=-0.014358)
MSEdge::setSlope(SUMOReal arg=0.006313)
MSEdge::setSlope(SUMOReal arg=-0.001572)
MSEdge::setSlope(SUMOReal arg=-0.006165)
MSEdge::setSlope(SUMOReal arg=-0.004444)
MSEdge::setSlope(SUMOReal arg=-0.004354)
MSEdge::setSlope(SUMOReal arg=0.000372)
MSEdge::setSlope(SUMOReal arg=-0.005501)
MSEdge::setSlope(SUMOReal arg=-0.010085)
MSEdge::setSlope(SUMOReal arg=-0.013380)
MSEdge::setSlope(SUMOReal arg=-0.003676)
MSEdge::setSlope(SUMOReal arg=0.001999)
MSEdge::setSlope(SUMOReal arg=0.066568)
MSEdge::setSlope(SUMOReal arg=0.002825)
MSEdge::setSlope(SUMOReal arg=0.004558)
MSEdge::setSlope(SUMOReal arg=-0.005255)
MSEdge::setSlope(SUMOReal arg=0.005501)
MSEdge::setSlope(SUMOReal arg=-0.007816)
MSEdge::setSlope(SUMOReal arg=0.003651)
MSEdge::setSlope(SUMOReal arg=-0.000158)
MSEdge::setSlope(SUMOReal arg=0.004924)
MSEdge::setSlope(SUMOReal arg=-0.010983)
MSEdge::setSlope(SUMOReal arg=-0.006610)
MSEdge::setSlope(SUMOReal arg=-0.007350)
MSEdge::setSlope(SUMOReal arg=-0.019112)
MSEdge::setSlope(SUMOReal arg=0.004315)
MSEdge::setSlope(SUMOReal arg=0.001572)
MSEdge::setSlope(SUMOReal arg=0.003393)
MSEdge::setSlope(SUMOReal arg=-0.003393)
MSEdge::setSlope(SUMOReal arg=-0.006269)
MSEdge::setSlope(SUMOReal arg=0.000850)
MSEdge::setSlope(SUMOReal arg=0.003392)
MSEdge::setSlope(SUMOReal arg=-0.004029)
MSEdge::setSlope(SUMOReal arg=0.016413)
MSEdge::setSlope(SUMOReal arg=0.004542)
MSEdge::setSlope(SUMOReal arg=-0.007165)
MSEdge::setSlope(SUMOReal arg=-0.004542)
MSEdge::setSlope(SUMOReal arg=-0.000514)
MSEdge::setSlope(SUMOReal arg=-0.001176)
MSEdge::setSlope(SUMOReal arg=0.006282)
MSEdge::setSlope(SUMOReal arg=0.001176)
MSEdge::setSlope(SUMOReal arg=-0.000219)
MSEdge::setSlope(SUMOReal arg=0.001361)
MSEdge::setSlope(SUMOReal arg=-0.000688)
MSEdge::setSlope(SUMOReal arg=-0.001351)
MSEdge::setSlope(SUMOReal arg=0.016848)
MSEdge::setSlope(SUMOReal arg=0.011339)
MSEdge::setSlope(SUMOReal arg=-0.001626)
MSEdge::setSlope(SUMOReal arg=0.037897)
MSEdge::setSlope(SUMOReal arg=-0.002047)
MSEdge::setSlope(SUMOReal arg=-0.012903)
MSEdge::setSlope(SUMOReal arg=0.002233)
MSEdge::setSlope(SUMOReal arg=0.007299)
MSEdge::setSlope(SUMOReal arg=-0.000705)
MSEdge::setSlope(SUMOReal arg=-0.015312)
MSEdge::setSlope(SUMOReal arg=0.001534)
MSEdge::setSlope(SUMOReal arg=-0.002668)
MSEdge::setSlope(SUMOReal arg=-0.001553)
MSEdge::setSlope(SUMOReal arg=0.004298)
MSEdge::setSlope(SUMOReal arg=0.000280)
MSEdge::setSlope(SUMOReal arg=0.004677)
MSEdge::setSlope(SUMOReal arg=0.004965)
MSEdge::setSlope(SUMOReal arg=0.003981)
MSEdge::setSlope(SUMOReal arg=-0.004046)
MSEdge::setSlope(SUMOReal arg=-0.001251)
MSEdge::setSlope(SUMOReal arg=-0.023915)
MSEdge::setSlope(SUMOReal arg=0.001249)
MSEdge::setSlope(SUMOReal arg=-0.000453)
MSEdge::setSlope(SUMOReal arg=-0.088874)
MSEdge::setSlope(SUMOReal arg=0.004563)
MSEdge::setSlope(SUMOReal arg=-0.004079)
MSEdge::setSlope(SUMOReal arg=-0.004411)
MSEdge::setSlope(SUMOReal arg=0.000289)
MSEdge::setSlope(SUMOReal arg=0.000467)
MSEdge::setSlope(SUMOReal arg=0.004524)
MSEdge::setSlope(SUMOReal arg=0.001631)
MSEdge::setSlope(SUMOReal arg=0.027185)
MSEdge::setSlope(SUMOReal arg=0.003710)
MSEdge::setSlope(SUMOReal arg=0.003837)
MSEdge::setSlope(SUMOReal arg=0.077898)
MSEdge::setSlope(SUMOReal arg=0.004760)
MSEdge::setSlope(SUMOReal arg=-0.001050)
MSEdge::setSlope(SUMOReal arg=0.003848)
MSEdge::setSlope(SUMOReal arg=-0.004760)
MSEdge::setSlope(SUMOReal arg=-0.004430)
MSEdge::setSlope(SUMOReal arg=-0.016828)
MSEdge::setSlope(SUMOReal arg=0.016828)
MSEdge::setSlope(SUMOReal arg=0.000217)
MSEdge::setSlope(SUMOReal arg=0.001704)
MSEdge::setSlope(SUMOReal arg=-0.000215)
MSEdge::setSlope(SUMOReal arg=0.003307)
MSEdge::setSlope(SUMOReal arg=0.002390)
MSEdge::setSlope(SUMOReal arg=-0.001937)
MSEdge::setSlope(SUMOReal arg=-0.000671)
MSEdge::setSlope(SUMOReal arg=0.005687)
MSEdge::setSlope(SUMOReal arg=0.000671)
MSEdge::setSlope(SUMOReal arg=0.023005)
MSEdge::setSlope(SUMOReal arg=-0.068549)
MSEdge::setSlope(SUMOReal arg=-0.002867)
MSEdge::setSlope(SUMOReal arg=0.003941)
MSEdge::setSlope(SUMOReal arg=-0.003941)
MSEdge::setSlope(SUMOReal arg=-0.022826)
MSEdge::setSlope(SUMOReal arg=0.019136)
MSEdge::setSlope(SUMOReal arg=-0.004020)
MSEdge::setSlope(SUMOReal arg=0.001467)
MSEdge::setSlope(SUMOReal arg=0.004430)
MSEdge::setSlope(SUMOReal arg=0.019492)
MSEdge::setSlope(SUMOReal arg=0.011924)
MSEdge::setSlope(SUMOReal arg=0.005062)
MSEdge::setSlope(SUMOReal arg=0.001126)
MSEdge::setSlope(SUMOReal arg=0.002008)
MSEdge::setSlope(SUMOReal arg=-0.010911)
MSEdge::setSlope(SUMOReal arg=0.007981)
MSEdge::setSlope(SUMOReal arg=0.005450)
MSEdge::setSlope(SUMOReal arg=-0.007441)
MSEdge::setSlope(SUMOReal arg=-0.013416)
MSEdge::setSlope(SUMOReal arg=-0.003293)
MSEdge::setSlope(SUMOReal arg=0.013416)
MSEdge::setSlope(SUMOReal arg=0.018225)
MSEdge::setSlope(SUMOReal arg=-0.001626)
MSEdge::setSlope(SUMOReal arg=0.001618)
MSEdge::setSlope(SUMOReal arg=0.012347)
MSEdge::setSlope(SUMOReal arg=-0.001191)
MSEdge::setSlope(SUMOReal arg=-0.001026)
MSEdge::setSlope(SUMOReal arg=0.003683)
MSEdge::setSlope(SUMOReal arg=-0.020098)
MSEdge::setSlope(SUMOReal arg=-0.003685)
MSEdge::setSlope(SUMOReal arg=0.062885)
MSEdge::setSlope(SUMOReal arg=-0.018441)
MSEdge::setSlope(SUMOReal arg=-0.090998)
MSEdge::setSlope(SUMOReal arg=-0.012410)
MSEdge::setSlope(SUMOReal arg=-0.005690)
MSEdge::setSlope(SUMOReal arg=-0.023953)
MSEdge::setSlope(SUMOReal arg=0.023953)
MSEdge::setSlope(SUMOReal arg=0.007663)
MSEdge::setSlope(SUMOReal arg=-0.000876)
MSEdge::setSlope(SUMOReal arg=-0.007663)
MSEdge::setSlope(SUMOReal arg=-0.000046)
MSEdge::setSlope(SUMOReal arg=0.020528)
MSEdge::setSlope(SUMOReal arg=-0.001590)
MSEdge::setSlope(SUMOReal arg=-0.020875)
MSEdge::setSlope(SUMOReal arg=0.019095)
MSEdge::setSlope(SUMOReal arg=0.002020)
MSEdge::setSlope(SUMOReal arg=-0.019095)
MSEdge::setSlope(SUMOReal arg=-0.004741)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.010691)
MSEdge::setSlope(SUMOReal arg=-0.012042)
MSEdge::setSlope(SUMOReal arg=0.010524)
MSEdge::setSlope(SUMOReal arg=-0.010236)
MSEdge::setSlope(SUMOReal arg=-0.006987)
MSEdge::setSlope(SUMOReal arg=0.000876)
MSEdge::setSlope(SUMOReal arg=0.000608)
MSEdge::setSlope(SUMOReal arg=-0.008893)
MSEdge::setSlope(SUMOReal arg=0.008893)
MSEdge::setSlope(SUMOReal arg=0.003311)
MSEdge::setSlope(SUMOReal arg=-0.002270)
MSEdge::setSlope(SUMOReal arg=0.002980)
MSEdge::setSlope(SUMOReal arg=-0.001399)
MSEdge::setSlope(SUMOReal arg=-0.004894)
MSEdge::setSlope(SUMOReal arg=-0.006367)
MSEdge::setSlope(SUMOReal arg=-0.005865)
MSEdge::setSlope(SUMOReal arg=-0.001024)
MSEdge::setSlope(SUMOReal arg=0.028382)
MSEdge::setSlope(SUMOReal arg=0.000231)
MSEdge::setSlope(SUMOReal arg=0.004984)
MSEdge::setSlope(SUMOReal arg=-0.000921)
MSEdge::setSlope(SUMOReal arg=-0.002137)
MSEdge::setSlope(SUMOReal arg=-0.004951)
MSEdge::setSlope(SUMOReal arg=0.006610)
MSEdge::setSlope(SUMOReal arg=0.019112)
MSEdge::setSlope(SUMOReal arg=0.006107)
MSEdge::setSlope(SUMOReal arg=-0.002642)
MSEdge::setSlope(SUMOReal arg=0.019427)
MSEdge::setSlope(SUMOReal arg=0.001561)
MSEdge::setSlope(SUMOReal arg=0.000417)
MSEdge::setSlope(SUMOReal arg=0.003482)
MSEdge::setSlope(SUMOReal arg=-0.000419)
MSEdge::setSlope(SUMOReal arg=-0.004654)
MSEdge::setSlope(SUMOReal arg=0.002818)
MSEdge::setSlope(SUMOReal arg=-0.002818)
MSEdge::setSlope(SUMOReal arg=-0.785398)
MSEdge::setSlope(SUMOReal arg=-0.000601)
MSEdge::setSlope(SUMOReal arg=0.141897)
MSEdge::setSlope(SUMOReal arg=0.000601)
MSEdge::setSlope(SUMOReal arg=-0.023033)
MSEdge::setSlope(SUMOReal arg=-0.003929)
MSEdge::setSlope(SUMOReal arg=0.004269)
MSEdge::setSlope(SUMOReal arg=0.004054)
MSEdge::setSlope(SUMOReal arg=0.785398)
MSEdge::setSlope(SUMOReal arg=-0.003491)
MSEdge::setSlope(SUMOReal arg=-0.198501)
MSEdge::setSlope(SUMOReal arg=-0.007664)
MSEdge::setSlope(SUMOReal arg=-0.014861)
MSEdge::setSlope(SUMOReal arg=-0.004533)
MSEdge::setSlope(SUMOReal arg=0.002398)
MSEdge::setSlope(SUMOReal arg=0.002590)
MSEdge::setSlope(SUMOReal arg=-0.002899)
MSEdge::setSlope(SUMOReal arg=0.014924)
MSEdge::setSlope(SUMOReal arg=0.020078)
MSEdge::setSlope(SUMOReal arg=-0.012406)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002376)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.024995)
MSEdge::setSlope(SUMOReal arg=0.011210)
MSEdge::setSlope(SUMOReal arg=0.024995)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001665)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.011741)
MSEdge::setSlope(SUMOReal arg=-0.099669)
MSEdge::setSlope(SUMOReal arg=-0.003106)
MSEdge::setSlope(SUMOReal arg=0.013422)
MSEdge::setSlope(SUMOReal arg=-0.002293)
MSEdge::setSlope(SUMOReal arg=0.003103)
MSEdge::setSlope(SUMOReal arg=0.003204)
MSEdge::setSlope(SUMOReal arg=-0.002359)
MSEdge::setSlope(SUMOReal arg=0.005553)
MSEdge::setSlope(SUMOReal arg=0.004745)
MSEdge::setSlope(SUMOReal arg=0.000313)
MSEdge::setSlope(SUMOReal arg=-0.000113)
MSEdge::setSlope(SUMOReal arg=0.125425)
MSEdge::setSlope(SUMOReal arg=0.097117)
MSEdge::setSlope(SUMOReal arg=0.025511)
MSEdge::setSlope(SUMOReal arg=0.069086)
MSEdge::setSlope(SUMOReal arg=-0.067804)
MSEdge::setSlope(SUMOReal arg=-0.003687)
MSEdge::setSlope(SUMOReal arg=0.003155)
MSEdge::setSlope(SUMOReal arg=0.003596)
MSEdge::setSlope(SUMOReal arg=0.004943)
MSEdge::setSlope(SUMOReal arg=-0.003133)
MSEdge::setSlope(SUMOReal arg=0.003478)
MSEdge::setSlope(SUMOReal arg=0.007975)
MSEdge::setSlope(SUMOReal arg=-0.232455)
MSEdge::setSlope(SUMOReal arg=-0.000312)
MSEdge::setSlope(SUMOReal arg=-0.007540)
MSEdge::setSlope(SUMOReal arg=-0.020906)
MSEdge::setSlope(SUMOReal arg=-0.022078)
MSEdge::setSlope(SUMOReal arg=0.020254)
MSEdge::setSlope(SUMOReal arg=0.074544)
MSEdge::setSlope(SUMOReal arg=0.006218)
MSEdge::setSlope(SUMOReal arg=-0.069963)
MSEdge::setSlope(SUMOReal arg=-0.006148)
MSEdge::setSlope(SUMOReal arg=-0.106861)
MSEdge::setSlope(SUMOReal arg=0.003559)
MSEdge::setSlope(SUMOReal arg=0.007232)
MSEdge::setSlope(SUMOReal arg=-0.003876)
MSEdge::setSlope(SUMOReal arg=-0.007350)
MSEdge::setSlope(SUMOReal arg=-0.001961)
MSEdge::setSlope(SUMOReal arg=-0.007284)
MSEdge::setSlope(SUMOReal arg=0.001961)
MSEdge::setSlope(SUMOReal arg=-0.003941)
MSEdge::setSlope(SUMOReal arg=0.009088)
MSEdge::setSlope(SUMOReal arg=-0.002152)
MSEdge::setSlope(SUMOReal arg=-0.001459)
MSEdge::setSlope(SUMOReal arg=0.002166)
MSEdge::setSlope(SUMOReal arg=-0.000969)
MSEdge::setSlope(SUMOReal arg=-0.004900)
MSEdge::setSlope(SUMOReal arg=0.004786)
MSEdge::setSlope(SUMOReal arg=0.029484)
MSEdge::setSlope(SUMOReal arg=-0.000500)
MSEdge::setSlope(SUMOReal arg=0.000498)
MSEdge::setSlope(SUMOReal arg=0.004003)
MSEdge::setSlope(SUMOReal arg=0.003115)
MSEdge::setSlope(SUMOReal arg=0.009185)
MSEdge::setSlope(SUMOReal arg=-0.012224)
MSEdge::setSlope(SUMOReal arg=0.000923)
MSEdge::setSlope(SUMOReal arg=-0.005353)
MSEdge::setSlope(SUMOReal arg=-0.017015)
MSEdge::setSlope(SUMOReal arg=0.014262)
MSEdge::setSlope(SUMOReal arg=0.048742)
MSEdge::setSlope(SUMOReal arg=0.002131)
MSEdge::setSlope(SUMOReal arg=-0.002975)
MSEdge::setSlope(SUMOReal arg=-0.002128)
MSEdge::setSlope(SUMOReal arg=-0.004088)
MSEdge::setSlope(SUMOReal arg=-0.002306)
MSEdge::setSlope(SUMOReal arg=-0.128501)
MSEdge::setSlope(SUMOReal arg=-0.006806)
MSEdge::setSlope(SUMOReal arg=-0.014732)
MSEdge::setSlope(SUMOReal arg=0.007194)
MSEdge::setSlope(SUMOReal arg=0.037211)
MSEdge::setSlope(SUMOReal arg=0.058756)
MSEdge::setSlope(SUMOReal arg=-0.341187)
MSEdge::setSlope(SUMOReal arg=0.004246)
MSEdge::setSlope(SUMOReal arg=0.002250)
MSEdge::setSlope(SUMOReal arg=-0.004244)
MSEdge::setSlope(SUMOReal arg=-0.000342)
MSEdge::setSlope(SUMOReal arg=0.024000)
MSEdge::setSlope(SUMOReal arg=0.010911)
MSEdge::setSlope(SUMOReal arg=0.026717)
MSEdge::setSlope(SUMOReal arg=-0.007346)
MSEdge::setSlope(SUMOReal arg=0.007346)
MSEdge::setSlope(SUMOReal arg=0.035285)
MSEdge::setSlope(SUMOReal arg=0.004097)
MSEdge::setSlope(SUMOReal arg=-0.017734)
MSEdge::setSlope(SUMOReal arg=0.007922)
MSEdge::setSlope(SUMOReal arg=-0.000822)
MSEdge::setSlope(SUMOReal arg=-0.007202)
MSEdge::setSlope(SUMOReal arg=0.003960)
MSEdge::setSlope(SUMOReal arg=0.032679)
MSEdge::setSlope(SUMOReal arg=0.004551)
MSEdge::setSlope(SUMOReal arg=-0.002793)
MSEdge::setSlope(SUMOReal arg=-0.003960)
MSEdge::setSlope(SUMOReal arg=0.008381)
MSEdge::setSlope(SUMOReal arg=-0.004285)
MSEdge::setSlope(SUMOReal arg=0.004285)
MSEdge::setSlope(SUMOReal arg=-0.001699)
MSEdge::setSlope(SUMOReal arg=-0.008692)
MSEdge::setSlope(SUMOReal arg=0.008737)
MSEdge::setSlope(SUMOReal arg=0.000816)
MSEdge::setSlope(SUMOReal arg=-0.039334)
MSEdge::setSlope(SUMOReal arg=0.002230)
MSEdge::setSlope(SUMOReal arg=0.039334)
MSEdge::setSlope(SUMOReal arg=0.012015)
MSEdge::setSlope(SUMOReal arg=-0.000816)
MSEdge::setSlope(SUMOReal arg=0.000818)
MSEdge::setSlope(SUMOReal arg=0.128501)
MSEdge::setSlope(SUMOReal arg=0.004141)
MSEdge::setSlope(SUMOReal arg=-0.002801)
MSEdge::setSlope(SUMOReal arg=0.029374)
MSEdge::setSlope(SUMOReal arg=0.015172)
MSEdge::setSlope(SUMOReal arg=0.107344)
MSEdge::setSlope(SUMOReal arg=0.011460)
MSEdge::setSlope(SUMOReal arg=-0.107344)
MSEdge::setSlope(SUMOReal arg=0.000079)
MSEdge::setSlope(SUMOReal arg=-0.016527)
MSEdge::setSlope(SUMOReal arg=0.001888)
MSEdge::setSlope(SUMOReal arg=0.016527)
MSEdge::setSlope(SUMOReal arg=0.001590)
MSEdge::setSlope(SUMOReal arg=-0.048742)
MSEdge::setSlope(SUMOReal arg=0.002557)
MSEdge::setSlope(SUMOReal arg=0.017727)
MSEdge::setSlope(SUMOReal arg=-0.017727)
MSEdge::setSlope(SUMOReal arg=-0.034593)
MSEdge::setSlope(SUMOReal arg=-0.011493)
MSEdge::setSlope(SUMOReal arg=0.001229)
MSEdge::setSlope(SUMOReal arg=-0.006755)
MSEdge::setSlope(SUMOReal arg=-0.015224)
MSEdge::setSlope(SUMOReal arg=0.014732)
MSEdge::setSlope(SUMOReal arg=0.000344)
MSEdge::setSlope(SUMOReal arg=0.012331)
MSEdge::setSlope(SUMOReal arg=-0.011389)
MSEdge::setSlope(SUMOReal arg=0.017381)
MSEdge::setSlope(SUMOReal arg=0.007404)
MSEdge::setSlope(SUMOReal arg=0.005131)
MSEdge::setSlope(SUMOReal arg=-0.009759)
MSEdge::setSlope(SUMOReal arg=-0.015090)
MSEdge::setSlope(SUMOReal arg=0.002238)
MSEdge::setSlope(SUMOReal arg=0.015243)
MSEdge::setSlope(SUMOReal arg=-0.002639)
MSEdge::setSlope(SUMOReal arg=-0.041643)
MSEdge::setSlope(SUMOReal arg=0.000824)
MSEdge::setSlope(SUMOReal arg=-0.000180)
MSEdge::setSlope(SUMOReal arg=-0.035450)
MSEdge::setSlope(SUMOReal arg=0.035867)
MSEdge::setSlope(SUMOReal arg=0.017863)
MSEdge::setSlope(SUMOReal arg=0.011092)
MSEdge::setSlope(SUMOReal arg=-0.017863)
MSEdge::setSlope(SUMOReal arg=-0.001066)
MSEdge::setSlope(SUMOReal arg=-0.000762)
MSEdge::setSlope(SUMOReal arg=0.000762)
MSEdge::setSlope(SUMOReal arg=0.011466)
MSEdge::setSlope(SUMOReal arg=0.004570)
MSEdge::setSlope(SUMOReal arg=-0.004504)
MSEdge::setSlope(SUMOReal arg=0.004068)
MSEdge::setSlope(SUMOReal arg=0.011574)
MSEdge::setSlope(SUMOReal arg=-0.000633)
MSEdge::setSlope(SUMOReal arg=0.000627)
MSEdge::setSlope(SUMOReal arg=0.000793)
MSEdge::setSlope(SUMOReal arg=0.035402)
MSEdge::setSlope(SUMOReal arg=0.009667)
MSEdge::setSlope(SUMOReal arg=0.001106)
MSEdge::setSlope(SUMOReal arg=-0.000788)
MSEdge::setSlope(SUMOReal arg=0.006290)
MSEdge::setSlope(SUMOReal arg=0.000204)
MSEdge::setSlope(SUMOReal arg=0.014749)
MSEdge::setSlope(SUMOReal arg=-0.023762)
MSEdge::setSlope(SUMOReal arg=-0.025507)
MSEdge::setSlope(SUMOReal arg=0.004178)
MSEdge::setSlope(SUMOReal arg=-0.000540)
MSEdge::setSlope(SUMOReal arg=0.094314)
MSEdge::setSlope(SUMOReal arg=-0.002173)
MSEdge::setSlope(SUMOReal arg=0.002223)
MSEdge::setSlope(SUMOReal arg=0.018611)
MSEdge::setSlope(SUMOReal arg=0.008456)
MSEdge::setSlope(SUMOReal arg=0.000540)
MSEdge::setSlope(SUMOReal arg=0.015565)
MSEdge::setSlope(SUMOReal arg=-0.002382)
MSEdge::setSlope(SUMOReal arg=-0.009468)
MSEdge::setSlope(SUMOReal arg=-0.004833)
MSEdge::setSlope(SUMOReal arg=0.005517)
MSEdge::setSlope(SUMOReal arg=-0.013690)
MSEdge::setSlope(SUMOReal arg=-0.006427)
MSEdge::setSlope(SUMOReal arg=0.061148)
MSEdge::setSlope(SUMOReal arg=-0.018611)
MSEdge::setSlope(SUMOReal arg=0.001533)
MSEdge::setSlope(SUMOReal arg=-0.011975)
MSEdge::setSlope(SUMOReal arg=-0.007686)
MSEdge::setSlope(SUMOReal arg=-0.007858)
MSEdge::setSlope(SUMOReal arg=0.013836)
MSEdge::setSlope(SUMOReal arg=0.005346)
MSEdge::setSlope(SUMOReal arg=0.002173)
MSEdge::setSlope(SUMOReal arg=0.012059)
MSEdge::setSlope(SUMOReal arg=-0.012419)
MSEdge::setSlope(SUMOReal arg=0.002479)
MSEdge::setSlope(SUMOReal arg=-0.000596)
MSEdge::setSlope(SUMOReal arg=0.017568)
MSEdge::setSlope(SUMOReal arg=0.003029)
MSEdge::setSlope(SUMOReal arg=-0.013836)
MSEdge::setSlope(SUMOReal arg=0.011975)
MSEdge::setSlope(SUMOReal arg=0.218669)
MSEdge::setSlope(SUMOReal arg=0.001720)
MSEdge::setSlope(SUMOReal arg=0.000529)
MSEdge::setSlope(SUMOReal arg=-0.218669)
MSEdge::setSlope(SUMOReal arg=0.017874)
MSEdge::setSlope(SUMOReal arg=-0.001200)
MSEdge::setSlope(SUMOReal arg=0.013513)
MSEdge::setSlope(SUMOReal arg=0.003276)
MSEdge::setSlope(SUMOReal arg=0.007686)
MSEdge::setSlope(SUMOReal arg=-0.023556)
MSEdge::setSlope(SUMOReal arg=0.001328)
MSEdge::setSlope(SUMOReal arg=-0.001343)
MSEdge::setSlope(SUMOReal arg=-0.006525)
MSEdge::setSlope(SUMOReal arg=0.001046)
MSEdge::setSlope(SUMOReal arg=-0.005455)
MSEdge::setSlope(SUMOReal arg=-0.001035)
MSEdge::setSlope(SUMOReal arg=0.005640)
MSEdge::setSlope(SUMOReal arg=-0.010094)
MSEdge::setSlope(SUMOReal arg=-0.012216)
MSEdge::setSlope(SUMOReal arg=0.004759)
MSEdge::setSlope(SUMOReal arg=0.013729)
MSEdge::setSlope(SUMOReal arg=-0.004587)
MSEdge::setSlope(SUMOReal arg=0.009639)
MSEdge::setSlope(SUMOReal arg=-0.009540)
MSEdge::setSlope(SUMOReal arg=0.015643)
MSEdge::setSlope(SUMOReal arg=-0.007734)
MSEdge::setSlope(SUMOReal arg=0.006494)
MSEdge::setSlope(SUMOReal arg=0.001339)
MSEdge::setSlope(SUMOReal arg=-0.000449)
MSEdge::setSlope(SUMOReal arg=-0.035402)
MSEdge::setSlope(SUMOReal arg=0.000458)
MSEdge::setSlope(SUMOReal arg=0.005132)
MSEdge::setSlope(SUMOReal arg=-0.005321)
MSEdge::setSlope(SUMOReal arg=0.001299)
MSEdge::setSlope(SUMOReal arg=0.000735)
MSEdge::setSlope(SUMOReal arg=-0.000589)
MSEdge::setSlope(SUMOReal arg=-0.001299)
MSEdge::setSlope(SUMOReal arg=0.012608)
MSEdge::setSlope(SUMOReal arg=0.007858)
MSEdge::setSlope(SUMOReal arg=-0.012608)
MSEdge::setSlope(SUMOReal arg=-0.005389)
MSEdge::setSlope(SUMOReal arg=0.006987)
MSEdge::setSlope(SUMOReal arg=0.008910)
MSEdge::setSlope(SUMOReal arg=0.000596)
MSEdge::setSlope(SUMOReal arg=0.008419)
MSEdge::setSlope(SUMOReal arg=-0.002684)
MSEdge::setSlope(SUMOReal arg=0.002676)
MSEdge::setSlope(SUMOReal arg=0.022831)
MSEdge::setSlope(SUMOReal arg=-0.002967)
MSEdge::setSlope(SUMOReal arg=-0.022577)
MSEdge::setSlope(SUMOReal arg=-0.002010)
MSEdge::setSlope(SUMOReal arg=0.001068)
MSEdge::setSlope(SUMOReal arg=-0.008927)
MSEdge::setSlope(SUMOReal arg=-0.001085)
MSEdge::setSlope(SUMOReal arg=-0.006554)
MSEdge::setSlope(SUMOReal arg=-0.010891)
MSEdge::setSlope(SUMOReal arg=-0.008125)
MSEdge::setSlope(SUMOReal arg=0.006643)
MSEdge::setSlope(SUMOReal arg=-0.017538)
MSEdge::setSlope(SUMOReal arg=0.004811)
MSEdge::setSlope(SUMOReal arg=0.004190)
MSEdge::setSlope(SUMOReal arg=-0.004938)
MSEdge::setSlope(SUMOReal arg=-0.003464)
MSEdge::setSlope(SUMOReal arg=0.006501)
MSEdge::setSlope(SUMOReal arg=0.004825)
MSEdge::setSlope(SUMOReal arg=0.003366)
MSEdge::setSlope(SUMOReal arg=0.009394)
MSEdge::setSlope(SUMOReal arg=-0.016836)
MSEdge::setSlope(SUMOReal arg=0.002628)
MSEdge::setSlope(SUMOReal arg=-0.000818)
MSEdge::setSlope(SUMOReal arg=0.001203)
MSEdge::setSlope(SUMOReal arg=0.005365)
MSEdge::setSlope(SUMOReal arg=0.000814)
MSEdge::setSlope(SUMOReal arg=0.001246)
MSEdge::setSlope(SUMOReal arg=-0.000615)
MSEdge::setSlope(SUMOReal arg=-0.002875)
MSEdge::setSlope(SUMOReal arg=0.015164)
MSEdge::setSlope(SUMOReal arg=-0.017381)
MSEdge::setSlope(SUMOReal arg=-0.014992)
MSEdge::setSlope(SUMOReal arg=-0.003311)
MSEdge::setSlope(SUMOReal arg=-0.004345)
MSEdge::setSlope(SUMOReal arg=0.001193)
MSEdge::setSlope(SUMOReal arg=-0.002870)
MSEdge::setSlope(SUMOReal arg=0.002555)
MSEdge::setSlope(SUMOReal arg=0.002863)
MSEdge::setSlope(SUMOReal arg=-0.002078)
MSEdge::setSlope(SUMOReal arg=-0.000721)
MSEdge::setSlope(SUMOReal arg=-0.000384)
MSEdge::setSlope(SUMOReal arg=0.002878)
MSEdge::setSlope(SUMOReal arg=-0.003762)
MSEdge::setSlope(SUMOReal arg=0.053441)
MSEdge::setSlope(SUMOReal arg=-0.000635)
MSEdge::setSlope(SUMOReal arg=-0.003386)
MSEdge::setSlope(SUMOReal arg=-0.003273)
MSEdge::setSlope(SUMOReal arg=0.000634)
MSEdge::setSlope(SUMOReal arg=0.003126)
MSEdge::setSlope(SUMOReal arg=0.001982)
MSEdge::setSlope(SUMOReal arg=0.008575)
MSEdge::setSlope(SUMOReal arg=-0.008617)
MSEdge::setSlope(SUMOReal arg=0.016358)
MSEdge::setSlope(SUMOReal arg=-0.013319)
MSEdge::setSlope(SUMOReal arg=-0.044300)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.002393)
MSEdge::setSlope(SUMOReal arg=0.000216)
MSEdge::setSlope(SUMOReal arg=-0.002411)
MSEdge::setSlope(SUMOReal arg=0.003912)
MSEdge::setSlope(SUMOReal arg=0.003264)
MSEdge::setSlope(SUMOReal arg=-0.003860)
MSEdge::setSlope(SUMOReal arg=-0.009163)
MSEdge::setSlope(SUMOReal arg=0.009293)
MSEdge::setSlope(SUMOReal arg=-0.003829)
MSEdge::setSlope(SUMOReal arg=-0.001984)
MSEdge::setSlope(SUMOReal arg=0.001925)
MSEdge::setSlope(SUMOReal arg=-0.012110)
MSEdge::setSlope(SUMOReal arg=-0.023213)
MSEdge::setSlope(SUMOReal arg=0.023213)
MSEdge::setSlope(SUMOReal arg=0.010183)
MSEdge::setSlope(SUMOReal arg=0.009612)
MSEdge::setSlope(SUMOReal arg=-0.010615)
MSEdge::setSlope(SUMOReal arg=0.000986)
MSEdge::setSlope(SUMOReal arg=-0.001874)
MSEdge::setSlope(SUMOReal arg=0.007693)
MSEdge::setSlope(SUMOReal arg=0.001406)
MSEdge::setSlope(SUMOReal arg=0.043688)
MSEdge::setSlope(SUMOReal arg=-0.040183)
MSEdge::setSlope(SUMOReal arg=-0.008434)
MSEdge::setSlope(SUMOReal arg=-0.026242)
MSEdge::setSlope(SUMOReal arg=-0.025513)
MSEdge::setSlope(SUMOReal arg=0.008099)
MSEdge::setSlope(SUMOReal arg=-0.007459)
MSEdge::setSlope(SUMOReal arg=-0.001536)
MSEdge::setSlope(SUMOReal arg=-0.111425)
MSEdge::setSlope(SUMOReal arg=-0.018115)
MSEdge::setSlope(SUMOReal arg=-0.010918)
MSEdge::setSlope(SUMOReal arg=0.005188)
MSEdge::setSlope(SUMOReal arg=0.007051)
MSEdge::setSlope(SUMOReal arg=-0.002661)
MSEdge::setSlope(SUMOReal arg=-0.001239)
MSEdge::setSlope(SUMOReal arg=0.002690)
MSEdge::setSlope(SUMOReal arg=0.007728)
MSEdge::setSlope(SUMOReal arg=0.024385)
MSEdge::setSlope(SUMOReal arg=0.007028)
MSEdge::setSlope(SUMOReal arg=-0.025653)
MSEdge::setSlope(SUMOReal arg=0.001879)
MSEdge::setSlope(SUMOReal arg=-0.003788)
MSEdge::setSlope(SUMOReal arg=0.002276)
MSEdge::setSlope(SUMOReal arg=0.001395)
MSEdge::setSlope(SUMOReal arg=0.006559)
MSEdge::setSlope(SUMOReal arg=-0.006939)
MSEdge::setSlope(SUMOReal arg=-0.001021)
MSEdge::setSlope(SUMOReal arg=0.002890)
MSEdge::setSlope(SUMOReal arg=0.001021)
MSEdge::setSlope(SUMOReal arg=-0.003103)
MSEdge::setSlope(SUMOReal arg=0.003103)
MSEdge::setSlope(SUMOReal arg=0.008682)
MSEdge::setSlope(SUMOReal arg=0.017019)
MSEdge::setSlope(SUMOReal arg=-0.008925)
MSEdge::setSlope(SUMOReal arg=0.011894)
MSEdge::setSlope(SUMOReal arg=0.013878)
MSEdge::setSlope(SUMOReal arg=-0.013878)
MSEdge::setSlope(SUMOReal arg=-0.111777)
MSEdge::setSlope(SUMOReal arg=-0.081663)
MSEdge::setSlope(SUMOReal arg=0.081663)
MSEdge::setSlope(SUMOReal arg=0.016070)
MSEdge::setSlope(SUMOReal arg=0.023073)
MSEdge::setSlope(SUMOReal arg=-0.016070)
MSEdge::setSlope(SUMOReal arg=0.000194)
MSEdge::setSlope(SUMOReal arg=-0.000194)
MSEdge::setSlope(SUMOReal arg=-0.030046)
MSEdge::setSlope(SUMOReal arg=0.002142)
MSEdge::setSlope(SUMOReal arg=0.008478)
MSEdge::setSlope(SUMOReal arg=0.001264)
MSEdge::setSlope(SUMOReal arg=0.011190)
MSEdge::setSlope(SUMOReal arg=0.000619)
MSEdge::setSlope(SUMOReal arg=-0.011894)
MSEdge::setSlope(SUMOReal arg=0.000372)
MSEdge::setSlope(SUMOReal arg=0.009011)
MSEdge::setSlope(SUMOReal arg=0.051840)
MSEdge::setSlope(SUMOReal arg=-0.059480)
MSEdge::setSlope(SUMOReal arg=-0.006559)
MSEdge::setSlope(SUMOReal arg=0.006854)
MSEdge::setSlope(SUMOReal arg=0.043630)
MSEdge::setSlope(SUMOReal arg=-0.001521)
MSEdge::setSlope(SUMOReal arg=0.003617)
MSEdge::setSlope(SUMOReal arg=0.001517)
MSEdge::setSlope(SUMOReal arg=-0.007892)
MSEdge::setSlope(SUMOReal arg=0.001588)
MSEdge::setSlope(SUMOReal arg=-0.002900)
MSEdge::setSlope(SUMOReal arg=-0.003045)
MSEdge::setSlope(SUMOReal arg=0.051626)
MSEdge::setSlope(SUMOReal arg=-0.005348)
MSEdge::setSlope(SUMOReal arg=-0.010230)
MSEdge::setSlope(SUMOReal arg=0.005348)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.007688)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.009861)
MSEdge::setSlope(SUMOReal arg=-0.000876)
MSEdge::setSlope(SUMOReal arg=0.003659)
MSEdge::setSlope(SUMOReal arg=0.002158)
MSEdge::setSlope(SUMOReal arg=-0.019492)
MSEdge::setSlope(SUMOReal arg=-0.007698)
MSEdge::setSlope(SUMOReal arg=-0.002453)
MSEdge::setSlope(SUMOReal arg=-0.002246)
MSEdge::setSlope(SUMOReal arg=0.008355)
MSEdge::setSlope(SUMOReal arg=0.003826)
MSEdge::setSlope(SUMOReal arg=-0.010097)
MSEdge::setSlope(SUMOReal arg=0.014588)
MSEdge::setSlope(SUMOReal arg=0.010620)
MSEdge::setSlope(SUMOReal arg=-0.002872)
MSEdge::setSlope(SUMOReal arg=0.003293)
MSEdge::setSlope(SUMOReal arg=0.002912)
MSEdge::setSlope(SUMOReal arg=0.005375)
MSEdge::setSlope(SUMOReal arg=0.016849)
MSEdge::setSlope(SUMOReal arg=-0.016849)
MSEdge::setSlope(SUMOReal arg=0.003103)
MSEdge::setSlope(SUMOReal arg=0.006204)
MSEdge::setSlope(SUMOReal arg=-0.007114)
MSEdge::setSlope(SUMOReal arg=-0.006596)
MSEdge::setSlope(SUMOReal arg=-0.001878)
MSEdge::setSlope(SUMOReal arg=-0.001116)
MSEdge::setSlope(SUMOReal arg=-0.002274)
MSEdge::setSlope(SUMOReal arg=0.011496)
MSEdge::setSlope(SUMOReal arg=-0.009011)
MSEdge::setSlope(SUMOReal arg=-0.011517)
MSEdge::setSlope(SUMOReal arg=-0.051840)
MSEdge::setSlope(SUMOReal arg=0.004894)
MSEdge::setSlope(SUMOReal arg=-0.000373)
MSEdge::setSlope(SUMOReal arg=-0.004794)
MSEdge::setSlope(SUMOReal arg=-0.001906)
MSEdge::setSlope(SUMOReal arg=-0.019136)
MSEdge::setSlope(SUMOReal arg=-0.027943)
MSEdge::setSlope(SUMOReal arg=0.000187)
MSEdge::setSlope(SUMOReal arg=0.000634)
MSEdge::setSlope(SUMOReal arg=0.000379)
MSEdge::setSlope(SUMOReal arg=0.016717)
MSEdge::setSlope(SUMOReal arg=-0.000320)
MSEdge::setSlope(SUMOReal arg=-0.000634)
MSEdge::setSlope(SUMOReal arg=0.111777)
MSEdge::setSlope(SUMOReal arg=-0.003261)
MSEdge::setSlope(SUMOReal arg=-0.030832)
MSEdge::setSlope(SUMOReal arg=-0.007588)
MSEdge::setSlope(SUMOReal arg=-0.018811)
MSEdge::setSlope(SUMOReal arg=0.007590)
MSEdge::setSlope(SUMOReal arg=-0.011873)
MSEdge::setSlope(SUMOReal arg=-0.008675)
MSEdge::setSlope(SUMOReal arg=-0.001995)
MSEdge::setSlope(SUMOReal arg=-0.004787)
MSEdge::setSlope(SUMOReal arg=0.001995)
MSEdge::setSlope(SUMOReal arg=-0.008262)
MSEdge::setSlope(SUMOReal arg=-0.005879)
MSEdge::setSlope(SUMOReal arg=0.006015)
MSEdge::setSlope(SUMOReal arg=0.000544)
MSEdge::setSlope(SUMOReal arg=-0.012554)
MSEdge::setSlope(SUMOReal arg=0.003107)
MSEdge::setSlope(SUMOReal arg=-0.005197)
MSEdge::setSlope(SUMOReal arg=-0.002978)
MSEdge::setSlope(SUMOReal arg=0.005220)
MSEdge::setSlope(SUMOReal arg=-0.002278)
MSEdge::setSlope(SUMOReal arg=-0.005587)
MSEdge::setSlope(SUMOReal arg=0.005587)
MSEdge::setSlope(SUMOReal arg=-0.003084)
MSEdge::setSlope(SUMOReal arg=-0.002763)
MSEdge::setSlope(SUMOReal arg=0.002763)
MSEdge::setSlope(SUMOReal arg=0.001488)
MSEdge::setSlope(SUMOReal arg=0.035984)
MSEdge::setSlope(SUMOReal arg=-0.028699)
MSEdge::setSlope(SUMOReal arg=-0.015553)
MSEdge::setSlope(SUMOReal arg=-0.029232)
MSEdge::setSlope(SUMOReal arg=-0.013679)
MSEdge::setSlope(SUMOReal arg=0.003589)
MSEdge::setSlope(SUMOReal arg=0.065627)
MSEdge::setSlope(SUMOReal arg=-0.010996)
MSEdge::setSlope(SUMOReal arg=-0.065627)
MSEdge::setSlope(SUMOReal arg=-0.111489)
MSEdge::setSlope(SUMOReal arg=-0.028879)
MSEdge::setSlope(SUMOReal arg=0.111489)
MSEdge::setSlope(SUMOReal arg=0.003495)
MSEdge::setSlope(SUMOReal arg=-0.023188)
MSEdge::setSlope(SUMOReal arg=-0.008364)
MSEdge::setSlope(SUMOReal arg=-0.032679)
MSEdge::setSlope(SUMOReal arg=-0.001264)
MSEdge::setSlope(SUMOReal arg=-0.003364)
MSEdge::setSlope(SUMOReal arg=-0.007918)
MSEdge::setSlope(SUMOReal arg=-0.000130)
MSEdge::setSlope(SUMOReal arg=0.039502)
MSEdge::setSlope(SUMOReal arg=0.007643)
MSEdge::setSlope(SUMOReal arg=-0.038443)
MSEdge::setSlope(SUMOReal arg=-0.003367)
MSEdge::setSlope(SUMOReal arg=-0.001893)
MSEdge::setSlope(SUMOReal arg=-0.002922)
MSEdge::setSlope(SUMOReal arg=0.005648)
MSEdge::setSlope(SUMOReal arg=0.002922)
MSEdge::setSlope(SUMOReal arg=0.001792)
MSEdge::setSlope(SUMOReal arg=0.018197)
MSEdge::setSlope(SUMOReal arg=-0.018197)
MSEdge::setSlope(SUMOReal arg=-0.001421)
MSEdge::setSlope(SUMOReal arg=-0.019399)
MSEdge::setSlope(SUMOReal arg=0.001421)
MSEdge::setSlope(SUMOReal arg=-0.002932)
MSEdge::setSlope(SUMOReal arg=-0.111052)
MSEdge::setSlope(SUMOReal arg=0.111052)
MSEdge::setSlope(SUMOReal arg=-0.008087)
MSEdge::setSlope(SUMOReal arg=-0.002841)
MSEdge::setSlope(SUMOReal arg=0.008087)
MSEdge::setSlope(SUMOReal arg=0.076188)
MSEdge::setSlope(SUMOReal arg=-0.000371)
MSEdge::setSlope(SUMOReal arg=-0.076188)
MSEdge::setSlope(SUMOReal arg=-0.068416)
MSEdge::setSlope(SUMOReal arg=-0.001017)
MSEdge::setSlope(SUMOReal arg=0.068416)
MSEdge::setSlope(SUMOReal arg=0.009752)
MSEdge::setSlope(SUMOReal arg=-0.002267)
MSEdge::setSlope(SUMOReal arg=-0.024582)
MSEdge::setSlope(SUMOReal arg=0.040331)
MSEdge::setSlope(SUMOReal arg=-0.040331)
MSEdge::setSlope(SUMOReal arg=-0.030007)
MSEdge::setSlope(SUMOReal arg=0.009132)
MSEdge::setSlope(SUMOReal arg=0.030007)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.007576)
MSEdge::setSlope(SUMOReal arg=-0.031553)
MSEdge::setSlope(SUMOReal arg=-0.013575)
MSEdge::setSlope(SUMOReal arg=-0.006657)
MSEdge::setSlope(SUMOReal arg=-0.036890)
MSEdge::setSlope(SUMOReal arg=0.027713)
MSEdge::setSlope(SUMOReal arg=0.035206)
MSEdge::setSlope(SUMOReal arg=0.001346)
MSEdge::setSlope(SUMOReal arg=0.001273)
MSEdge::setSlope(SUMOReal arg=0.006617)
MSEdge::setSlope(SUMOReal arg=0.005471)
MSEdge::setSlope(SUMOReal arg=-0.002954)
MSEdge::setSlope(SUMOReal arg=-0.005269)
MSEdge::setSlope(SUMOReal arg=-0.008366)
MSEdge::setSlope(SUMOReal arg=0.008262)
MSEdge::setSlope(SUMOReal arg=0.001789)
MSEdge::setSlope(SUMOReal arg=-0.000470)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000678)
MSEdge::setSlope(SUMOReal arg=-0.003684)
MSEdge::setSlope(SUMOReal arg=0.001267)
MSEdge::setSlope(SUMOReal arg=0.003684)
MSEdge::setSlope(SUMOReal arg=-0.008381)
MSEdge::setSlope(SUMOReal arg=0.020560)
MSEdge::setSlope(SUMOReal arg=0.066805)
MSEdge::setSlope(SUMOReal arg=-0.003495)
MSEdge::setSlope(SUMOReal arg=-0.066805)
MSEdge::setSlope(SUMOReal arg=0.028879)
MSEdge::setSlope(SUMOReal arg=-0.048130)
MSEdge::setSlope(SUMOReal arg=-0.000897)
MSEdge::setSlope(SUMOReal arg=-0.009903)
MSEdge::setSlope(SUMOReal arg=0.076555)
MSEdge::setSlope(SUMOReal arg=0.018493)
MSEdge::setSlope(SUMOReal arg=-0.076555)
MSEdge::setSlope(SUMOReal arg=-0.075650)
MSEdge::setSlope(SUMOReal arg=-0.006857)
MSEdge::setSlope(SUMOReal arg=0.006857)
MSEdge::setSlope(SUMOReal arg=-0.001219)
MSEdge::setSlope(SUMOReal arg=-0.004110)
MSEdge::setSlope(SUMOReal arg=0.037525)
MSEdge::setSlope(SUMOReal arg=0.002194)
MSEdge::setSlope(SUMOReal arg=0.003561)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000188)
MSEdge::setSlope(SUMOReal arg=0.004787)
MSEdge::setSlope(SUMOReal arg=0.000847)
MSEdge::setSlope(SUMOReal arg=-0.004787)
MSEdge::setSlope(SUMOReal arg=-0.002825)
MSEdge::setSlope(SUMOReal arg=-0.042844)
MSEdge::setSlope(SUMOReal arg=-0.069425)
MSEdge::setSlope(SUMOReal arg=-0.003529)
MSEdge::setSlope(SUMOReal arg=-0.802346)
MSEdge::setSlope(SUMOReal arg=0.058350)
MSEdge::setSlope(SUMOReal arg=0.001504)
MSEdge::setSlope(SUMOReal arg=-0.001692)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002601)
MSEdge::setSlope(SUMOReal arg=-0.004163)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.002826)
MSEdge::setSlope(SUMOReal arg=-0.002826)
MSEdge::setSlope(SUMOReal arg=0.036569)
MSEdge::setSlope(SUMOReal arg=-0.036569)
MSEdge::setSlope(SUMOReal arg=0.000604)
MSEdge::setSlope(SUMOReal arg=0.003459)
MSEdge::setSlope(SUMOReal arg=-0.003459)
MSEdge::setSlope(SUMOReal arg=0.002183)
MSEdge::setSlope(SUMOReal arg=-0.002661)
MSEdge::setSlope(SUMOReal arg=0.023525)
MSEdge::setSlope(SUMOReal arg=0.002661)
MSEdge::setSlope(SUMOReal arg=-0.003328)
MSEdge::setSlope(SUMOReal arg=-0.000560)
MSEdge::setSlope(SUMOReal arg=0.003328)
MSEdge::setSlope(SUMOReal arg=-0.003653)
MSEdge::setSlope(SUMOReal arg=0.003653)
MSEdge::setSlope(SUMOReal arg=-0.002435)
MSEdge::setSlope(SUMOReal arg=-0.001918)
MSEdge::setSlope(SUMOReal arg=-0.012015)
MSEdge::setSlope(SUMOReal arg=-0.001958)
MSEdge::setSlope(SUMOReal arg=-0.005081)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.005081)
MSEdge::setSlope(SUMOReal arg=-0.012345)
MSEdge::setSlope(SUMOReal arg=0.002814)
MSEdge::setSlope(SUMOReal arg=0.012345)
MSEdge::setSlope(SUMOReal arg=-0.003285)
MSEdge::setSlope(SUMOReal arg=-0.004257)
MSEdge::setSlope(SUMOReal arg=0.004257)
MSEdge::setSlope(SUMOReal arg=0.001846)
MSEdge::setSlope(SUMOReal arg=-0.006735)
MSEdge::setSlope(SUMOReal arg=-0.002181)
MSEdge::setSlope(SUMOReal arg=0.006681)
MSEdge::setSlope(SUMOReal arg=0.014651)
MSEdge::setSlope(SUMOReal arg=-0.001509)
MSEdge::setSlope(SUMOReal arg=-0.000188)
MSEdge::setSlope(SUMOReal arg=0.001509)
MSEdge::setSlope(SUMOReal arg=-0.008000)
MSEdge::setSlope(SUMOReal arg=-0.030918)
MSEdge::setSlope(SUMOReal arg=0.002825)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.030918)
MSEdge::setSlope(SUMOReal arg=-0.007092)
MSEdge::setSlope(SUMOReal arg=-0.006797)
MSEdge::setSlope(SUMOReal arg=0.005681)
MSEdge::setSlope(SUMOReal arg=0.003343)
MSEdge::setSlope(SUMOReal arg=0.049141)
MSEdge::setSlope(SUMOReal arg=-0.022609)
MSEdge::setSlope(SUMOReal arg=-0.002804)
MSEdge::setSlope(SUMOReal arg=0.022609)
MSEdge::setSlope(SUMOReal arg=0.000314)
MSEdge::setSlope(SUMOReal arg=0.002171)
MSEdge::setSlope(SUMOReal arg=-0.003969)
MSEdge::setSlope(SUMOReal arg=0.001325)
MSEdge::setSlope(SUMOReal arg=-0.007384)
MSEdge::setSlope(SUMOReal arg=0.007384)
MSEdge::setSlope(SUMOReal arg=-0.000424)
MSEdge::setSlope(SUMOReal arg=0.004044)
MSEdge::setSlope(SUMOReal arg=-0.000239)
MSEdge::setSlope(SUMOReal arg=-0.004044)
MSEdge::setSlope(SUMOReal arg=-0.008760)
MSEdge::setSlope(SUMOReal arg=-0.001710)
MSEdge::setSlope(SUMOReal arg=0.004297)
MSEdge::setSlope(SUMOReal arg=-0.000314)
MSEdge::setSlope(SUMOReal arg=0.002232)
MSEdge::setSlope(SUMOReal arg=0.006349)
MSEdge::setSlope(SUMOReal arg=-0.006349)
MSEdge::setSlope(SUMOReal arg=-0.070221)
MSEdge::setSlope(SUMOReal arg=-0.007750)
MSEdge::setSlope(SUMOReal arg=0.007750)
MSEdge::setSlope(SUMOReal arg=0.003442)
MSEdge::setSlope(SUMOReal arg=0.003298)
MSEdge::setSlope(SUMOReal arg=0.019196)
MSEdge::setSlope(SUMOReal arg=-0.003281)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.019997)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.020790)
MSEdge::setSlope(SUMOReal arg=0.001852)
MSEdge::setSlope(SUMOReal arg=0.002267)
MSEdge::setSlope(SUMOReal arg=-0.020790)
MSEdge::setSlope(SUMOReal arg=-0.006016)
MSEdge::setSlope(SUMOReal arg=0.006016)
MSEdge::setSlope(SUMOReal arg=0.000396)
MSEdge::setSlope(SUMOReal arg=0.007447)
MSEdge::setSlope(SUMOReal arg=-0.007486)
MSEdge::setSlope(SUMOReal arg=-0.006797)
MSEdge::setSlope(SUMOReal arg=-0.000229)
MSEdge::setSlope(SUMOReal arg=0.003969)
MSEdge::setSlope(SUMOReal arg=0.055303)
MSEdge::setSlope(SUMOReal arg=0.045656)
MSEdge::setSlope(SUMOReal arg=-0.055303)
MSEdge::setSlope(SUMOReal arg=0.041850)
MSEdge::setSlope(SUMOReal arg=0.015761)
MSEdge::setSlope(SUMOReal arg=-0.015851)
MSEdge::setSlope(SUMOReal arg=0.008108)
MSEdge::setSlope(SUMOReal arg=0.004121)
MSEdge::setSlope(SUMOReal arg=0.022017)
MSEdge::setSlope(SUMOReal arg=-0.004119)
MSEdge::setSlope(SUMOReal arg=0.029449)
MSEdge::setSlope(SUMOReal arg=0.006912)
MSEdge::setSlope(SUMOReal arg=-0.008034)
MSEdge::setSlope(SUMOReal arg=-0.005222)
MSEdge::setSlope(SUMOReal arg=0.008034)
MSEdge::setSlope(SUMOReal arg=0.001330)
MSEdge::setSlope(SUMOReal arg=-0.006363)
MSEdge::setSlope(SUMOReal arg=0.006363)
MSEdge::setSlope(SUMOReal arg=-0.001572)
MSEdge::setSlope(SUMOReal arg=-0.004619)
MSEdge::setSlope(SUMOReal arg=0.004619)
MSEdge::setSlope(SUMOReal arg=-0.004719)
MSEdge::setSlope(SUMOReal arg=0.001887)
MSEdge::setSlope(SUMOReal arg=0.004719)
MSEdge::setSlope(SUMOReal arg=0.002073)
MSEdge::setSlope(SUMOReal arg=-0.008130)
MSEdge::setSlope(SUMOReal arg=0.008130)
MSEdge::setSlope(SUMOReal arg=-0.002746)
MSEdge::setSlope(SUMOReal arg=-0.004307)
MSEdge::setSlope(SUMOReal arg=-0.000431)
MSEdge::setSlope(SUMOReal arg=-0.021324)
MSEdge::setSlope(SUMOReal arg=0.489957)
MSEdge::setSlope(SUMOReal arg=0.005230)
MSEdge::setSlope(SUMOReal arg=-0.324905)
MSEdge::setSlope(SUMOReal arg=-0.001373)
MSEdge::setSlope(SUMOReal arg=0.012208)
MSEdge::setSlope(SUMOReal arg=0.027932)
MSEdge::setSlope(SUMOReal arg=0.009297)
MSEdge::setSlope(SUMOReal arg=0.013085)
MSEdge::setSlope(SUMOReal arg=-0.009297)
MSEdge::setSlope(SUMOReal arg=0.003808)
MSEdge::setSlope(SUMOReal arg=0.007219)
MSEdge::setSlope(SUMOReal arg=-0.005116)
MSEdge::setSlope(SUMOReal arg=-0.012253)
MSEdge::setSlope(SUMOReal arg=0.000617)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.008695)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.206536)
MSEdge::setSlope(SUMOReal arg=0.000437)
MSEdge::setSlope(SUMOReal arg=-0.002644)
MSEdge::setSlope(SUMOReal arg=-0.015589)
MSEdge::setSlope(SUMOReal arg=0.002793)
MSEdge::setSlope(SUMOReal arg=0.000623)
MSEdge::setSlope(SUMOReal arg=0.004072)
MSEdge::setSlope(SUMOReal arg=0.120624)
MSEdge::setSlope(SUMOReal arg=-0.000075)
MSEdge::setSlope(SUMOReal arg=0.000076)
MSEdge::setSlope(SUMOReal arg=-0.005250)
MSEdge::setSlope(SUMOReal arg=-0.000953)
MSEdge::setSlope(SUMOReal arg=0.003647)
MSEdge::setSlope(SUMOReal arg=0.005220)
MSEdge::setSlope(SUMOReal arg=-0.006354)
MSEdge::setSlope(SUMOReal arg=-0.005097)
MSEdge::setSlope(SUMOReal arg=0.006362)
MSEdge::setSlope(SUMOReal arg=-0.004082)
MSEdge::setSlope(SUMOReal arg=0.002430)
MSEdge::setSlope(SUMOReal arg=0.004082)
MSEdge::setSlope(SUMOReal arg=-0.001808)
MSEdge::setSlope(SUMOReal arg=-0.007986)
MSEdge::setSlope(SUMOReal arg=-0.019196)
MSEdge::setSlope(SUMOReal arg=0.007922)
MSEdge::setSlope(SUMOReal arg=0.000080)
MSEdge::setSlope(SUMOReal arg=-0.000389)
MSEdge::setSlope(SUMOReal arg=0.000389)
MSEdge::setSlope(SUMOReal arg=-0.062341)
MSEdge::setSlope(SUMOReal arg=0.019202)
MSEdge::setSlope(SUMOReal arg=-0.009132)
MSEdge::setSlope(SUMOReal arg=-0.030327)
MSEdge::setSlope(SUMOReal arg=-0.031828)
MSEdge::setSlope(SUMOReal arg=0.031828)
MSEdge::setSlope(SUMOReal arg=0.006247)
MSEdge::setSlope(SUMOReal arg=-0.005793)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.007576)
MSEdge::setSlope(SUMOReal arg=0.005048)
MSEdge::setSlope(SUMOReal arg=0.038443)
MSEdge::setSlope(SUMOReal arg=0.001071)
MSEdge::setSlope(SUMOReal arg=-0.000944)
MSEdge::setSlope(SUMOReal arg=0.031553)
MSEdge::setSlope(SUMOReal arg=0.024582)
MSEdge::setSlope(SUMOReal arg=0.010285)
MSEdge::setSlope(SUMOReal arg=-0.006247)
MSEdge::setSlope(SUMOReal arg=0.002558)
MSEdge::setSlope(SUMOReal arg=0.002066)
MSEdge::setSlope(SUMOReal arg=-0.004557)
MSEdge::setSlope(SUMOReal arg=-0.005677)
MSEdge::setSlope(SUMOReal arg=-0.006360)
MSEdge::setSlope(SUMOReal arg=0.005501)
MSEdge::setSlope(SUMOReal arg=0.004663)
MSEdge::setSlope(SUMOReal arg=0.075650)
MSEdge::setSlope(SUMOReal arg=0.042844)
MSEdge::setSlope(SUMOReal arg=0.008695)
MSEdge::setSlope(SUMOReal arg=0.021324)
MSEdge::setSlope(SUMOReal arg=-0.005230)
MSEdge::setSlope(SUMOReal arg=0.136009)
MSEdge::setSlope(SUMOReal arg=0.009286)
MSEdge::setSlope(SUMOReal arg=-0.114541)
MSEdge::setSlope(SUMOReal arg=0.114541)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002558)
MSEdge::setSlope(SUMOReal arg=0.003972)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.069425)
MSEdge::setSlope(SUMOReal arg=-0.000053)
MSEdge::setSlope(SUMOReal arg=0.000129)
MSEdge::setSlope(SUMOReal arg=0.009675)
MSEdge::setSlope(SUMOReal arg=0.022853)
MSEdge::setSlope(SUMOReal arg=-0.014539)
MSEdge::setSlope(SUMOReal arg=0.009903)
MSEdge::setSlope(SUMOReal arg=0.016971)
MSEdge::setSlope(SUMOReal arg=0.005014)
MSEdge::setSlope(SUMOReal arg=0.003364)
MSEdge::setSlope(SUMOReal arg=-0.001037)
MSEdge::setSlope(SUMOReal arg=0.000953)
MSEdge::setSlope(SUMOReal arg=0.012570)
MSEdge::setSlope(SUMOReal arg=-0.006528)
MSEdge::setSlope(SUMOReal arg=0.802346)
MSEdge::setSlope(SUMOReal arg=0.002924)
MSEdge::setSlope(SUMOReal arg=-0.027932)
MSEdge::setSlope(SUMOReal arg=-0.007958)
MSEdge::setSlope(SUMOReal arg=-0.013085)
MSEdge::setSlope(SUMOReal arg=0.005250)
MSEdge::setSlope(SUMOReal arg=0.029222)
MSEdge::setSlope(SUMOReal arg=-0.001794)
MSEdge::setSlope(SUMOReal arg=-0.016971)
MSEdge::setSlope(SUMOReal arg=0.003819)
MSEdge::setSlope(SUMOReal arg=-0.003441)
MSEdge::setSlope(SUMOReal arg=0.013461)
MSEdge::setSlope(SUMOReal arg=-0.000080)
MSEdge::setSlope(SUMOReal arg=0.002841)
MSEdge::setSlope(SUMOReal arg=0.028699)
MSEdge::setSlope(SUMOReal arg=0.002640)
MSEdge::setSlope(SUMOReal arg=0.001037)
MSEdge::setSlope(SUMOReal arg=0.013454)
MSEdge::setSlope(SUMOReal arg=0.004794)
MSEdge::setSlope(SUMOReal arg=0.006797)
MSEdge::setSlope(SUMOReal arg=0.006646)
MSEdge::setSlope(SUMOReal arg=-0.136009)
MSEdge::setSlope(SUMOReal arg=0.004323)
MSEdge::setSlope(SUMOReal arg=-0.004323)
MSEdge::setSlope(SUMOReal arg=0.018975)
MSEdge::setSlope(SUMOReal arg=-0.055051)
MSEdge::setSlope(SUMOReal arg=-0.018990)
MSEdge::setSlope(SUMOReal arg=-0.006228)
MSEdge::setSlope(SUMOReal arg=-0.020263)
MSEdge::setSlope(SUMOReal arg=0.004950)
MSEdge::setSlope(SUMOReal arg=0.043146)
MSEdge::setSlope(SUMOReal arg=-0.004950)
MSEdge::setSlope(SUMOReal arg=-0.000434)
MSEdge::setSlope(SUMOReal arg=0.000602)
MSEdge::setSlope(SUMOReal arg=0.004110)
MSEdge::setSlope(SUMOReal arg=0.005727)
MSEdge::setSlope(SUMOReal arg=0.062341)
MSEdge::setSlope(SUMOReal arg=0.003364)
MSEdge::setSlope(SUMOReal arg=0.003101)
MSEdge::setSlope(SUMOReal arg=0.001686)
MSEdge::setSlope(SUMOReal arg=-0.007246)
MSEdge::setSlope(SUMOReal arg=-0.004087)
MSEdge::setSlope(SUMOReal arg=0.003859)
MSEdge::setSlope(SUMOReal arg=0.004082)
MSEdge::setSlope(SUMOReal arg=-0.004681)
MSEdge::setSlope(SUMOReal arg=-0.002291)
MSEdge::setSlope(SUMOReal arg=0.004681)
MSEdge::setSlope(SUMOReal arg=-0.003110)
MSEdge::setSlope(SUMOReal arg=0.003065)
MSEdge::setSlope(SUMOReal arg=-0.005727)
MSEdge::setSlope(SUMOReal arg=0.008437)
MSEdge::setSlope(SUMOReal arg=0.070221)
MSEdge::setSlope(SUMOReal arg=-0.000623)
MSEdge::setSlope(SUMOReal arg=0.001420)
MSEdge::setSlope(SUMOReal arg=0.012190)
MSEdge::setSlope(SUMOReal arg=-0.000538)
MSEdge::setSlope(SUMOReal arg=-0.001399)
MSEdge::setSlope(SUMOReal arg=-0.049141)
MSEdge::setSlope(SUMOReal arg=0.002823)
MSEdge::setSlope(SUMOReal arg=-0.161837)
MSEdge::setSlope(SUMOReal arg=-0.001988)
MSEdge::setSlope(SUMOReal arg=0.002670)
MSEdge::setSlope(SUMOReal arg=-0.004546)
MSEdge::setSlope(SUMOReal arg=0.001893)
MSEdge::setSlope(SUMOReal arg=0.001982)
MSEdge::setSlope(SUMOReal arg=0.004496)
MSEdge::setSlope(SUMOReal arg=-0.009323)
MSEdge::setSlope(SUMOReal arg=-0.004290)
MSEdge::setSlope(SUMOReal arg=-0.060532)
MSEdge::setSlope(SUMOReal arg=0.008815)
MSEdge::setSlope(SUMOReal arg=-0.008380)
MSEdge::setSlope(SUMOReal arg=-0.005017)
MSEdge::setSlope(SUMOReal arg=-0.000980)
MSEdge::setSlope(SUMOReal arg=0.001165)
MSEdge::setSlope(SUMOReal arg=0.003512)
MSEdge::setSlope(SUMOReal arg=0.000926)
MSEdge::setSlope(SUMOReal arg=-0.002209)
MSEdge::setSlope(SUMOReal arg=-0.002154)
MSEdge::setSlope(SUMOReal arg=0.095859)
MSEdge::setSlope(SUMOReal arg=-0.002507)
MSEdge::setSlope(SUMOReal arg=-0.009199)
MSEdge::setSlope(SUMOReal arg=-0.002670)
MSEdge::setSlope(SUMOReal arg=0.010201)
MSEdge::setSlope(SUMOReal arg=-0.003826)
MSEdge::setSlope(SUMOReal arg=0.009361)
MSEdge::setSlope(SUMOReal arg=-0.001621)
MSEdge::setSlope(SUMOReal arg=0.001625)
MSEdge::setSlope(SUMOReal arg=-0.013004)
MSEdge::setSlope(SUMOReal arg=0.008453)
MSEdge::setSlope(SUMOReal arg=-0.010201)
MSEdge::setSlope(SUMOReal arg=0.000978)
MSEdge::setSlope(SUMOReal arg=-0.011418)
MSEdge::setSlope(SUMOReal arg=0.010967)
MSEdge::setSlope(SUMOReal arg=-0.001165)
MSEdge::setSlope(SUMOReal arg=0.001202)
MSEdge::setSlope(SUMOReal arg=-0.001204)
MSEdge::setSlope(SUMOReal arg=-0.003645)
MSEdge::setSlope(SUMOReal arg=0.002769)
MSEdge::setSlope(SUMOReal arg=0.003644)
MSEdge::setSlope(SUMOReal arg=0.004426)
MSEdge::setSlope(SUMOReal arg=0.016048)
MSEdge::setSlope(SUMOReal arg=-0.016048)
MSEdge::setSlope(SUMOReal arg=-0.000662)
MSEdge::setSlope(SUMOReal arg=0.099952)
MSEdge::setSlope(SUMOReal arg=-0.099952)
MSEdge::setSlope(SUMOReal arg=-0.002726)
MSEdge::setSlope(SUMOReal arg=-0.007745)
MSEdge::setSlope(SUMOReal arg=0.002427)
MSEdge::setSlope(SUMOReal arg=0.002381)
MSEdge::setSlope(SUMOReal arg=0.009109)
MSEdge::setSlope(SUMOReal arg=0.008330)
MSEdge::setSlope(SUMOReal arg=0.006047)
MSEdge::setSlope(SUMOReal arg=-0.009084)
MSEdge::setSlope(SUMOReal arg=-0.000217)
MSEdge::setSlope(SUMOReal arg=-0.001930)
MSEdge::setSlope(SUMOReal arg=-0.003576)
MSEdge::setSlope(SUMOReal arg=0.003576)
MSEdge::setSlope(SUMOReal arg=-0.006423)
MSEdge::setSlope(SUMOReal arg=0.002074)
MSEdge::setSlope(SUMOReal arg=-0.005821)
MSEdge::setSlope(SUMOReal arg=-0.014600)
MSEdge::setSlope(SUMOReal arg=0.013664)
MSEdge::setSlope(SUMOReal arg=-0.002288)
MSEdge::setSlope(SUMOReal arg=0.005511)
MSEdge::setSlope(SUMOReal arg=0.002539)
MSEdge::setSlope(SUMOReal arg=0.002583)
MSEdge::setSlope(SUMOReal arg=0.006145)
MSEdge::setSlope(SUMOReal arg=0.001930)
MSEdge::setSlope(SUMOReal arg=-0.003536)
MSEdge::setSlope(SUMOReal arg=-0.001153)
MSEdge::setSlope(SUMOReal arg=0.010585)
MSEdge::setSlope(SUMOReal arg=0.002903)
MSEdge::setSlope(SUMOReal arg=0.003731)
MSEdge::setSlope(SUMOReal arg=0.011363)
MSEdge::setSlope(SUMOReal arg=0.006765)
MSEdge::setSlope(SUMOReal arg=-0.000530)
MSEdge::setSlope(SUMOReal arg=-0.014226)
MSEdge::setSlope(SUMOReal arg=-0.002063)
MSEdge::setSlope(SUMOReal arg=0.015452)
MSEdge::setSlope(SUMOReal arg=-0.001015)
MSEdge::setSlope(SUMOReal arg=0.009125)
MSEdge::setSlope(SUMOReal arg=0.009359)
MSEdge::setSlope(SUMOReal arg=-0.005239)
MSEdge::setSlope(SUMOReal arg=0.002139)
MSEdge::setSlope(SUMOReal arg=0.005236)
MSEdge::setSlope(SUMOReal arg=0.000705)
MSEdge::setSlope(SUMOReal arg=-0.041427)
MSEdge::setSlope(SUMOReal arg=-0.001232)
MSEdge::setSlope(SUMOReal arg=-0.009136)
MSEdge::setSlope(SUMOReal arg=-0.003669)
MSEdge::setSlope(SUMOReal arg=-0.502302)
MSEdge::setSlope(SUMOReal arg=-0.003117)
MSEdge::setSlope(SUMOReal arg=-0.009581)
MSEdge::setSlope(SUMOReal arg=0.502302)
MSEdge::setSlope(SUMOReal arg=-0.002356)
MSEdge::setSlope(SUMOReal arg=-0.008416)
MSEdge::setSlope(SUMOReal arg=-0.005516)
MSEdge::setSlope(SUMOReal arg=-0.009486)
MSEdge::setSlope(SUMOReal arg=-0.002767)
MSEdge::setSlope(SUMOReal arg=-0.002583)
MSEdge::setSlope(SUMOReal arg=0.009401)
MSEdge::setSlope(SUMOReal arg=0.009675)
MSEdge::setSlope(SUMOReal arg=-0.007323)
MSEdge::setSlope(SUMOReal arg=-0.009660)
MSEdge::setSlope(SUMOReal arg=-0.009468)
MSEdge::setSlope(SUMOReal arg=-0.007255)
MSEdge::setSlope(SUMOReal arg=0.002091)
MSEdge::setSlope(SUMOReal arg=-0.007348)
MSEdge::setSlope(SUMOReal arg=0.007180)
MSEdge::setSlope(SUMOReal arg=-0.003106)
MSEdge::setSlope(SUMOReal arg=-0.002314)
MSEdge::setSlope(SUMOReal arg=0.002321)
MSEdge::setSlope(SUMOReal arg=0.006365)
MSEdge::setSlope(SUMOReal arg=0.003777)
MSEdge::setSlope(SUMOReal arg=-0.002146)
MSEdge::setSlope(SUMOReal arg=-0.012916)
MSEdge::setSlope(SUMOReal arg=-0.002762)
MSEdge::setSlope(SUMOReal arg=0.001030)
MSEdge::setSlope(SUMOReal arg=0.012916)
MSEdge::setSlope(SUMOReal arg=-0.008936)
MSEdge::setSlope(SUMOReal arg=0.007255)
MSEdge::setSlope(SUMOReal arg=0.008911)
MSEdge::setSlope(SUMOReal arg=-0.011363)
MSEdge::setSlope(SUMOReal arg=0.001152)
MSEdge::setSlope(SUMOReal arg=-0.010484)
MSEdge::setSlope(SUMOReal arg=0.006747)
MSEdge::setSlope(SUMOReal arg=0.000217)
MSEdge::setSlope(SUMOReal arg=-0.000733)
MSEdge::setSlope(SUMOReal arg=0.004375)
MSEdge::setSlope(SUMOReal arg=0.000708)
MSEdge::setSlope(SUMOReal arg=0.003378)
MSEdge::setSlope(SUMOReal arg=-0.003490)
MSEdge::setSlope(SUMOReal arg=-0.003984)
MSEdge::setSlope(SUMOReal arg=0.017970)
MSEdge::setSlope(SUMOReal arg=-0.006000)
MSEdge::setSlope(SUMOReal arg=-0.005897)
MSEdge::setSlope(SUMOReal arg=0.019399)
MSEdge::setSlope(SUMOReal arg=-0.007352)
MSEdge::setSlope(SUMOReal arg=-0.002675)
MSEdge::setSlope(SUMOReal arg=0.002675)
MSEdge::setSlope(SUMOReal arg=-0.006100)
MSEdge::setSlope(SUMOReal arg=0.000518)
MSEdge::setSlope(SUMOReal arg=0.000957)
MSEdge::setSlope(SUMOReal arg=0.004768)
MSEdge::setSlope(SUMOReal arg=0.003678)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.027715)
MSEdge::setSlope(SUMOReal arg=-0.003056)
MSEdge::setSlope(SUMOReal arg=-0.000822)
MSEdge::setSlope(SUMOReal arg=-0.013333)
MSEdge::setSlope(SUMOReal arg=0.006629)
MSEdge::setSlope(SUMOReal arg=-0.001496)
MSEdge::setSlope(SUMOReal arg=-0.002031)
MSEdge::setSlope(SUMOReal arg=0.000229)
MSEdge::setSlope(SUMOReal arg=0.003055)
MSEdge::setSlope(SUMOReal arg=-0.100922)
MSEdge::setSlope(SUMOReal arg=-0.001488)
MSEdge::setSlope(SUMOReal arg=0.002878)
MSEdge::setSlope(SUMOReal arg=-0.007084)
MSEdge::setSlope(SUMOReal arg=0.006439)
MSEdge::setSlope(SUMOReal arg=-0.002878)
MSEdge::setSlope(SUMOReal arg=-0.007460)
MSEdge::setSlope(SUMOReal arg=-0.009021)
MSEdge::setSlope(SUMOReal arg=-0.004417)
MSEdge::setSlope(SUMOReal arg=-0.007096)
MSEdge::setSlope(SUMOReal arg=-0.002210)
MSEdge::setSlope(SUMOReal arg=-0.001095)
MSEdge::setSlope(SUMOReal arg=0.009021)
MSEdge::setSlope(SUMOReal arg=-0.002204)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002688)
MSEdge::setSlope(SUMOReal arg=0.001488)
MSEdge::setSlope(SUMOReal arg=0.007084)
MSEdge::setSlope(SUMOReal arg=-0.000701)
MSEdge::setSlope(SUMOReal arg=-0.006284)
MSEdge::setSlope(SUMOReal arg=-0.004634)
MSEdge::setSlope(SUMOReal arg=-0.035181)
MSEdge::setSlope(SUMOReal arg=0.004634)
MSEdge::setSlope(SUMOReal arg=-0.010561)
MSEdge::setSlope(SUMOReal arg=-0.007269)
MSEdge::setSlope(SUMOReal arg=0.007327)
MSEdge::setSlope(SUMOReal arg=-0.002577)
MSEdge::setSlope(SUMOReal arg=0.001561)
MSEdge::setSlope(SUMOReal arg=-0.001561)
MSEdge::setSlope(SUMOReal arg=-0.011170)
MSEdge::setSlope(SUMOReal arg=-0.012383)
MSEdge::setSlope(SUMOReal arg=0.011328)
MSEdge::setSlope(SUMOReal arg=-0.004072)
MSEdge::setSlope(SUMOReal arg=-0.003559)
MSEdge::setSlope(SUMOReal arg=0.001203)
MSEdge::setSlope(SUMOReal arg=0.036233)
MSEdge::setSlope(SUMOReal arg=0.002764)
MSEdge::setSlope(SUMOReal arg=-0.002746)
MSEdge::setSlope(SUMOReal arg=-0.002830)
MSEdge::setSlope(SUMOReal arg=-0.001065)
MSEdge::setSlope(SUMOReal arg=-0.000970)
MSEdge::setSlope(SUMOReal arg=0.004249)
MSEdge::setSlope(SUMOReal arg=-0.001199)
MSEdge::setSlope(SUMOReal arg=-0.001822)
MSEdge::setSlope(SUMOReal arg=-0.005419)
MSEdge::setSlope(SUMOReal arg=0.001969)
MSEdge::setSlope(SUMOReal arg=0.005085)
MSEdge::setSlope(SUMOReal arg=0.006609)
MSEdge::setSlope(SUMOReal arg=0.012859)
MSEdge::setSlope(SUMOReal arg=0.002978)
MSEdge::setSlope(SUMOReal arg=0.002597)
MSEdge::setSlope(SUMOReal arg=-0.024038)
MSEdge::setSlope(SUMOReal arg=-0.009175)
MSEdge::setSlope(SUMOReal arg=0.005794)
MSEdge::setSlope(SUMOReal arg=-0.070281)
MSEdge::setSlope(SUMOReal arg=0.012808)
MSEdge::setSlope(SUMOReal arg=0.002993)
MSEdge::setSlope(SUMOReal arg=-0.011952)
MSEdge::setSlope(SUMOReal arg=0.019203)
MSEdge::setSlope(SUMOReal arg=-0.010743)
MSEdge::setSlope(SUMOReal arg=-0.000518)
MSEdge::setSlope(SUMOReal arg=0.010523)
MSEdge::setSlope(SUMOReal arg=-0.003693)
MSEdge::setSlope(SUMOReal arg=-0.011070)
MSEdge::setSlope(SUMOReal arg=0.015558)
MSEdge::setSlope(SUMOReal arg=0.008702)
MSEdge::setSlope(SUMOReal arg=-0.008697)
MSEdge::setSlope(SUMOReal arg=-0.003399)
MSEdge::setSlope(SUMOReal arg=0.121027)
MSEdge::setSlope(SUMOReal arg=0.003399)
MSEdge::setSlope(SUMOReal arg=-0.001969)
MSEdge::setSlope(SUMOReal arg=0.004752)
MSEdge::setSlope(SUMOReal arg=-0.004698)
MSEdge::setSlope(SUMOReal arg=-0.010788)
MSEdge::setSlope(SUMOReal arg=-0.001317)
MSEdge::setSlope(SUMOReal arg=0.000239)
MSEdge::setSlope(SUMOReal arg=0.010852)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002997)
MSEdge::setSlope(SUMOReal arg=0.008760)
MSEdge::setSlope(SUMOReal arg=-0.029313)
MSEdge::setSlope(SUMOReal arg=-0.019396)
MSEdge::setSlope(SUMOReal arg=-0.020164)
MSEdge::setSlope(SUMOReal arg=-0.009752)
MSEdge::setSlope(SUMOReal arg=-0.136352)
MSEdge::setSlope(SUMOReal arg=0.000706)
MSEdge::setSlope(SUMOReal arg=0.002285)
MSEdge::setSlope(SUMOReal arg=0.002214)
MSEdge::setSlope(SUMOReal arg=-0.012089)
MSEdge::setSlope(SUMOReal arg=0.070281)
MSEdge::setSlope(SUMOReal arg=0.002694)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002019)
MSEdge::setSlope(SUMOReal arg=0.006978)
MSEdge::setSlope(SUMOReal arg=0.000424)
MSEdge::setSlope(SUMOReal arg=-0.121027)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.001017)
MSEdge::setSlope(SUMOReal arg=0.136352)
MSEdge::setSlope(SUMOReal arg=0.001252)
MSEdge::setSlope(SUMOReal arg=-0.003678)
MSEdge::setSlope(SUMOReal arg=-0.000048)
MSEdge::setSlope(SUMOReal arg=-0.010558)
MSEdge::setSlope(SUMOReal arg=0.000048)
MSEdge::setSlope(SUMOReal arg=-0.012658)
MSEdge::setSlope(SUMOReal arg=0.005775)
MSEdge::setSlope(SUMOReal arg=-0.030486)
MSEdge::setSlope(SUMOReal arg=-0.015558)
MSEdge::setSlope(SUMOReal arg=0.001103)
MSEdge::setSlope(SUMOReal arg=-0.011927)
MSEdge::setSlope(SUMOReal arg=-0.000802)
MSEdge::setSlope(SUMOReal arg=0.011580)
MSEdge::setSlope(SUMOReal arg=0.010719)
MSEdge::setSlope(SUMOReal arg=0.003151)
MSEdge::setSlope(SUMOReal arg=-0.010810)
MSEdge::setSlope(SUMOReal arg=-0.011111)
MSEdge::setSlope(SUMOReal arg=0.006532)
MSEdge::setSlope(SUMOReal arg=-0.007257)
MSEdge::setSlope(SUMOReal arg=0.001381)
MSEdge::setSlope(SUMOReal arg=0.000804)
MSEdge::setSlope(SUMOReal arg=0.007719)
MSEdge::setSlope(SUMOReal arg=0.010574)
MSEdge::setSlope(SUMOReal arg=-0.007647)
MSEdge::setSlope(SUMOReal arg=0.004197)
MSEdge::setSlope(SUMOReal arg=-0.003925)
MSEdge::setSlope(SUMOReal arg=0.008413)
MSEdge::setSlope(SUMOReal arg=0.029656)
MSEdge::setSlope(SUMOReal arg=-0.002955)
MSEdge::setSlope(SUMOReal arg=0.005580)
MSEdge::setSlope(SUMOReal arg=-0.005794)
MSEdge::setSlope(SUMOReal arg=0.001199)
MSEdge::setSlope(SUMOReal arg=-0.004333)
MSEdge::setSlope(SUMOReal arg=0.004417)
MSEdge::setSlope(SUMOReal arg=-0.002247)
MSEdge::setSlope(SUMOReal arg=0.002198)
MSEdge::setSlope(SUMOReal arg=-0.010952)
MSEdge::setSlope(SUMOReal arg=0.031389)
MSEdge::setSlope(SUMOReal arg=-0.001475)
MSEdge::setSlope(SUMOReal arg=0.001571)
MSEdge::setSlope(SUMOReal arg=-0.001281)
MSEdge::setSlope(SUMOReal arg=-0.004462)
MSEdge::setSlope(SUMOReal arg=0.001281)
MSEdge::setSlope(SUMOReal arg=0.005217)
MSEdge::setSlope(SUMOReal arg=0.071174)
MSEdge::setSlope(SUMOReal arg=0.050186)
MSEdge::setSlope(SUMOReal arg=0.001004)
MSEdge::setSlope(SUMOReal arg=0.002461)
MSEdge::setSlope(SUMOReal arg=-0.001014)
MSEdge::setSlope(SUMOReal arg=0.001611)
MSEdge::setSlope(SUMOReal arg=-0.000233)
MSEdge::setSlope(SUMOReal arg=-0.001642)
MSEdge::setSlope(SUMOReal arg=-0.029337)
MSEdge::setSlope(SUMOReal arg=0.004078)
MSEdge::setSlope(SUMOReal arg=0.004741)
MSEdge::setSlope(SUMOReal arg=-0.069949)
MSEdge::setSlope(SUMOReal arg=-0.019927)
MSEdge::setSlope(SUMOReal arg=-0.011066)
MSEdge::setSlope(SUMOReal arg=0.003737)
MSEdge::setSlope(SUMOReal arg=0.019927)
MSEdge::setSlope(SUMOReal arg=0.001140)
MSEdge::setSlope(SUMOReal arg=-0.001140)
MSEdge::setSlope(SUMOReal arg=-0.005137)
MSEdge::setSlope(SUMOReal arg=0.006589)
MSEdge::setSlope(SUMOReal arg=0.000239)
MSEdge::setSlope(SUMOReal arg=0.002978)
MSEdge::setSlope(SUMOReal arg=0.005190)
MSEdge::setSlope(SUMOReal arg=-0.002128)
MSEdge::setSlope(SUMOReal arg=-0.000573)
MSEdge::setSlope(SUMOReal arg=-0.004426)
MSEdge::setSlope(SUMOReal arg=-0.001514)
MSEdge::setSlope(SUMOReal arg=-0.001386)
MSEdge::setSlope(SUMOReal arg=0.006534)
MSEdge::setSlope(SUMOReal arg=0.001386)
MSEdge::setSlope(SUMOReal arg=-0.050186)
MSEdge::setSlope(SUMOReal arg=-0.006464)
MSEdge::setSlope(SUMOReal arg=0.017624)
MSEdge::setSlope(SUMOReal arg=-0.006304)
MSEdge::setSlope(SUMOReal arg=0.006302)
MSEdge::setSlope(SUMOReal arg=0.003089)
MSEdge::setSlope(SUMOReal arg=0.000361)
MSEdge::setSlope(SUMOReal arg=0.001586)
MSEdge::setSlope(SUMOReal arg=-0.005190)
MSEdge::setSlope(SUMOReal arg=-0.000354)
MSEdge::setSlope(SUMOReal arg=-0.001107)
MSEdge::setSlope(SUMOReal arg=-0.002780)
MSEdge::setSlope(SUMOReal arg=0.011101)
MSEdge::setSlope(SUMOReal arg=0.132054)
MSEdge::setSlope(SUMOReal arg=-0.132054)
MSEdge::setSlope(SUMOReal arg=-0.001753)
MSEdge::setSlope(SUMOReal arg=-0.010863)
MSEdge::setSlope(SUMOReal arg=-0.001254)
MSEdge::setSlope(SUMOReal arg=0.003739)
MSEdge::setSlope(SUMOReal arg=-0.001661)
MSEdge::setSlope(SUMOReal arg=0.002789)
MSEdge::setSlope(SUMOReal arg=0.005537)
MSEdge::setSlope(SUMOReal arg=-0.002976)
MSEdge::setSlope(SUMOReal arg=-0.002431)
MSEdge::setSlope(SUMOReal arg=0.005482)
MSEdge::setSlope(SUMOReal arg=-0.005534)
MSEdge::setSlope(SUMOReal arg=-0.002041)
MSEdge::setSlope(SUMOReal arg=0.003916)
MSEdge::setSlope(SUMOReal arg=0.001404)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000597)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.018010)
MSEdge::setSlope(SUMOReal arg=0.009091)
MSEdge::setSlope(SUMOReal arg=-0.009091)
MSEdge::setSlope(SUMOReal arg=0.002740)
MSEdge::setSlope(SUMOReal arg=0.000989)
MSEdge::setSlope(SUMOReal arg=-0.002744)
MSEdge::setSlope(SUMOReal arg=-0.001297)
MSEdge::setSlope(SUMOReal arg=-0.003245)
MSEdge::setSlope(SUMOReal arg=0.005307)
MSEdge::setSlope(SUMOReal arg=-0.003500)
MSEdge::setSlope(SUMOReal arg=-0.001139)
MSEdge::setSlope(SUMOReal arg=0.001513)
MSEdge::setSlope(SUMOReal arg=-0.099669)
MSEdge::setSlope(SUMOReal arg=-0.006502)
MSEdge::setSlope(SUMOReal arg=0.001919)
MSEdge::setSlope(SUMOReal arg=0.002041)
MSEdge::setSlope(SUMOReal arg=-0.001919)
MSEdge::setSlope(SUMOReal arg=0.028564)
MSEdge::setSlope(SUMOReal arg=-0.049372)
MSEdge::setSlope(SUMOReal arg=-0.028564)
MSEdge::setSlope(SUMOReal arg=0.001231)
MSEdge::setSlope(SUMOReal arg=-0.005596)
MSEdge::setSlope(SUMOReal arg=-0.018010)
MSEdge::setSlope(SUMOReal arg=-0.007492)
MSEdge::setSlope(SUMOReal arg=-0.001658)
MSEdge::setSlope(SUMOReal arg=-0.012479)
MSEdge::setSlope(SUMOReal arg=0.000658)
MSEdge::setSlope(SUMOReal arg=0.011066)
MSEdge::setSlope(SUMOReal arg=0.004989)
MSEdge::setSlope(SUMOReal arg=-0.004816)
MSEdge::setSlope(SUMOReal arg=0.002751)
MSEdge::setSlope(SUMOReal arg=0.014861)
MSEdge::setSlope(SUMOReal arg=0.000603)
MSEdge::setSlope(SUMOReal arg=0.001093)
MSEdge::setSlope(SUMOReal arg=0.001549)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.007509)
MSEdge::setSlope(SUMOReal arg=0.019890)
MSEdge::setSlope(SUMOReal arg=0.006464)
MSEdge::setSlope(SUMOReal arg=0.000856)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000436)
MSEdge::setSlope(SUMOReal arg=0.001107)
MSEdge::setSlope(SUMOReal arg=-0.004098)
MSEdge::setSlope(SUMOReal arg=0.000805)
MSEdge::setSlope(SUMOReal arg=-0.042125)
MSEdge::setSlope(SUMOReal arg=-0.002014)
MSEdge::setSlope(SUMOReal arg=-0.003739)
MSEdge::setSlope(SUMOReal arg=-0.017590)
MSEdge::setSlope(SUMOReal arg=-0.028530)
MSEdge::setSlope(SUMOReal arg=-0.014441)
MSEdge::setSlope(SUMOReal arg=0.015590)
MSEdge::setSlope(SUMOReal arg=-0.029734)
MSEdge::setSlope(SUMOReal arg=0.015861)
MSEdge::setSlope(SUMOReal arg=-0.001495)
MSEdge::setSlope(SUMOReal arg=-0.001310)
MSEdge::setSlope(SUMOReal arg=0.001309)
MSEdge::setSlope(SUMOReal arg=0.002998)
MSEdge::setSlope(SUMOReal arg=0.006687)
MSEdge::setSlope(SUMOReal arg=-0.006687)
MSEdge::setSlope(SUMOReal arg=0.005310)
MSEdge::setSlope(SUMOReal arg=0.004041)
MSEdge::setSlope(SUMOReal arg=-0.002134)
MSEdge::setSlope(SUMOReal arg=-0.005310)
MSEdge::setSlope(SUMOReal arg=-0.006535)
MSEdge::setSlope(SUMOReal arg=-0.011471)
MSEdge::setSlope(SUMOReal arg=0.006535)
MSEdge::setSlope(SUMOReal arg=-0.003109)
MSEdge::setSlope(SUMOReal arg=0.003110)
MSEdge::setSlope(SUMOReal arg=0.004490)
MSEdge::setSlope(SUMOReal arg=0.007244)
MSEdge::setSlope(SUMOReal arg=-0.004041)
MSEdge::setSlope(SUMOReal arg=-0.028382)
MSEdge::setSlope(SUMOReal arg=0.002649)
MSEdge::setSlope(SUMOReal arg=0.005635)
MSEdge::setSlope(SUMOReal arg=-0.001573)
MSEdge::setSlope(SUMOReal arg=-0.006558)
MSEdge::setSlope(SUMOReal arg=-0.015509)
MSEdge::setSlope(SUMOReal arg=0.006558)
MSEdge::setSlope(SUMOReal arg=0.007534)
MSEdge::setSlope(SUMOReal arg=-0.006994)
MSEdge::setSlope(SUMOReal arg=0.006994)
MSEdge::setSlope(SUMOReal arg=-0.000230)
MSEdge::setSlope(SUMOReal arg=0.012307)
MSEdge::setSlope(SUMOReal arg=0.008849)
MSEdge::setSlope(SUMOReal arg=0.005065)
MSEdge::setSlope(SUMOReal arg=-0.004478)
MSEdge::setSlope(SUMOReal arg=0.004309)
MSEdge::setSlope(SUMOReal arg=-0.008183)
MSEdge::setSlope(SUMOReal arg=0.001578)
MSEdge::setSlope(SUMOReal arg=0.011028)
MSEdge::setSlope(SUMOReal arg=0.017865)
MSEdge::setSlope(SUMOReal arg=-0.002728)
MSEdge::setSlope(SUMOReal arg=-0.003882)
MSEdge::setSlope(SUMOReal arg=0.003883)
MSEdge::setSlope(SUMOReal arg=-0.000349)
MSEdge::setSlope(SUMOReal arg=0.001658)
MSEdge::setSlope(SUMOReal arg=0.007816)
MSEdge::setSlope(SUMOReal arg=0.002682)
MSEdge::setSlope(SUMOReal arg=0.004541)
MSEdge::setSlope(SUMOReal arg=0.003539)
MSEdge::setSlope(SUMOReal arg=-0.002682)
MSEdge::setSlope(SUMOReal arg=0.010085)
MSEdge::setSlope(SUMOReal arg=-0.012345)
MSEdge::setSlope(SUMOReal arg=0.013168)
MSEdge::setSlope(SUMOReal arg=0.009288)
MSEdge::setSlope(SUMOReal arg=-0.012793)
MSEdge::setSlope(SUMOReal arg=0.008754)
MSEdge::setSlope(SUMOReal arg=0.009963)
MSEdge::setSlope(SUMOReal arg=-0.009963)
MSEdge::setSlope(SUMOReal arg=0.000141)
MSEdge::setSlope(SUMOReal arg=-0.003431)
MSEdge::setSlope(SUMOReal arg=0.003431)
MSEdge::setSlope(SUMOReal arg=0.010620)
MSEdge::setSlope(SUMOReal arg=-0.003444)
MSEdge::setSlope(SUMOReal arg=-0.002394)
MSEdge::setSlope(SUMOReal arg=-0.012278)
MSEdge::setSlope(SUMOReal arg=0.012278)
MSEdge::setSlope(SUMOReal arg=0.014060)
MSEdge::setSlope(SUMOReal arg=-0.005156)
MSEdge::setSlope(SUMOReal arg=-0.000732)
MSEdge::setSlope(SUMOReal arg=-0.005492)
MSEdge::setSlope(SUMOReal arg=0.005492)
MSEdge::setSlope(SUMOReal arg=0.003444)
MSEdge::setSlope(SUMOReal arg=-0.001143)
MSEdge::setSlope(SUMOReal arg=0.004382)
MSEdge::setSlope(SUMOReal arg=0.001143)
MSEdge::setSlope(SUMOReal arg=0.078218)
MSEdge::setSlope(SUMOReal arg=0.011627)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.003109)
MSEdge::setSlope(SUMOReal arg=-0.000743)
MSEdge::setSlope(SUMOReal arg=0.001106)
MSEdge::setSlope(SUMOReal arg=0.032265)
MSEdge::setSlope(SUMOReal arg=0.004249)
MSEdge::setSlope(SUMOReal arg=-0.006483)
MSEdge::setSlope(SUMOReal arg=0.005019)
MSEdge::setSlope(SUMOReal arg=0.005139)
MSEdge::setSlope(SUMOReal arg=0.006432)
MSEdge::setSlope(SUMOReal arg=0.014682)
MSEdge::setSlope(SUMOReal arg=-0.014793)
MSEdge::setSlope(SUMOReal arg=-0.013500)
MSEdge::setSlope(SUMOReal arg=-0.014291)
MSEdge::setSlope(SUMOReal arg=0.014358)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.022709)
MSEdge::setSlope(SUMOReal arg=0.019888)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.006941)
MSEdge::setSlope(SUMOReal arg=0.003130)
MSEdge::setSlope(SUMOReal arg=-0.003115)
MSEdge::setSlope(SUMOReal arg=0.004390)
MSEdge::setSlope(SUMOReal arg=0.021756)
MSEdge::setSlope(SUMOReal arg=0.339293)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.066568)
MSEdge::setSlope(SUMOReal arg=-0.006395)
MSEdge::setSlope(SUMOReal arg=0.006395)
MSEdge::setSlope(SUMOReal arg=-0.020687)
MSEdge::setSlope(SUMOReal arg=-0.002002)
MSEdge::setSlope(SUMOReal arg=-0.004382)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.009836)
MSEdge::setSlope(SUMOReal arg=-0.006353)
MSEdge::setSlope(SUMOReal arg=0.002713)
MSEdge::setSlope(SUMOReal arg=-0.003294)
MSEdge::setSlope(SUMOReal arg=0.012127)
MSEdge::setSlope(SUMOReal arg=-0.002713)
MSEdge::setSlope(SUMOReal arg=0.014139)
MSEdge::setSlope(SUMOReal arg=0.002345)
MSEdge::setSlope(SUMOReal arg=0.000453)
MSEdge::setSlope(SUMOReal arg=0.008892)
MSEdge::setSlope(SUMOReal arg=-0.012903)
MSEdge::setSlope(SUMOReal arg=0.002400)
MSEdge::setSlope(SUMOReal arg=-0.020477)
MSEdge::setSlope(SUMOReal arg=0.008654)
MSEdge::setSlope(SUMOReal arg=-0.008793)
MSEdge::setSlope(SUMOReal arg=-0.032265)
MSEdge::setSlope(SUMOReal arg=-0.002405)
MSEdge::setSlope(SUMOReal arg=-0.011605)
MSEdge::setSlope(SUMOReal arg=-0.004249)
MSEdge::setSlope(SUMOReal arg=0.011605)
MSEdge::setSlope(SUMOReal arg=-0.018988)
MSEdge::setSlope(SUMOReal arg=0.018988)
MSEdge::setSlope(SUMOReal arg=-0.000997)
MSEdge::setSlope(SUMOReal arg=-0.003002)
MSEdge::setSlope(SUMOReal arg=0.002986)
MSEdge::setSlope(SUMOReal arg=-0.005859)
MSEdge::setSlope(SUMOReal arg=0.000157)
MSEdge::setSlope(SUMOReal arg=0.002399)
MSEdge::setSlope(SUMOReal arg=-0.008679)
MSEdge::setSlope(SUMOReal arg=-0.014139)
MSEdge::setSlope(SUMOReal arg=-0.017432)
MSEdge::setSlope(SUMOReal arg=0.009344)
MSEdge::setSlope(SUMOReal arg=-0.075428)
MSEdge::setSlope(SUMOReal arg=-0.004373)
MSEdge::setSlope(SUMOReal arg=-0.001999)
MSEdge::setSlope(SUMOReal arg=-0.004904)
MSEdge::setSlope(SUMOReal arg=0.030270)
MSEdge::setSlope(SUMOReal arg=-0.000372)
MSEdge::setSlope(SUMOReal arg=0.037253)
MSEdge::setSlope(SUMOReal arg=0.011545)
MSEdge::setSlope(SUMOReal arg=-0.011545)
MSEdge::setSlope(SUMOReal arg=0.014679)
MSEdge::setSlope(SUMOReal arg=0.007330)
MSEdge::setSlope(SUMOReal arg=-0.005065)
MSEdge::setSlope(SUMOReal arg=-0.002902)
MSEdge::setSlope(SUMOReal arg=-0.004541)
MSEdge::setSlope(SUMOReal arg=0.000124)
MSEdge::setSlope(SUMOReal arg=-0.008849)
MSEdge::setSlope(SUMOReal arg=0.005919)
MSEdge::setSlope(SUMOReal arg=0.003790)
MSEdge::setSlope(SUMOReal arg=0.007189)
MSEdge::setSlope(SUMOReal arg=0.014685)
MSEdge::setSlope(SUMOReal arg=-0.007189)
MSEdge::setSlope(SUMOReal arg=0.001613)
MSEdge::setSlope(SUMOReal arg=-0.092388)
MSEdge::setSlope(SUMOReal arg=-0.001613)
MSEdge::setSlope(SUMOReal arg=-0.008110)
MSEdge::setSlope(SUMOReal arg=-0.037606)
MSEdge::setSlope(SUMOReal arg=-0.000818)
MSEdge::setSlope(SUMOReal arg=-0.011489)
MSEdge::setSlope(SUMOReal arg=0.010983)
MSEdge::setSlope(SUMOReal arg=0.013334)
MSEdge::setSlope(SUMOReal arg=0.001856)
MSEdge::setSlope(SUMOReal arg=0.001550)
MSEdge::setSlope(SUMOReal arg=-0.003630)
MSEdge::setSlope(SUMOReal arg=-0.006808)
MSEdge::setSlope(SUMOReal arg=0.006808)
MSEdge::setSlope(SUMOReal arg=0.006432)
MSEdge::setSlope(SUMOReal arg=0.011496)
MSEdge::setSlope(SUMOReal arg=-0.006432)
MSEdge::setSlope(SUMOReal arg=0.004051)
MSEdge::setSlope(SUMOReal arg=0.000997)
MSEdge::setSlope(SUMOReal arg=0.014749)
MSEdge::setSlope(SUMOReal arg=-0.002384)
MSEdge::setSlope(SUMOReal arg=-0.001379)
MSEdge::setSlope(SUMOReal arg=-0.014607)
MSEdge::setSlope(SUMOReal arg=0.001475)
MSEdge::setSlope(SUMOReal arg=-0.015840)
MSEdge::setSlope(SUMOReal arg=0.002257)
MSEdge::setSlope(SUMOReal arg=0.000349)
MSEdge::setSlope(SUMOReal arg=0.001495)
MSEdge::setSlope(SUMOReal arg=-0.003539)
MSEdge::setSlope(SUMOReal arg=-0.014438)
MSEdge::setSlope(SUMOReal arg=0.065398)
MSEdge::setSlope(SUMOReal arg=0.028105)
MSEdge::setSlope(SUMOReal arg=0.038722)
MSEdge::setSlope(SUMOReal arg=-0.028105)
MSEdge::setSlope(SUMOReal arg=-0.036643)
MSEdge::setSlope(SUMOReal arg=0.010344)
MSEdge::setSlope(SUMOReal arg=0.008110)
MSEdge::setSlope(SUMOReal arg=0.036643)
MSEdge::setSlope(SUMOReal arg=-0.019216)
MSEdge::setSlope(SUMOReal arg=0.019216)
MSEdge::setSlope(SUMOReal arg=0.121477)
MSEdge::setSlope(SUMOReal arg=0.007555)
MSEdge::setSlope(SUMOReal arg=-0.008095)
MSEdge::setSlope(SUMOReal arg=0.035220)
MSEdge::setSlope(SUMOReal arg=0.001641)
MSEdge::setSlope(SUMOReal arg=-0.010344)
MSEdge::setSlope(SUMOReal arg=-0.036668)
MSEdge::setSlope(SUMOReal arg=0.022033)
MSEdge::setSlope(SUMOReal arg=0.036668)
MSEdge::setSlope(SUMOReal arg=0.037606)
MSEdge::setSlope(SUMOReal arg=0.065349)
MSEdge::setSlope(SUMOReal arg=0.012039)
MSEdge::setSlope(SUMOReal arg=-0.065349)
MSEdge::setSlope(SUMOReal arg=-0.152649)
MSEdge::setSlope(SUMOReal arg=-0.045286)
MSEdge::setSlope(SUMOReal arg=-0.001559)
MSEdge::setSlope(SUMOReal arg=-0.013463)
MSEdge::setSlope(SUMOReal arg=0.014656)
MSEdge::setSlope(SUMOReal arg=0.013463)
MSEdge::setSlope(SUMOReal arg=-0.058100)
MSEdge::setSlope(SUMOReal arg=0.005163)
MSEdge::setSlope(SUMOReal arg=0.010627)
MSEdge::setSlope(SUMOReal arg=-0.005163)
MSEdge::setSlope(SUMOReal arg=0.008183)
MSEdge::setSlope(SUMOReal arg=0.016402)
MSEdge::setSlope(SUMOReal arg=0.152649)
MSEdge::setSlope(SUMOReal arg=0.092388)
MSEdge::setSlope(SUMOReal arg=0.015872)
MSEdge::setSlope(SUMOReal arg=-0.002252)
MSEdge::setSlope(SUMOReal arg=0.010191)
MSEdge::setSlope(SUMOReal arg=-0.013897)
MSEdge::setSlope(SUMOReal arg=-0.010191)
MSEdge::setSlope(SUMOReal arg=0.019228)
MSEdge::setSlope(SUMOReal arg=-0.017468)
MSEdge::setSlope(SUMOReal arg=-0.019228)
MSEdge::setSlope(SUMOReal arg=-0.073455)
MSEdge::setSlope(SUMOReal arg=-0.012317)
MSEdge::setSlope(SUMOReal arg=0.073455)
MSEdge::setSlope(SUMOReal arg=0.033737)
MSEdge::setSlope(SUMOReal arg=-0.002279)
MSEdge::setSlope(SUMOReal arg=-0.033737)
MSEdge::setSlope(SUMOReal arg=-0.008018)
MSEdge::setSlope(SUMOReal arg=-0.006207)
MSEdge::setSlope(SUMOReal arg=0.008018)
MSEdge::setSlope(SUMOReal arg=-0.003429)
MSEdge::setSlope(SUMOReal arg=0.004275)
MSEdge::setSlope(SUMOReal arg=-0.001641)
MSEdge::setSlope(SUMOReal arg=0.003429)
MSEdge::setSlope(SUMOReal arg=-0.056064)
MSEdge::setSlope(SUMOReal arg=-0.012698)
MSEdge::setSlope(SUMOReal arg=0.045286)
MSEdge::setSlope(SUMOReal arg=0.023162)
MSEdge::setSlope(SUMOReal arg=-0.012039)
MSEdge::setSlope(SUMOReal arg=-0.022609)
MSEdge::setSlope(SUMOReal arg=0.046750)
MSEdge::setSlope(SUMOReal arg=-0.046750)
MSEdge::setSlope(SUMOReal arg=-0.022033)
MSEdge::setSlope(SUMOReal arg=-0.065398)
MSEdge::setSlope(SUMOReal arg=-0.038722)
MSEdge::setSlope(SUMOReal arg=-0.012027)
MSEdge::setSlope(SUMOReal arg=0.010350)
MSEdge::setSlope(SUMOReal arg=-0.009282)
MSEdge::setSlope(SUMOReal arg=-0.035464)
MSEdge::setSlope(SUMOReal arg=-0.020548)
MSEdge::setSlope(SUMOReal arg=0.030082)
MSEdge::setSlope(SUMOReal arg=0.021588)
MSEdge::setSlope(SUMOReal arg=-0.006544)
MSEdge::setSlope(SUMOReal arg=-0.021588)
MSEdge::setSlope(SUMOReal arg=0.002252)
MSEdge::setSlope(SUMOReal arg=-0.011031)
MSEdge::setSlope(SUMOReal arg=0.017468)
MSEdge::setSlope(SUMOReal arg=-0.121477)
MSEdge::setSlope(SUMOReal arg=0.038159)
MSEdge::setSlope(SUMOReal arg=0.001381)
MSEdge::setSlope(SUMOReal arg=-0.016103)
MSEdge::setSlope(SUMOReal arg=0.066957)
MSEdge::setSlope(SUMOReal arg=0.001921)
MSEdge::setSlope(SUMOReal arg=-0.004670)
MSEdge::setSlope(SUMOReal arg=-0.005048)
MSEdge::setSlope(SUMOReal arg=0.003508)
MSEdge::setSlope(SUMOReal arg=0.023805)
MSEdge::setSlope(SUMOReal arg=-0.001628)
MSEdge::setSlope(SUMOReal arg=-0.002415)
MSEdge::setSlope(SUMOReal arg=-0.006135)
MSEdge::setSlope(SUMOReal arg=0.006135)
MSEdge::setSlope(SUMOReal arg=-0.002904)
MSEdge::setSlope(SUMOReal arg=0.000895)
MSEdge::setSlope(SUMOReal arg=-0.000895)
MSEdge::setSlope(SUMOReal arg=-0.003540)
MSEdge::setSlope(SUMOReal arg=0.022219)
MSEdge::setSlope(SUMOReal arg=-0.002257)
MSEdge::setSlope(SUMOReal arg=0.001195)
MSEdge::setSlope(SUMOReal arg=0.003064)
MSEdge::setSlope(SUMOReal arg=-0.003146)
MSEdge::setSlope(SUMOReal arg=-0.007143)
MSEdge::setSlope(SUMOReal arg=-0.000662)
MSEdge::setSlope(SUMOReal arg=0.002943)
MSEdge::setSlope(SUMOReal arg=-0.001921)
MSEdge::setSlope(SUMOReal arg=0.000547)
MSEdge::setSlope(SUMOReal arg=0.004669)
MSEdge::setSlope(SUMOReal arg=0.139900)
MSEdge::setSlope(SUMOReal arg=-0.011187)
MSEdge::setSlope(SUMOReal arg=0.004059)
MSEdge::setSlope(SUMOReal arg=0.001085)
MSEdge::setSlope(SUMOReal arg=0.021358)
MSEdge::setSlope(SUMOReal arg=0.001552)
MSEdge::setSlope(SUMOReal arg=-0.021358)
MSEdge::setSlope(SUMOReal arg=-0.002633)
MSEdge::setSlope(SUMOReal arg=0.020515)
MSEdge::setSlope(SUMOReal arg=-0.020515)
MSEdge::setSlope(SUMOReal arg=-0.009887)
MSEdge::setSlope(SUMOReal arg=0.010328)
MSEdge::setSlope(SUMOReal arg=-0.002282)
MSEdge::setSlope(SUMOReal arg=0.008300)
MSEdge::setSlope(SUMOReal arg=-0.006644)
MSEdge::setSlope(SUMOReal arg=-0.011029)
MSEdge::setSlope(SUMOReal arg=-0.108835)
MSEdge::setSlope(SUMOReal arg=-0.008813)
MSEdge::setSlope(SUMOReal arg=0.116094)
MSEdge::setSlope(SUMOReal arg=-0.040794)
MSEdge::setSlope(SUMOReal arg=0.004720)
MSEdge::setSlope(SUMOReal arg=0.003093)
MSEdge::setSlope(SUMOReal arg=0.006353)
MSEdge::setSlope(SUMOReal arg=0.000060)
MSEdge::setSlope(SUMOReal arg=-0.001106)
MSEdge::setSlope(SUMOReal arg=-0.011434)
MSEdge::setSlope(SUMOReal arg=0.011434)
MSEdge::setSlope(SUMOReal arg=0.001593)
MSEdge::setSlope(SUMOReal arg=-0.001581)
MSEdge::setSlope(SUMOReal arg=-0.003547)
MSEdge::setSlope(SUMOReal arg=0.014927)
MSEdge::setSlope(SUMOReal arg=0.111991)
MSEdge::setSlope(SUMOReal arg=-0.016758)
MSEdge::setSlope(SUMOReal arg=-0.056310)
MSEdge::setSlope(SUMOReal arg=0.016758)
MSEdge::setSlope(SUMOReal arg=-0.004783)
MSEdge::setSlope(SUMOReal arg=-0.033384)
MSEdge::setSlope(SUMOReal arg=0.010230)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002846)
MSEdge::setSlope(SUMOReal arg=0.011019)
MSEdge::setSlope(SUMOReal arg=0.002846)
MSEdge::setSlope(SUMOReal arg=0.008130)
MSEdge::setSlope(SUMOReal arg=-0.002718)
MSEdge::setSlope(SUMOReal arg=-0.002160)
MSEdge::setSlope(SUMOReal arg=-0.005694)
MSEdge::setSlope(SUMOReal arg=0.002208)
MSEdge::setSlope(SUMOReal arg=0.023507)
MSEdge::setSlope(SUMOReal arg=-0.044151)
MSEdge::setSlope(SUMOReal arg=-0.000722)
MSEdge::setSlope(SUMOReal arg=0.032223)
MSEdge::setSlope(SUMOReal arg=-0.032223)
MSEdge::setSlope(SUMOReal arg=-0.021104)
MSEdge::setSlope(SUMOReal arg=-0.006674)
MSEdge::setSlope(SUMOReal arg=0.021104)
MSEdge::setSlope(SUMOReal arg=0.011450)
MSEdge::setSlope(SUMOReal arg=0.001024)
MSEdge::setSlope(SUMOReal arg=0.075877)
MSEdge::setSlope(SUMOReal arg=-0.001017)
MSEdge::setSlope(SUMOReal arg=-0.038039)
MSEdge::setSlope(SUMOReal arg=-0.001552)
MSEdge::setSlope(SUMOReal arg=-0.002438)
MSEdge::setSlope(SUMOReal arg=-0.001504)
MSEdge::setSlope(SUMOReal arg=-0.010388)
MSEdge::setSlope(SUMOReal arg=0.094287)
MSEdge::setSlope(SUMOReal arg=0.012706)
MSEdge::setSlope(SUMOReal arg=-0.094287)
MSEdge::setSlope(SUMOReal arg=-0.000800)
MSEdge::setSlope(SUMOReal arg=-0.002410)
MSEdge::setSlope(SUMOReal arg=0.000853)
MSEdge::setSlope(SUMOReal arg=0.000573)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000430)
MSEdge::setSlope(SUMOReal arg=0.017411)
MSEdge::setSlope(SUMOReal arg=-0.017411)
MSEdge::setSlope(SUMOReal arg=-0.002443)
MSEdge::setSlope(SUMOReal arg=-0.051546)
MSEdge::setSlope(SUMOReal arg=0.051546)
MSEdge::setSlope(SUMOReal arg=0.004623)
MSEdge::setSlope(SUMOReal arg=0.351445)
MSEdge::setSlope(SUMOReal arg=-0.351445)
MSEdge::setSlope(SUMOReal arg=0.006671)
MSEdge::setSlope(SUMOReal arg=0.006892)
MSEdge::setSlope(SUMOReal arg=-0.050976)
MSEdge::setSlope(SUMOReal arg=-0.004961)
MSEdge::setSlope(SUMOReal arg=-0.007222)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002443)
MSEdge::setSlope(SUMOReal arg=0.002525)
MSEdge::setSlope(SUMOReal arg=-0.012974)
MSEdge::setSlope(SUMOReal arg=0.042488)
MSEdge::setSlope(SUMOReal arg=-0.016857)
MSEdge::setSlope(SUMOReal arg=-0.042488)
MSEdge::setSlope(SUMOReal arg=-0.002525)
MSEdge::setSlope(SUMOReal arg=-0.004623)
MSEdge::setSlope(SUMOReal arg=0.004651)
MSEdge::setSlope(SUMOReal arg=0.016857)
MSEdge::setSlope(SUMOReal arg=0.123638)
MSEdge::setSlope(SUMOReal arg=0.010388)
MSEdge::setSlope(SUMOReal arg=-0.123638)
MSEdge::setSlope(SUMOReal arg=0.008894)
MSEdge::setSlope(SUMOReal arg=0.000430)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002408)
MSEdge::setSlope(SUMOReal arg=0.024995)
MSEdge::setSlope(SUMOReal arg=0.002408)
MSEdge::setSlope(SUMOReal arg=0.002283)
MSEdge::setSlope(SUMOReal arg=0.022068)
MSEdge::setSlope(SUMOReal arg=-0.001000)
MSEdge::setSlope(SUMOReal arg=0.011695)
MSEdge::setSlope(SUMOReal arg=0.010918)
MSEdge::setSlope(SUMOReal arg=-0.011695)
MSEdge::setSlope(SUMOReal arg=0.043757)
MSEdge::setSlope(SUMOReal arg=0.003762)
MSEdge::setSlope(SUMOReal arg=-0.043757)
MSEdge::setSlope(SUMOReal arg=0.009642)
MSEdge::setSlope(SUMOReal arg=0.013319)
MSEdge::setSlope(SUMOReal arg=-0.009642)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.034436)
MSEdge::setSlope(SUMOReal arg=0.012974)
MSEdge::setSlope(SUMOReal arg=-0.012153)
MSEdge::setSlope(SUMOReal arg=0.080863)
MSEdge::setSlope(SUMOReal arg=0.001960)
MSEdge::setSlope(SUMOReal arg=-0.008389)
MSEdge::setSlope(SUMOReal arg=0.001363)
MSEdge::setSlope(SUMOReal arg=0.003383)
MSEdge::setSlope(SUMOReal arg=-0.001363)
MSEdge::setSlope(SUMOReal arg=0.045649)
MSEdge::setSlope(SUMOReal arg=0.026071)
MSEdge::setSlope(SUMOReal arg=0.015546)
MSEdge::setSlope(SUMOReal arg=0.002408)
MSEdge::setSlope(SUMOReal arg=0.002410)
MSEdge::setSlope(SUMOReal arg=-0.000573)
MSEdge::setSlope(SUMOReal arg=-0.008894)
MSEdge::setSlope(SUMOReal arg=0.002740)
MSEdge::setSlope(SUMOReal arg=-0.075877)
MSEdge::setSlope(SUMOReal arg=0.002438)
MSEdge::setSlope(SUMOReal arg=0.038039)
MSEdge::setSlope(SUMOReal arg=0.011186)
MSEdge::setSlope(SUMOReal arg=0.001504)
MSEdge::setSlope(SUMOReal arg=0.002633)
MSEdge::setSlope(SUMOReal arg=-0.001885)
MSEdge::setSlope(SUMOReal arg=-0.004651)
MSEdge::setSlope(SUMOReal arg=0.105166)
MSEdge::setSlope(SUMOReal arg=-0.006041)
MSEdge::setSlope(SUMOReal arg=-0.011186)
MSEdge::setSlope(SUMOReal arg=-0.006478)
MSEdge::setSlope(SUMOReal arg=-0.000180)
MSEdge::setSlope(SUMOReal arg=0.000621)
MSEdge::setSlope(SUMOReal arg=-0.881872)
MSEdge::setSlope(SUMOReal arg=0.010689)
MSEdge::setSlope(SUMOReal arg=0.881872)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.004178)
MSEdge::setSlope(SUMOReal arg=-0.006773)
MSEdge::setSlope(SUMOReal arg=0.099669)
MSEdge::setSlope(SUMOReal arg=0.002619)
MSEdge::setSlope(SUMOReal arg=0.001969)
MSEdge::setSlope(SUMOReal arg=0.002954)
MSEdge::setSlope(SUMOReal arg=0.007222)
MSEdge::setSlope(SUMOReal arg=-0.002960)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.021634)
MSEdge::setSlope(SUMOReal arg=0.001885)
MSEdge::setSlope(SUMOReal arg=0.009887)
MSEdge::setSlope(SUMOReal arg=-0.053982)
MSEdge::setSlope(SUMOReal arg=0.032330)
MSEdge::setSlope(SUMOReal arg=-0.028711)
MSEdge::setSlope(SUMOReal arg=-0.042240)
MSEdge::setSlope(SUMOReal arg=-0.019997)
MSEdge::setSlope(SUMOReal arg=0.038867)
MSEdge::setSlope(SUMOReal arg=-0.037482)
MSEdge::setSlope(SUMOReal arg=0.003508)
MSEdge::setSlope(SUMOReal arg=0.032040)
MSEdge::setSlope(SUMOReal arg=0.001334)
MSEdge::setSlope(SUMOReal arg=0.001459)
MSEdge::setSlope(SUMOReal arg=-0.001334)
MSEdge::setSlope(SUMOReal arg=-0.001459)
MSEdge::setSlope(SUMOReal arg=-0.002295)
MSEdge::setSlope(SUMOReal arg=0.218147)
MSEdge::setSlope(SUMOReal arg=0.007529)
MSEdge::setSlope(SUMOReal arg=-0.134616)
MSEdge::setSlope(SUMOReal arg=-0.209620)
MSEdge::setSlope(SUMOReal arg=-0.111463)
MSEdge::setSlope(SUMOReal arg=-0.008790)
MSEdge::setSlope(SUMOReal arg=-0.007207)
MSEdge::setSlope(SUMOReal arg=-0.009055)
MSEdge::setSlope(SUMOReal arg=0.054499)
MSEdge::setSlope(SUMOReal arg=-0.000639)
MSEdge::setSlope(SUMOReal arg=-0.005797)
MSEdge::setSlope(SUMOReal arg=-0.017774)
MSEdge::setSlope(SUMOReal arg=0.002549)
MSEdge::setSlope(SUMOReal arg=-0.029473)
MSEdge::setSlope(SUMOReal arg=-0.009677)
MSEdge::setSlope(SUMOReal arg=-0.014160)
MSEdge::setSlope(SUMOReal arg=-0.054499)
MSEdge::setSlope(SUMOReal arg=-0.001067)
MSEdge::setSlope(SUMOReal arg=0.029473)
MSEdge::setSlope(SUMOReal arg=0.003439)
MSEdge::setSlope(SUMOReal arg=-0.053560)
MSEdge::setSlope(SUMOReal arg=-0.009607)
MSEdge::setSlope(SUMOReal arg=0.005538)
MSEdge::setSlope(SUMOReal arg=-0.000243)
MSEdge::setSlope(SUMOReal arg=-0.034150)
MSEdge::setSlope(SUMOReal arg=0.026679)
MSEdge::setSlope(SUMOReal arg=0.010096)
MSEdge::setSlope(SUMOReal arg=0.014059)
MSEdge::setSlope(SUMOReal arg=-0.011124)
MSEdge::setSlope(SUMOReal arg=-0.009309)
MSEdge::setSlope(SUMOReal arg=0.002448)
MSEdge::setSlope(SUMOReal arg=-0.013347)
MSEdge::setSlope(SUMOReal arg=-0.027098)
MSEdge::setSlope(SUMOReal arg=-0.002437)
MSEdge::setSlope(SUMOReal arg=0.000567)
MSEdge::setSlope(SUMOReal arg=0.014312)
MSEdge::setSlope(SUMOReal arg=0.002697)
MSEdge::setSlope(SUMOReal arg=0.012641)
MSEdge::setSlope(SUMOReal arg=0.045051)
MSEdge::setSlope(SUMOReal arg=-0.001261)
MSEdge::setSlope(SUMOReal arg=0.005745)
MSEdge::setSlope(SUMOReal arg=-0.002603)
MSEdge::setSlope(SUMOReal arg=-0.004727)
MSEdge::setSlope(SUMOReal arg=0.001757)
MSEdge::setSlope(SUMOReal arg=0.004717)
MSEdge::setSlope(SUMOReal arg=0.006355)
MSEdge::setSlope(SUMOReal arg=-0.006355)
MSEdge::setSlope(SUMOReal arg=-0.012606)
MSEdge::setSlope(SUMOReal arg=-0.001650)
MSEdge::setSlope(SUMOReal arg=0.014441)
MSEdge::setSlope(SUMOReal arg=0.012606)
MSEdge::setSlope(SUMOReal arg=0.088656)
MSEdge::setSlope(SUMOReal arg=-0.088656)
MSEdge::setSlope(SUMOReal arg=-0.002434)
MSEdge::setSlope(SUMOReal arg=0.073869)
MSEdge::setSlope(SUMOReal arg=0.000514)
MSEdge::setSlope(SUMOReal arg=-0.005635)
MSEdge::setSlope(SUMOReal arg=-0.073869)
MSEdge::setSlope(SUMOReal arg=-0.012446)
MSEdge::setSlope(SUMOReal arg=0.006367)
MSEdge::setSlope(SUMOReal arg=0.012446)
MSEdge::setSlope(SUMOReal arg=0.005865)
MSEdge::setSlope(SUMOReal arg=-0.026134)
MSEdge::setSlope(SUMOReal arg=-0.006405)
MSEdge::setSlope(SUMOReal arg=-0.000730)
MSEdge::setSlope(SUMOReal arg=0.006330)
MSEdge::setSlope(SUMOReal arg=-0.003061)
MSEdge::setSlope(SUMOReal arg=0.021997)
MSEdge::setSlope(SUMOReal arg=0.003016)
MSEdge::setSlope(SUMOReal arg=-0.041003)
MSEdge::setSlope(SUMOReal arg=0.041003)
MSEdge::setSlope(SUMOReal arg=0.004976)
MSEdge::setSlope(SUMOReal arg=0.202322)
MSEdge::setSlope(SUMOReal arg=0.003010)
MSEdge::setSlope(SUMOReal arg=0.026146)
MSEdge::setSlope(SUMOReal arg=0.035293)
MSEdge::setSlope(SUMOReal arg=0.014636)
MSEdge::setSlope(SUMOReal arg=0.013679)
MSEdge::setSlope(SUMOReal arg=0.048130)
MSEdge::setSlope(SUMOReal arg=0.011190)
MSEdge::setSlope(SUMOReal arg=-0.012330)
MSEdge::setSlope(SUMOReal arg=0.005961)
MSEdge::setSlope(SUMOReal arg=-0.000624)
MSEdge::setSlope(SUMOReal arg=-0.006027)
MSEdge::setSlope(SUMOReal arg=0.000666)
MSEdge::setSlope(SUMOReal arg=-0.003876)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.004379)
MSEdge::setSlope(SUMOReal arg=-0.003837)
MSEdge::setSlope(SUMOReal arg=-0.058243)
MSEdge::setSlope(SUMOReal arg=-0.013856)
MSEdge::setSlope(SUMOReal arg=-0.027185)
MSEdge::setSlope(SUMOReal arg=-0.004818)
MSEdge::setSlope(SUMOReal arg=-0.013781)
MSEdge::setSlope(SUMOReal arg=0.007545)
MSEdge::setSlope(SUMOReal arg=-0.124355)
MSEdge::setSlope(SUMOReal arg=0.010204)
MSEdge::setSlope(SUMOReal arg=0.008522)
MSEdge::setSlope(SUMOReal arg=-0.016925)
MSEdge::setSlope(SUMOReal arg=-0.006664)
MSEdge::setSlope(SUMOReal arg=-0.008658)
MSEdge::setSlope(SUMOReal arg=-0.007906)
MSEdge::setSlope(SUMOReal arg=-0.017019)
MSEdge::setSlope(SUMOReal arg=0.000066)
MSEdge::setSlope(SUMOReal arg=0.005319)
MSEdge::setSlope(SUMOReal arg=0.061461)
MSEdge::setSlope(SUMOReal arg=-0.011536)
MSEdge::setSlope(SUMOReal arg=0.056343)
MSEdge::setSlope(SUMOReal arg=0.011536)
MSEdge::setSlope(SUMOReal arg=0.016128)
MSEdge::setSlope(SUMOReal arg=0.005181)
MSEdge::setSlope(SUMOReal arg=0.019106)
MSEdge::setSlope(SUMOReal arg=-0.005181)
MSEdge::setSlope(SUMOReal arg=0.025682)
MSEdge::setSlope(SUMOReal arg=0.002584)
MSEdge::setSlope(SUMOReal arg=0.010093)
MSEdge::setSlope(SUMOReal arg=-0.002584)
MSEdge::setSlope(SUMOReal arg=0.018976)
MSEdge::setSlope(SUMOReal arg=0.011013)
MSEdge::setSlope(SUMOReal arg=0.001969)
MSEdge::setSlope(SUMOReal arg=0.007015)
MSEdge::setSlope(SUMOReal arg=-0.022775)
MSEdge::setSlope(SUMOReal arg=-0.007015)
MSEdge::setSlope(SUMOReal arg=-0.011494)
MSEdge::setSlope(SUMOReal arg=-0.001629)
MSEdge::setSlope(SUMOReal arg=0.022580)
MSEdge::setSlope(SUMOReal arg=-0.013462)
MSEdge::setSlope(SUMOReal arg=-0.004418)
MSEdge::setSlope(SUMOReal arg=-0.025682)
MSEdge::setSlope(SUMOReal arg=0.004418)
MSEdge::setSlope(SUMOReal arg=-0.013665)
MSEdge::setSlope(SUMOReal arg=-0.018976)
MSEdge::setSlope(SUMOReal arg=0.011494)
MSEdge::setSlope(SUMOReal arg=-0.001969)
MSEdge::setSlope(SUMOReal arg=0.001662)
MSEdge::setSlope(SUMOReal arg=-0.001662)
MSEdge::setSlope(SUMOReal arg=-0.010093)
MSEdge::setSlope(SUMOReal arg=0.002035)
MSEdge::setSlope(SUMOReal arg=-0.002035)
MSEdge::setSlope(SUMOReal arg=-0.019106)
MSEdge::setSlope(SUMOReal arg=-0.002842)
MSEdge::setSlope(SUMOReal arg=0.002404)
MSEdge::setSlope(SUMOReal arg=-0.061461)
MSEdge::setSlope(SUMOReal arg=0.003223)
MSEdge::setSlope(SUMOReal arg=-0.056343)
MSEdge::setSlope(SUMOReal arg=-0.029260)
MSEdge::setSlope(SUMOReal arg=-0.011386)
MSEdge::setSlope(SUMOReal arg=0.011386)
MSEdge::setSlope(SUMOReal arg=0.044291)
MSEdge::setSlope(SUMOReal arg=-0.047458)
MSEdge::setSlope(SUMOReal arg=-0.044291)
MSEdge::setSlope(SUMOReal arg=-0.022580)
MSEdge::setSlope(SUMOReal arg=-0.061001)
MSEdge::setSlope(SUMOReal arg=0.066384)
MSEdge::setSlope(SUMOReal arg=0.086600)
MSEdge::setSlope(SUMOReal arg=0.009244)
MSEdge::setSlope(SUMOReal arg=0.061001)
MSEdge::setSlope(SUMOReal arg=-0.016128)
MSEdge::setSlope(SUMOReal arg=0.029260)
MSEdge::setSlope(SUMOReal arg=0.051850)
MSEdge::setSlope(SUMOReal arg=0.013462)
MSEdge::setSlope(SUMOReal arg=0.002895)
MSEdge::setSlope(SUMOReal arg=-0.011013)
MSEdge::setSlope(SUMOReal arg=0.001629)
MSEdge::setSlope(SUMOReal arg=0.011093)
MSEdge::setSlope(SUMOReal arg=0.000739)
MSEdge::setSlope(SUMOReal arg=-0.002313)
MSEdge::setSlope(SUMOReal arg=0.046478)
MSEdge::setSlope(SUMOReal arg=0.002489)
MSEdge::setSlope(SUMOReal arg=0.006667)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.009346)
MSEdge::setSlope(SUMOReal arg=-0.002138)
MSEdge::setSlope(SUMOReal arg=-0.003279)
MSEdge::setSlope(SUMOReal arg=-0.004577)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.005208)
MSEdge::setSlope(SUMOReal arg=-0.004925)
MSEdge::setSlope(SUMOReal arg=0.002138)
MSEdge::setSlope(SUMOReal arg=-0.003128)
MSEdge::setSlope(SUMOReal arg=-0.007772)
MSEdge::setSlope(SUMOReal arg=0.003128)
MSEdge::setSlope(SUMOReal arg=0.002608)
MSEdge::setSlope(SUMOReal arg=-0.002028)
MSEdge::setSlope(SUMOReal arg=0.002028)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002238)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001586)
MSEdge::setSlope(SUMOReal arg=-0.003300)
MSEdge::setSlope(SUMOReal arg=0.001586)
MSEdge::setSlope(SUMOReal arg=0.001602)
MSEdge::setSlope(SUMOReal arg=-0.000763)
MSEdge::setSlope(SUMOReal arg=-0.002102)
MSEdge::setSlope(SUMOReal arg=0.000763)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.007576)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.046478)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000767)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.002604)
MSEdge::setSlope(SUMOReal arg=-0.002160)
MSEdge::setSlope(SUMOReal arg=0.007576)
MSEdge::setSlope(SUMOReal arg=-0.001265)
MSEdge::setSlope(SUMOReal arg=-0.000739)
MSEdge::setSlope(SUMOReal arg=-0.000807)
MSEdge::setSlope(SUMOReal arg=0.001583)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.067150)
MSEdge::setSlope(SUMOReal arg=-0.161967)
MSEdge::setSlope(SUMOReal arg=0.005842)
MSEdge::setSlope(SUMOReal arg=-0.007022)
MSEdge::setSlope(SUMOReal arg=0.005628)
MSEdge::setSlope(SUMOReal arg=-0.013001)
MSEdge::setSlope(SUMOReal arg=-0.071122)
MSEdge::setSlope(SUMOReal arg=0.012840)
MSEdge::setSlope(SUMOReal arg=0.013836)
MSEdge::setSlope(SUMOReal arg=0.079586)
MSEdge::setSlope(SUMOReal arg=0.003205)
MSEdge::setSlope(SUMOReal arg=0.170212)
MSEdge::setSlope(SUMOReal arg=-0.170212)
MSEdge::setSlope(SUMOReal arg=0.198485)
MSEdge::setSlope(SUMOReal arg=0.001227)
MSEdge::setSlope(SUMOReal arg=0.032789)
MSEdge::setSlope(SUMOReal arg=1.014630)
MSEdge::setSlope(SUMOReal arg=-0.024620)
MSEdge::setSlope(SUMOReal arg=0.027688)
MSEdge::setSlope(SUMOReal arg=0.050402)
MSEdge::setSlope(SUMOReal arg=-0.002006)
MSEdge::setSlope(SUMOReal arg=0.054858)
MSEdge::setSlope(SUMOReal arg=0.023558)
MSEdge::setSlope(SUMOReal arg=-0.019822)
MSEdge::setSlope(SUMOReal arg=-0.017008)
MSEdge::setSlope(SUMOReal arg=-0.024491)
MSEdge::setSlope(SUMOReal arg=-0.025609)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.003236)
MSEdge::setSlope(SUMOReal arg=0.008902)
MSEdge::setSlope(SUMOReal arg=0.008162)
MSEdge::setSlope(SUMOReal arg=0.002890)
MSEdge::setSlope(SUMOReal arg=0.007022)
MSEdge::setSlope(SUMOReal arg=-0.002890)
MSEdge::setSlope(SUMOReal arg=-0.050402)
MSEdge::setSlope(SUMOReal arg=0.024620)
MSEdge::setSlope(SUMOReal arg=-0.054858)
MSEdge::setSlope(SUMOReal arg=-0.008902)
MSEdge::setSlope(SUMOReal arg=-0.000742)
MSEdge::setSlope(SUMOReal arg=-0.008800)
MSEdge::setSlope(SUMOReal arg=-0.069190)
MSEdge::setSlope(SUMOReal arg=0.008843)
MSEdge::setSlope(SUMOReal arg=0.069190)
MSEdge::setSlope(SUMOReal arg=0.034593)
MSEdge::setSlope(SUMOReal arg=0.013553)
MSEdge::setSlope(SUMOReal arg=0.025355)
MSEdge::setSlope(SUMOReal arg=0.003736)
MSEdge::setSlope(SUMOReal arg=-0.052036)
MSEdge::setSlope(SUMOReal arg=0.069825)
MSEdge::setSlope(SUMOReal arg=0.351684)
MSEdge::setSlope(SUMOReal arg=-0.209640)
MSEdge::setSlope(SUMOReal arg=0.052036)
MSEdge::setSlope(SUMOReal arg=-0.029260)
MSEdge::setSlope(SUMOReal arg=-0.054253)
MSEdge::setSlope(SUMOReal arg=0.019106)
MSEdge::setSlope(SUMOReal arg=0.014858)
MSEdge::setSlope(SUMOReal arg=-0.030760)
MSEdge::setSlope(SUMOReal arg=-0.028448)
MSEdge::setSlope(SUMOReal arg=0.115935)
MSEdge::setSlope(SUMOReal arg=0.033362)
MSEdge::setSlope(SUMOReal arg=0.007756)
MSEdge::setSlope(SUMOReal arg=0.398265)
MSEdge::setSlope(SUMOReal arg=-0.009404)
MSEdge::setSlope(SUMOReal arg=-0.005593)
MSEdge::setSlope(SUMOReal arg=-0.001163)
MSEdge::setSlope(SUMOReal arg=-0.004604)
MSEdge::setSlope(SUMOReal arg=0.005038)
MSEdge::setSlope(SUMOReal arg=0.037797)
MSEdge::setSlope(SUMOReal arg=-0.037797)
MSEdge::setSlope(SUMOReal arg=-0.058472)
MSEdge::setSlope(SUMOReal arg=0.001163)
MSEdge::setSlope(SUMOReal arg=-0.001586)
MSEdge::setSlope(SUMOReal arg=-0.000856)
MSEdge::setSlope(SUMOReal arg=0.001661)
MSEdge::setSlope(SUMOReal arg=0.000046)
MSEdge::setSlope(SUMOReal arg=-0.045311)
MSEdge::setSlope(SUMOReal arg=0.002514)
MSEdge::setSlope(SUMOReal arg=0.000668)
MSEdge::setSlope(SUMOReal arg=0.011424)
MSEdge::setSlope(SUMOReal arg=-0.006229)
MSEdge::setSlope(SUMOReal arg=0.013833)
MSEdge::setSlope(SUMOReal arg=-0.015872)
MSEdge::setSlope(SUMOReal arg=-0.000320)
MSEdge::setSlope(SUMOReal arg=0.002867)
MSEdge::setSlope(SUMOReal arg=-0.005833)
MSEdge::setSlope(SUMOReal arg=0.003520)
MSEdge::setSlope(SUMOReal arg=-0.008478)
MSEdge::setSlope(SUMOReal arg=-0.003462)
MSEdge::setSlope(SUMOReal arg=-0.042733)
MSEdge::setSlope(SUMOReal arg=0.042733)
MSEdge::setSlope(SUMOReal arg=0.006211)
MSEdge::setSlope(SUMOReal arg=0.030995)
MSEdge::setSlope(SUMOReal arg=-0.006211)
MSEdge::setSlope(SUMOReal arg=0.006293)
MSEdge::setSlope(SUMOReal arg=-0.005387)
MSEdge::setSlope(SUMOReal arg=-0.006293)
MSEdge::setSlope(SUMOReal arg=-0.002387)
MSEdge::setSlope(SUMOReal arg=0.362926)
MSEdge::setSlope(SUMOReal arg=0.002387)
MSEdge::setSlope(SUMOReal arg=0.080363)
MSEdge::setSlope(SUMOReal arg=0.031436)
MSEdge::setSlope(SUMOReal arg=0.000317)
MSEdge::setSlope(SUMOReal arg=-0.003838)
MSEdge::setSlope(SUMOReal arg=-0.000066)
MSEdge::setSlope(SUMOReal arg=0.006873)
MSEdge::setSlope(SUMOReal arg=-0.001581)
MSEdge::setSlope(SUMOReal arg=0.000374)
MSEdge::setSlope(SUMOReal arg=-0.000374)
MSEdge::setSlope(SUMOReal arg=-1.088283)
MSEdge::setSlope(SUMOReal arg=-0.119740)
MSEdge::setSlope(SUMOReal arg=0.001688)
MSEdge::setSlope(SUMOReal arg=0.001001)
MSEdge::setSlope(SUMOReal arg=0.050976)
MSEdge::setSlope(SUMOReal arg=-0.011089)
MSEdge::setSlope(SUMOReal arg=-0.003103)
MSEdge::setSlope(SUMOReal arg=-0.014640)
MSEdge::setSlope(SUMOReal arg=0.000423)
MSEdge::setSlope(SUMOReal arg=0.014593)
MSEdge::setSlope(SUMOReal arg=0.009357)
MSEdge::setSlope(SUMOReal arg=0.005010)
MSEdge::setSlope(SUMOReal arg=0.004893)
MSEdge::setSlope(SUMOReal arg=-0.004904)
MSEdge::setSlope(SUMOReal arg=-0.004990)
MSEdge::setSlope(SUMOReal arg=0.006427)
MSEdge::setSlope(SUMOReal arg=-0.001019)
MSEdge::setSlope(SUMOReal arg=-0.009650)
MSEdge::setSlope(SUMOReal arg=-0.040288)
MSEdge::setSlope(SUMOReal arg=0.009581)
MSEdge::setSlope(SUMOReal arg=0.003133)
MSEdge::setSlope(SUMOReal arg=-0.000837)
MSEdge::setSlope(SUMOReal arg=-0.003118)
MSEdge::setSlope(SUMOReal arg=-0.006940)
MSEdge::setSlope(SUMOReal arg=-0.002736)
MSEdge::setSlope(SUMOReal arg=0.007690)
MSEdge::setSlope(SUMOReal arg=0.002752)
MSEdge::setSlope(SUMOReal arg=-0.003622)
MSEdge::setSlope(SUMOReal arg=0.003503)
MSEdge::setSlope(SUMOReal arg=0.003865)
MSEdge::setSlope(SUMOReal arg=0.000981)
MSEdge::setSlope(SUMOReal arg=0.075086)
MSEdge::setSlope(SUMOReal arg=0.073485)
MSEdge::setSlope(SUMOReal arg=0.015787)
MSEdge::setSlope(SUMOReal arg=-0.073397)
MSEdge::setSlope(SUMOReal arg=-0.040989)
MSEdge::setSlope(SUMOReal arg=0.004400)
MSEdge::setSlope(SUMOReal arg=-0.004400)
MSEdge::setSlope(SUMOReal arg=-0.065894)
MSEdge::setSlope(SUMOReal arg=-0.005602)
MSEdge::setSlope(SUMOReal arg=0.065894)
MSEdge::setSlope(SUMOReal arg=-0.006242)
MSEdge::setSlope(SUMOReal arg=-0.003566)
MSEdge::setSlope(SUMOReal arg=-0.007550)
MSEdge::setSlope(SUMOReal arg=-0.007993)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002206)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002314)
MSEdge::setSlope(SUMOReal arg=0.006265)
MSEdge::setSlope(SUMOReal arg=-0.001623)
MSEdge::setSlope(SUMOReal arg=-0.001375)
MSEdge::setSlope(SUMOReal arg=0.001375)
MSEdge::setSlope(SUMOReal arg=0.003413)
MSEdge::setSlope(SUMOReal arg=-0.004601)
MSEdge::setSlope(SUMOReal arg=-0.003475)
MSEdge::setSlope(SUMOReal arg=0.002298)
MSEdge::setSlope(SUMOReal arg=-0.002322)
MSEdge::setSlope(SUMOReal arg=0.001692)
MSEdge::setSlope(SUMOReal arg=0.087116)
MSEdge::setSlope(SUMOReal arg=-0.011009)
MSEdge::setSlope(SUMOReal arg=-0.006671)
MSEdge::setSlope(SUMOReal arg=-0.116094)
MSEdge::setSlope(SUMOReal arg=-0.001035)
MSEdge::setSlope(SUMOReal arg=0.001035)
MSEdge::setSlope(SUMOReal arg=0.004631)
MSEdge::setSlope(SUMOReal arg=-0.000364)
MSEdge::setSlope(SUMOReal arg=-0.000566)
MSEdge::setSlope(SUMOReal arg=0.035938)
MSEdge::setSlope(SUMOReal arg=-0.017876)
MSEdge::setSlope(SUMOReal arg=0.017876)
MSEdge::setSlope(SUMOReal arg=0.001361)
MSEdge::setSlope(SUMOReal arg=0.007373)
MSEdge::setSlope(SUMOReal arg=-0.202322)
MSEdge::setSlope(SUMOReal arg=0.021787)
MSEdge::setSlope(SUMOReal arg=0.014837)
MSEdge::setSlope(SUMOReal arg=-0.014837)
MSEdge::setSlope(SUMOReal arg=0.004777)
MSEdge::setSlope(SUMOReal arg=-0.005517)
MSEdge::setSlope(SUMOReal arg=-0.006383)
MSEdge::setSlope(SUMOReal arg=-0.032504)
MSEdge::setSlope(SUMOReal arg=-0.001339)
MSEdge::setSlope(SUMOReal arg=0.032504)
MSEdge::setSlope(SUMOReal arg=0.001771)
MSEdge::setSlope(SUMOReal arg=-0.001771)
MSEdge::setSlope(SUMOReal arg=-0.002633)
MSEdge::setSlope(SUMOReal arg=0.009706)
MSEdge::setSlope(SUMOReal arg=0.013004)
MSEdge::setSlope(SUMOReal arg=0.002509)
MSEdge::setSlope(SUMOReal arg=-0.001254)
MSEdge::setSlope(SUMOReal arg=0.004513)
MSEdge::setSlope(SUMOReal arg=0.201186)
MSEdge::setSlope(SUMOReal arg=-0.220780)
MSEdge::setSlope(SUMOReal arg=0.096895)
MSEdge::setSlope(SUMOReal arg=-0.041270)
MSEdge::setSlope(SUMOReal arg=-0.004319)
MSEdge::setSlope(SUMOReal arg=-0.016400)
MSEdge::setSlope(SUMOReal arg=-0.040572)
MSEdge::setSlope(SUMOReal arg=0.057505)
MSEdge::setSlope(SUMOReal arg=0.003119)
MSEdge::setSlope(SUMOReal arg=0.075727)
MSEdge::setSlope(SUMOReal arg=0.010491)
MSEdge::setSlope(SUMOReal arg=-0.002158)
MSEdge::setSlope(SUMOReal arg=-0.001500)
MSEdge::setSlope(SUMOReal arg=-0.003080)
MSEdge::setSlope(SUMOReal arg=-0.006960)
MSEdge::setSlope(SUMOReal arg=-0.016422)
MSEdge::setSlope(SUMOReal arg=0.006960)
MSEdge::setSlope(SUMOReal arg=-0.001837)
MSEdge::setSlope(SUMOReal arg=-0.002662)
MSEdge::setSlope(SUMOReal arg=-0.003512)
MSEdge::setSlope(SUMOReal arg=0.012620)
MSEdge::setSlope(SUMOReal arg=0.001263)
MSEdge::setSlope(SUMOReal arg=0.002655)
MSEdge::setSlope(SUMOReal arg=-0.003167)
MSEdge::setSlope(SUMOReal arg=0.003342)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.032316)
MSEdge::setSlope(SUMOReal arg=-0.012855)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.017488)
MSEdge::setSlope(SUMOReal arg=0.014798)
MSEdge::setSlope(SUMOReal arg=-0.016735)
MSEdge::setSlope(SUMOReal arg=0.089706)
MSEdge::setSlope(SUMOReal arg=0.001450)
MSEdge::setSlope(SUMOReal arg=0.016735)
MSEdge::setSlope(SUMOReal arg=0.010706)
MSEdge::setSlope(SUMOReal arg=0.002022)
MSEdge::setSlope(SUMOReal arg=-0.002339)
MSEdge::setSlope(SUMOReal arg=0.004299)
MSEdge::setSlope(SUMOReal arg=-0.028198)
MSEdge::setSlope(SUMOReal arg=-0.036537)
MSEdge::setSlope(SUMOReal arg=0.002906)
MSEdge::setSlope(SUMOReal arg=0.036537)
MSEdge::setSlope(SUMOReal arg=-0.032775)
MSEdge::setSlope(SUMOReal arg=0.004474)
MSEdge::setSlope(SUMOReal arg=-0.001199)
MSEdge::setSlope(SUMOReal arg=0.032775)
MSEdge::setSlope(SUMOReal arg=0.002512)
MSEdge::setSlope(SUMOReal arg=0.012149)
MSEdge::setSlope(SUMOReal arg=0.007606)
MSEdge::setSlope(SUMOReal arg=-0.014935)
MSEdge::setSlope(SUMOReal arg=0.005653)
MSEdge::setSlope(SUMOReal arg=0.000296)
MSEdge::setSlope(SUMOReal arg=-0.022801)
MSEdge::setSlope(SUMOReal arg=-0.021050)
MSEdge::setSlope(SUMOReal arg=0.026081)
MSEdge::setSlope(SUMOReal arg=-0.003103)
MSEdge::setSlope(SUMOReal arg=-0.005080)
MSEdge::setSlope(SUMOReal arg=-0.026081)
MSEdge::setSlope(SUMOReal arg=0.002662)
MSEdge::setSlope(SUMOReal arg=0.005099)
MSEdge::setSlope(SUMOReal arg=-0.059349)
MSEdge::setSlope(SUMOReal arg=0.059349)
MSEdge::setSlope(SUMOReal arg=-0.015083)
MSEdge::setSlope(SUMOReal arg=0.018192)
MSEdge::setSlope(SUMOReal arg=0.014394)
MSEdge::setSlope(SUMOReal arg=0.109275)
MSEdge::setSlope(SUMOReal arg=0.041643)
MSEdge::setSlope(SUMOReal arg=0.002724)
MSEdge::setSlope(SUMOReal arg=0.030046)
MSEdge::setSlope(SUMOReal arg=0.003767)
MSEdge::setSlope(SUMOReal arg=0.005672)
MSEdge::setSlope(SUMOReal arg=0.013244)
MSEdge::setSlope(SUMOReal arg=-0.013244)
MSEdge::setSlope(SUMOReal arg=-0.020510)
MSEdge::setSlope(SUMOReal arg=-0.002741)
MSEdge::setSlope(SUMOReal arg=0.005579)
MSEdge::setSlope(SUMOReal arg=-0.003531)
MSEdge::setSlope(SUMOReal arg=-0.005577)
MSEdge::setSlope(SUMOReal arg=-0.006230)
MSEdge::setSlope(SUMOReal arg=-0.071097)
MSEdge::setSlope(SUMOReal arg=0.000378)
MSEdge::setSlope(SUMOReal arg=0.015706)
MSEdge::setSlope(SUMOReal arg=-0.009504)
MSEdge::setSlope(SUMOReal arg=-0.004742)
MSEdge::setSlope(SUMOReal arg=0.055385)
MSEdge::setSlope(SUMOReal arg=0.071097)
MSEdge::setSlope(SUMOReal arg=0.004329)
MSEdge::setSlope(SUMOReal arg=-0.000634)
MSEdge::setSlope(SUMOReal arg=-0.015706)
MSEdge::setSlope(SUMOReal arg=-0.002741)
MSEdge::setSlope(SUMOReal arg=0.004008)
MSEdge::setSlope(SUMOReal arg=0.002735)
MSEdge::setSlope(SUMOReal arg=0.010429)
MSEdge::setSlope(SUMOReal arg=-0.083214)
MSEdge::setSlope(SUMOReal arg=0.076850)
MSEdge::setSlope(SUMOReal arg=-0.000134)
MSEdge::setSlope(SUMOReal arg=0.058470)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.017849)
MSEdge::setSlope(SUMOReal arg=0.010568)
MSEdge::setSlope(SUMOReal arg=-0.003710)
MSEdge::setSlope(SUMOReal arg=-0.017290)
MSEdge::setSlope(SUMOReal arg=0.005708)
MSEdge::setSlope(SUMOReal arg=-0.005652)
MSEdge::setSlope(SUMOReal arg=-0.058865)
MSEdge::setSlope(SUMOReal arg=-0.035293)
MSEdge::setSlope(SUMOReal arg=-0.037491)
MSEdge::setSlope(SUMOReal arg=0.044723)
MSEdge::setSlope(SUMOReal arg=-0.043581)
MSEdge::setSlope(SUMOReal arg=-0.045651)
MSEdge::setSlope(SUMOReal arg=-0.005259)
MSEdge::setSlope(SUMOReal arg=-0.052395)
MSEdge::setSlope(SUMOReal arg=0.011648)
MSEdge::setSlope(SUMOReal arg=-0.916714)
MSEdge::setSlope(SUMOReal arg=-0.000876)
MSEdge::setSlope(SUMOReal arg=0.001004)
MSEdge::setSlope(SUMOReal arg=0.000863)
MSEdge::setSlope(SUMOReal arg=-0.084963)
MSEdge::setSlope(SUMOReal arg=-0.132276)
MSEdge::setSlope(SUMOReal arg=-0.125664)
MSEdge::setSlope(SUMOReal arg=0.463648)
MSEdge::setSlope(SUMOReal arg=-0.191779)
MSEdge::setSlope(SUMOReal arg=0.230346)
MSEdge::setSlope(SUMOReal arg=0.076124)
MSEdge::setSlope(SUMOReal arg=-0.043242)
MSEdge::setSlope(SUMOReal arg=-0.075019)
MSEdge::setSlope(SUMOReal arg=0.075019)
MSEdge::setSlope(SUMOReal arg=0.004269)
MSEdge::setSlope(SUMOReal arg=-0.147312)
MSEdge::setSlope(SUMOReal arg=0.118559)
MSEdge::setSlope(SUMOReal arg=0.061017)
MSEdge::setSlope(SUMOReal arg=-0.068821)
MSEdge::setSlope(SUMOReal arg=0.068821)
MSEdge::setSlope(SUMOReal arg=0.336116)
MSEdge::setSlope(SUMOReal arg=-0.336116)
MSEdge::setSlope(SUMOReal arg=0.132276)
MSEdge::setSlope(SUMOReal arg=-0.036967)
MSEdge::setSlope(SUMOReal arg=-0.061017)
MSEdge::setSlope(SUMOReal arg=0.033776)
MSEdge::setSlope(SUMOReal arg=-0.001888)
MSEdge::setSlope(SUMOReal arg=-0.002093)
MSEdge::setSlope(SUMOReal arg=-0.000079)
MSEdge::setSlope(SUMOReal arg=-0.002557)
MSEdge::setSlope(SUMOReal arg=-0.009399)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000544)
MSEdge::setSlope(SUMOReal arg=-0.000957)
MSEdge::setSlope(SUMOReal arg=0.012663)
MSEdge::setSlope(SUMOReal arg=0.053562)
MSEdge::setSlope(SUMOReal arg=-0.053562)
MSEdge::setSlope(SUMOReal arg=0.001724)
MSEdge::setSlope(SUMOReal arg=-0.008103)
MSEdge::setSlope(SUMOReal arg=-0.066068)
MSEdge::setSlope(SUMOReal arg=0.021483)
MSEdge::setSlope(SUMOReal arg=-0.036303)
MSEdge::setSlope(SUMOReal arg=-0.045853)
MSEdge::setSlope(SUMOReal arg=0.005689)
MSEdge::setSlope(SUMOReal arg=-0.005776)
MSEdge::setSlope(SUMOReal arg=0.020846)
MSEdge::setSlope(SUMOReal arg=-0.297803)
MSEdge::setSlope(SUMOReal arg=-0.008639)
MSEdge::setSlope(SUMOReal arg=0.133136)
MSEdge::setSlope(SUMOReal arg=0.177905)
MSEdge::setSlope(SUMOReal arg=0.111481)
MSEdge::setSlope(SUMOReal arg=-0.060532)
MSEdge::setSlope(SUMOReal arg=-0.004052)
MSEdge::setSlope(SUMOReal arg=-0.004711)
MSEdge::setSlope(SUMOReal arg=-0.003332)
MSEdge::setSlope(SUMOReal arg=0.002637)
MSEdge::setSlope(SUMOReal arg=-0.046167)
MSEdge::setSlope(SUMOReal arg=-0.001209)
MSEdge::setSlope(SUMOReal arg=0.004609)
MSEdge::setSlope(SUMOReal arg=0.049495)
MSEdge::setSlope(SUMOReal arg=0.009340)
MSEdge::setSlope(SUMOReal arg=-0.009340)
MSEdge::setSlope(SUMOReal arg=0.015846)
MSEdge::setSlope(SUMOReal arg=0.013033)
MSEdge::setSlope(SUMOReal arg=0.001874)
MSEdge::setSlope(SUMOReal arg=0.013672)
MSEdge::setSlope(SUMOReal arg=0.006781)
MSEdge::setSlope(SUMOReal arg=0.003337)
MSEdge::setSlope(SUMOReal arg=-0.006781)
MSEdge::setSlope(SUMOReal arg=-0.022338)
MSEdge::setSlope(SUMOReal arg=-0.004108)
MSEdge::setSlope(SUMOReal arg=-0.002404)
MSEdge::setSlope(SUMOReal arg=0.004108)
MSEdge::setSlope(SUMOReal arg=-0.010330)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.003106)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.002404)
MSEdge::setSlope(SUMOReal arg=0.003019)
MSEdge::setSlope(SUMOReal arg=-0.006493)
MSEdge::setSlope(SUMOReal arg=-0.003019)
MSEdge::setSlope(SUMOReal arg=-0.003337)
MSEdge::setSlope(SUMOReal arg=0.000929)
MSEdge::setSlope(SUMOReal arg=-0.038915)
MSEdge::setSlope(SUMOReal arg=-0.013672)
MSEdge::setSlope(SUMOReal arg=0.010330)
MSEdge::setSlope(SUMOReal arg=0.022338)
MSEdge::setSlope(SUMOReal arg=-0.007522)
MSEdge::setSlope(SUMOReal arg=0.110061)
MSEdge::setSlope(SUMOReal arg=0.006865)
MSEdge::setSlope(SUMOReal arg=0.013985)
MSEdge::setSlope(SUMOReal arg=-0.046636)
MSEdge::setSlope(SUMOReal arg=-0.055499)
MSEdge::setSlope(SUMOReal arg=0.047998)
MSEdge::setSlope(SUMOReal arg=0.026369)
MSEdge::setSlope(SUMOReal arg=-0.077153)
MSEdge::setSlope(SUMOReal arg=-0.039096)
MSEdge::setSlope(SUMOReal arg=-0.477831)
MSEdge::setSlope(SUMOReal arg=-0.009371)
MSEdge::setSlope(SUMOReal arg=0.026138)
MSEdge::setSlope(SUMOReal arg=0.043739)
MSEdge::setSlope(SUMOReal arg=-0.042201)
MSEdge::setSlope(SUMOReal arg=-0.019325)
MSEdge::setSlope(SUMOReal arg=-0.006406)
MSEdge::setSlope(SUMOReal arg=0.334373)
MSEdge::setSlope(SUMOReal arg=0.065167)
MSEdge::setSlope(SUMOReal arg=-0.008292)
MSEdge::setSlope(SUMOReal arg=0.000539)
MSEdge::setSlope(SUMOReal arg=0.012777)
MSEdge::setSlope(SUMOReal arg=-0.007515)
MSEdge::setSlope(SUMOReal arg=-0.012777)
MSEdge::setSlope(SUMOReal arg=-0.009985)
MSEdge::setSlope(SUMOReal arg=0.009195)
MSEdge::setSlope(SUMOReal arg=-0.007966)
MSEdge::setSlope(SUMOReal arg=0.003786)
MSEdge::setSlope(SUMOReal arg=0.058382)
MSEdge::setSlope(SUMOReal arg=0.016025)
MSEdge::setSlope(SUMOReal arg=-0.064768)
MSEdge::setSlope(SUMOReal arg=0.010935)
MSEdge::setSlope(SUMOReal arg=-0.003504)
MSEdge::setSlope(SUMOReal arg=0.003504)
MSEdge::setSlope(SUMOReal arg=0.007966)
MSEdge::setSlope(SUMOReal arg=-0.000503)
MSEdge::setSlope(SUMOReal arg=0.003044)
MSEdge::setSlope(SUMOReal arg=-0.002246)
MSEdge::setSlope(SUMOReal arg=0.010154)
MSEdge::setSlope(SUMOReal arg=-0.220249)
MSEdge::setSlope(SUMOReal arg=0.220249)
MSEdge::setSlope(SUMOReal arg=0.025734)
MSEdge::setSlope(SUMOReal arg=-0.020564)
MSEdge::setSlope(SUMOReal arg=-0.002278)
MSEdge::setSlope(SUMOReal arg=0.020564)
MSEdge::setSlope(SUMOReal arg=0.003417)
MSEdge::setSlope(SUMOReal arg=-0.019441)
MSEdge::setSlope(SUMOReal arg=0.019974)
MSEdge::setSlope(SUMOReal arg=0.019441)
MSEdge::setSlope(SUMOReal arg=0.035631)
MSEdge::setSlope(SUMOReal arg=0.023082)
MSEdge::setSlope(SUMOReal arg=0.012153)
MSEdge::setSlope(SUMOReal arg=-0.023082)
MSEdge::setSlope(SUMOReal arg=-0.000379)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.024861)
MSEdge::setSlope(SUMOReal arg=0.001621)
MSEdge::setSlope(SUMOReal arg=-0.014481)
MSEdge::setSlope(SUMOReal arg=0.003616)
MSEdge::setSlope(SUMOReal arg=0.003086)
MSEdge::setSlope(SUMOReal arg=-0.003616)
MSEdge::setSlope(SUMOReal arg=-0.024861)
MSEdge::setSlope(SUMOReal arg=-0.006165)
MSEdge::setSlope(SUMOReal arg=0.003045)
MSEdge::setSlope(SUMOReal arg=0.006165)
MSEdge::setSlope(SUMOReal arg=0.021595)
MSEdge::setSlope(SUMOReal arg=-0.001593)
MSEdge::setSlope(SUMOReal arg=-0.035631)
MSEdge::setSlope(SUMOReal arg=0.001593)
MSEdge::setSlope(SUMOReal arg=-0.019974)
MSEdge::setSlope(SUMOReal arg=0.027546)
MSEdge::setSlope(SUMOReal arg=0.033907)
MSEdge::setSlope(SUMOReal arg=-0.027546)
MSEdge::setSlope(SUMOReal arg=0.008529)
MSEdge::setSlope(SUMOReal arg=0.000812)
MSEdge::setSlope(SUMOReal arg=-0.025734)
MSEdge::setSlope(SUMOReal arg=0.009581)
MSEdge::setSlope(SUMOReal arg=-0.009581)
MSEdge::setSlope(SUMOReal arg=-0.002966)
MSEdge::setSlope(SUMOReal arg=-0.007110)
MSEdge::setSlope(SUMOReal arg=-0.019947)
MSEdge::setSlope(SUMOReal arg=0.013347)
MSEdge::setSlope(SUMOReal arg=-0.021595)
MSEdge::setSlope(SUMOReal arg=-0.013347)
MSEdge::setSlope(SUMOReal arg=-0.033907)
MSEdge::setSlope(SUMOReal arg=-0.003155)
MSEdge::setSlope(SUMOReal arg=0.003155)
MSEdge::setSlope(SUMOReal arg=-0.000291)
MSEdge::setSlope(SUMOReal arg=-0.008529)
MSEdge::setSlope(SUMOReal arg=0.003556)
MSEdge::setSlope(SUMOReal arg=-0.000472)
MSEdge::setSlope(SUMOReal arg=0.005053)
MSEdge::setSlope(SUMOReal arg=-0.005053)
MSEdge::setSlope(SUMOReal arg=-0.015872)
MSEdge::setSlope(SUMOReal arg=-0.015058)
MSEdge::setSlope(SUMOReal arg=0.015872)
MSEdge::setSlope(SUMOReal arg=-0.007049)
MSEdge::setSlope(SUMOReal arg=0.004785)
MSEdge::setSlope(SUMOReal arg=-0.004785)
MSEdge::setSlope(SUMOReal arg=-0.001343)
MSEdge::setSlope(SUMOReal arg=-0.009363)
MSEdge::setSlope(SUMOReal arg=0.001431)
MSEdge::setSlope(SUMOReal arg=-0.000704)
MSEdge::setSlope(SUMOReal arg=-0.001136)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.001136)
MSEdge::setSlope(SUMOReal arg=0.014481)
MSEdge::setSlope(SUMOReal arg=-0.003286)
MSEdge::setSlope(SUMOReal arg=-0.003045)
MSEdge::setSlope(SUMOReal arg=0.019947)
MSEdge::setSlope(SUMOReal arg=0.016350)
MSEdge::setSlope(SUMOReal arg=0.040076)
MSEdge::setSlope(SUMOReal arg=0.003963)
MSEdge::setSlope(SUMOReal arg=-0.040076)
MSEdge::setSlope(SUMOReal arg=0.003328)
MSEdge::setSlope(SUMOReal arg=0.023452)
MSEdge::setSlope(SUMOReal arg=-0.003328)
MSEdge::setSlope(SUMOReal arg=-0.012031)
MSEdge::setSlope(SUMOReal arg=0.009985)
MSEdge::setSlope(SUMOReal arg=0.007800)
MSEdge::setSlope(SUMOReal arg=0.013715)
MSEdge::setSlope(SUMOReal arg=-0.004005)
MSEdge::setSlope(SUMOReal arg=0.009363)
MSEdge::setSlope(SUMOReal arg=-0.002411)
MSEdge::setSlope(SUMOReal arg=0.000379)
MSEdge::setSlope(SUMOReal arg=0.000704)
MSEdge::setSlope(SUMOReal arg=0.002278)
MSEdge::setSlope(SUMOReal arg=0.007110)
MSEdge::setSlope(SUMOReal arg=0.000472)
MSEdge::setSlope(SUMOReal arg=-0.011744)
MSEdge::setSlope(SUMOReal arg=0.011744)
MSEdge::setSlope(SUMOReal arg=0.015058)
MSEdge::setSlope(SUMOReal arg=-0.006860)
MSEdge::setSlope(SUMOReal arg=-0.003417)
MSEdge::setSlope(SUMOReal arg=0.006860)
MSEdge::setSlope(SUMOReal arg=-0.012153)
MSEdge::setSlope(SUMOReal arg=0.002411)
MSEdge::setSlope(SUMOReal arg=0.007049)
MSEdge::setSlope(SUMOReal arg=-0.003786)
MSEdge::setSlope(SUMOReal arg=-0.001621)
MSEdge::setSlope(SUMOReal arg=-0.016025)
MSEdge::setSlope(SUMOReal arg=-0.016350)
MSEdge::setSlope(SUMOReal arg=-0.009195)
MSEdge::setSlope(SUMOReal arg=-0.023452)
MSEdge::setSlope(SUMOReal arg=-0.010619)
MSEdge::setSlope(SUMOReal arg=0.022709)
MSEdge::setSlope(SUMOReal arg=0.001945)
MSEdge::setSlope(SUMOReal arg=-0.004931)
MSEdge::setSlope(SUMOReal arg=-0.050383)
MSEdge::setSlope(SUMOReal arg=-0.077998)
MSEdge::setSlope(SUMOReal arg=0.007092)
MSEdge::setSlope(SUMOReal arg=0.029158)
MSEdge::setSlope(SUMOReal arg=-0.029208)
MSEdge::setSlope(SUMOReal arg=0.027057)
MSEdge::setSlope(SUMOReal arg=-0.028721)
MSEdge::setSlope(SUMOReal arg=0.058472)
MSEdge::setSlope(SUMOReal arg=0.028721)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.024755)
MSEdge::setSlope(SUMOReal arg=-0.020560)
MSEdge::setSlope(SUMOReal arg=-0.198485)
MSEdge::setSlope(SUMOReal arg=-0.003049)
MSEdge::setSlope(SUMOReal arg=-0.005607)
MSEdge::setSlope(SUMOReal arg=0.071655)
MSEdge::setSlope(SUMOReal arg=0.005439)
MSEdge::setSlope(SUMOReal arg=0.031660)
MSEdge::setSlope(SUMOReal arg=0.012199)
MSEdge::setSlope(SUMOReal arg=-0.005439)
MSEdge::setSlope(SUMOReal arg=-0.023151)
MSEdge::setSlope(SUMOReal arg=0.003133)
MSEdge::setSlope(SUMOReal arg=-0.003133)
MSEdge::setSlope(SUMOReal arg=0.007258)
MSEdge::setSlope(SUMOReal arg=-0.007258)
MSEdge::setSlope(SUMOReal arg=-0.013553)
MSEdge::setSlope(SUMOReal arg=-0.001586)
MSEdge::setSlope(SUMOReal arg=-0.003736)
MSEdge::setSlope(SUMOReal arg=0.033990)
MSEdge::setSlope(SUMOReal arg=0.054936)
MSEdge::setSlope(SUMOReal arg=-0.026223)
MSEdge::setSlope(SUMOReal arg=-0.023768)
MSEdge::setSlope(SUMOReal arg=0.003049)
MSEdge::setSlope(SUMOReal arg=0.006302)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002197)
MSEdge::setSlope(SUMOReal arg=-0.004944)
MSEdge::setSlope(SUMOReal arg=0.003620)
MSEdge::setSlope(SUMOReal arg=-0.001839)
MSEdge::setSlope(SUMOReal arg=0.001860)
MSEdge::setSlope(SUMOReal arg=-0.002506)
MSEdge::setSlope(SUMOReal arg=-0.002451)
MSEdge::setSlope(SUMOReal arg=-0.019310)
MSEdge::setSlope(SUMOReal arg=0.158456)
MSEdge::setSlope(SUMOReal arg=0.005672)
MSEdge::setSlope(SUMOReal arg=-0.048593)
MSEdge::setSlope(SUMOReal arg=-0.118837)
MSEdge::setSlope(SUMOReal arg=-0.005672)
MSEdge::setSlope(SUMOReal arg=0.000897)
MSEdge::setSlope(SUMOReal arg=-0.090252)
MSEdge::setSlope(SUMOReal arg=0.090252)
MSEdge::setSlope(SUMOReal arg=-0.042013)
MSEdge::setSlope(SUMOReal arg=-0.025293)
MSEdge::setSlope(SUMOReal arg=-0.027057)
MSEdge::setSlope(SUMOReal arg=0.025293)
MSEdge::setSlope(SUMOReal arg=0.008000)
MSEdge::setSlope(SUMOReal arg=-0.007109)
MSEdge::setSlope(SUMOReal arg=-0.052835)
MSEdge::setSlope(SUMOReal arg=-0.058580)
MSEdge::setSlope(SUMOReal arg=-0.059190)
MSEdge::setSlope(SUMOReal arg=-0.013043)
MSEdge::setSlope(SUMOReal arg=-0.177905)
MSEdge::setSlope(SUMOReal arg=-0.005319)
MSEdge::setSlope(SUMOReal arg=0.034034)
MSEdge::setSlope(SUMOReal arg=0.000650)
MSEdge::setSlope(SUMOReal arg=-0.027171)
MSEdge::setSlope(SUMOReal arg=-0.011940)
MSEdge::setSlope(SUMOReal arg=0.011940)
MSEdge::setSlope(SUMOReal arg=-0.009993)
MSEdge::setSlope(SUMOReal arg=-0.001539)
MSEdge::setSlope(SUMOReal arg=0.009993)
MSEdge::setSlope(SUMOReal arg=-0.002552)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.003999)
MSEdge::setSlope(SUMOReal arg=-0.005307)
MSEdge::setSlope(SUMOReal arg=-0.013513)
MSEdge::setSlope(SUMOReal arg=-0.006344)
MSEdge::setSlope(SUMOReal arg=-0.019890)
MSEdge::setSlope(SUMOReal arg=0.000727)
MSEdge::setSlope(SUMOReal arg=0.096918)
MSEdge::setSlope(SUMOReal arg=0.009800)
MSEdge::setSlope(SUMOReal arg=0.043664)
MSEdge::setSlope(SUMOReal arg=0.059971)
MSEdge::setSlope(SUMOReal arg=-0.014833)
MSEdge::setSlope(SUMOReal arg=0.916714)
MSEdge::setSlope(SUMOReal arg=0.000777)
MSEdge::setSlope(SUMOReal arg=0.007109)
MSEdge::setSlope(SUMOReal arg=-0.000776)
MSEdge::setSlope(SUMOReal arg=-0.057687)
MSEdge::setSlope(SUMOReal arg=0.055465)
MSEdge::setSlope(SUMOReal arg=0.001993)
MSEdge::setSlope(SUMOReal arg=-0.011428)
MSEdge::setSlope(SUMOReal arg=-0.002007)
MSEdge::setSlope(SUMOReal arg=0.002537)
MSEdge::setSlope(SUMOReal arg=-0.028655)
MSEdge::setSlope(SUMOReal arg=-0.002537)
MSEdge::setSlope(SUMOReal arg=0.002179)
MSEdge::setSlope(SUMOReal arg=0.007105)
MSEdge::setSlope(SUMOReal arg=-0.693632)
MSEdge::setSlope(SUMOReal arg=0.018154)
MSEdge::setSlope(SUMOReal arg=-0.018154)
MSEdge::setSlope(SUMOReal arg=-0.059589)
MSEdge::setSlope(SUMOReal arg=0.007053)
MSEdge::setSlope(SUMOReal arg=0.161967)
MSEdge::setSlope(SUMOReal arg=0.059879)
MSEdge::setSlope(SUMOReal arg=0.008432)
MSEdge::setSlope(SUMOReal arg=0.001976)
MSEdge::setSlope(SUMOReal arg=-0.008432)
MSEdge::setSlope(SUMOReal arg=0.023768)
MSEdge::setSlope(SUMOReal arg=0.006432)
MSEdge::setSlope(SUMOReal arg=-0.012214)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.003546)
MSEdge::setSlope(SUMOReal arg=-0.009251)
MSEdge::setSlope(SUMOReal arg=-0.006912)
MSEdge::setSlope(SUMOReal arg=0.009251)
MSEdge::setSlope(SUMOReal arg=-0.006430)
MSEdge::setSlope(SUMOReal arg=-0.001330)
MSEdge::setSlope(SUMOReal arg=-0.001887)
MSEdge::setSlope(SUMOReal arg=0.006430)
MSEdge::setSlope(SUMOReal arg=-0.004674)
MSEdge::setSlope(SUMOReal arg=0.004674)
MSEdge::setSlope(SUMOReal arg=-0.003182)
MSEdge::setSlope(SUMOReal arg=-0.002073)
MSEdge::setSlope(SUMOReal arg=0.001259)
MSEdge::setSlope(SUMOReal arg=0.002287)
MSEdge::setSlope(SUMOReal arg=0.001897)
MSEdge::setSlope(SUMOReal arg=0.001444)
MSEdge::setSlope(SUMOReal arg=0.036915)
MSEdge::setSlope(SUMOReal arg=-0.002751)
MSEdge::setSlope(SUMOReal arg=-0.003183)
MSEdge::setSlope(SUMOReal arg=0.002715)
MSEdge::setSlope(SUMOReal arg=-0.011627)
MSEdge::setSlope(SUMOReal arg=0.119756)
MSEdge::setSlope(SUMOReal arg=0.001993)
MSEdge::setSlope(SUMOReal arg=-0.119756)
MSEdge::setSlope(SUMOReal arg=-0.002618)
MSEdge::setSlope(SUMOReal arg=-0.007330)
MSEdge::setSlope(SUMOReal arg=-0.099669)
MSEdge::setSlope(SUMOReal arg=0.099669)
MSEdge::setSlope(SUMOReal arg=-0.859337)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.018635)
MSEdge::setSlope(SUMOReal arg=0.005443)
MSEdge::setSlope(SUMOReal arg=0.009301)
MSEdge::setSlope(SUMOReal arg=-0.005443)
MSEdge::setSlope(SUMOReal arg=0.000569)
MSEdge::setSlope(SUMOReal arg=0.003547)
MSEdge::setSlope(SUMOReal arg=0.103082)
MSEdge::setSlope(SUMOReal arg=0.040358)
MSEdge::setSlope(SUMOReal arg=-0.040908)
MSEdge::setSlope(SUMOReal arg=-0.018584)
MSEdge::setSlope(SUMOReal arg=-0.009301)
MSEdge::setSlope(SUMOReal arg=0.007513)
MSEdge::setSlope(SUMOReal arg=0.000743)
MSEdge::setSlope(SUMOReal arg=0.002739)
MSEdge::setSlope(SUMOReal arg=0.000817)
MSEdge::setSlope(SUMOReal arg=0.002648)
MSEdge::setSlope(SUMOReal arg=-0.002621)
MSEdge::setSlope(SUMOReal arg=0.002567)
MSEdge::setSlope(SUMOReal arg=-0.030710)
MSEdge::setSlope(SUMOReal arg=-0.010620)
MSEdge::setSlope(SUMOReal arg=-0.003534)
MSEdge::setSlope(SUMOReal arg=0.003534)
MSEdge::setSlope(SUMOReal arg=-0.014679)
MSEdge::setSlope(SUMOReal arg=-0.025418)
MSEdge::setSlope(SUMOReal arg=0.009694)
MSEdge::setSlope(SUMOReal arg=-0.010948)
MSEdge::setSlope(SUMOReal arg=-0.024092)
MSEdge::setSlope(SUMOReal arg=-0.013710)
MSEdge::setSlope(SUMOReal arg=-0.017249)
MSEdge::setSlope(SUMOReal arg=-0.000023)
MSEdge::setSlope(SUMOReal arg=-0.003508)
MSEdge::setSlope(SUMOReal arg=-0.096895)
MSEdge::setSlope(SUMOReal arg=-0.038257)
MSEdge::setSlope(SUMOReal arg=-0.008856)
MSEdge::setSlope(SUMOReal arg=0.046270)
MSEdge::setSlope(SUMOReal arg=0.028918)
MSEdge::setSlope(SUMOReal arg=-0.031161)
MSEdge::setSlope(SUMOReal arg=0.028216)
MSEdge::setSlope(SUMOReal arg=0.041062)
MSEdge::setSlope(SUMOReal arg=0.028028)
MSEdge::setSlope(SUMOReal arg=-0.023792)
MSEdge::setSlope(SUMOReal arg=-0.028918)
MSEdge::setSlope(SUMOReal arg=-0.041062)
MSEdge::setSlope(SUMOReal arg=-0.008519)
MSEdge::setSlope(SUMOReal arg=-0.004270)
MSEdge::setSlope(SUMOReal arg=-0.004446)
MSEdge::setSlope(SUMOReal arg=0.042254)
MSEdge::setSlope(SUMOReal arg=0.033876)
MSEdge::setSlope(SUMOReal arg=-0.030323)
MSEdge::setSlope(SUMOReal arg=-0.047750)
MSEdge::setSlope(SUMOReal arg=-0.028380)
MSEdge::setSlope(SUMOReal arg=-0.019751)
MSEdge::setSlope(SUMOReal arg=0.023061)
MSEdge::setSlope(SUMOReal arg=0.037482)
MSEdge::setSlope(SUMOReal arg=-0.023705)
MSEdge::setSlope(SUMOReal arg=-0.071511)
MSEdge::setSlope(SUMOReal arg=0.044265)
MSEdge::setSlope(SUMOReal arg=-0.016058)
MSEdge::setSlope(SUMOReal arg=-0.032009)
MSEdge::setSlope(SUMOReal arg=-0.011935)
MSEdge::setSlope(SUMOReal arg=-0.065425)
MSEdge::setSlope(SUMOReal arg=0.032009)
MSEdge::setSlope(SUMOReal arg=0.065152)
MSEdge::setSlope(SUMOReal arg=-0.058637)
MSEdge::setSlope(SUMOReal arg=-0.004685)
MSEdge::setSlope(SUMOReal arg=0.004685)
MSEdge::setSlope(SUMOReal arg=0.016527)
MSEdge::setSlope(SUMOReal arg=-0.065665)
MSEdge::setSlope(SUMOReal arg=-0.530773)
MSEdge::setSlope(SUMOReal arg=0.530773)
MSEdge::setSlope(SUMOReal arg=0.047583)
MSEdge::setSlope(SUMOReal arg=-0.051689)
MSEdge::setSlope(SUMOReal arg=0.130566)
MSEdge::setSlope(SUMOReal arg=0.097145)
MSEdge::setSlope(SUMOReal arg=-0.754158)
MSEdge::setSlope(SUMOReal arg=0.058637)
MSEdge::setSlope(SUMOReal arg=-0.339293)
MSEdge::setSlope(SUMOReal arg=-0.017129)
MSEdge::setSlope(SUMOReal arg=-0.977446)
MSEdge::setSlope(SUMOReal arg=0.024403)
MSEdge::setSlope(SUMOReal arg=-0.047583)
MSEdge::setSlope(SUMOReal arg=0.021439)
MSEdge::setSlope(SUMOReal arg=-0.097145)
MSEdge::setSlope(SUMOReal arg=0.324403)
MSEdge::setSlope(SUMOReal arg=-0.028272)
MSEdge::setSlope(SUMOReal arg=0.025884)
MSEdge::setSlope(SUMOReal arg=-0.002294)
MSEdge::setSlope(SUMOReal arg=-0.037020)
MSEdge::setSlope(SUMOReal arg=0.002994)
MSEdge::setSlope(SUMOReal arg=0.754158)
MSEdge::setSlope(SUMOReal arg=0.090496)
MSEdge::setSlope(SUMOReal arg=0.339293)
MSEdge::setSlope(SUMOReal arg=0.094287)
MSEdge::setSlope(SUMOReal arg=-0.048874)
MSEdge::setSlope(SUMOReal arg=0.065665)
MSEdge::setSlope(SUMOReal arg=-0.030539)
MSEdge::setSlope(SUMOReal arg=0.026208)
MSEdge::setSlope(SUMOReal arg=0.002412)
MSEdge::setSlope(SUMOReal arg=-0.000622)
MSEdge::setSlope(SUMOReal arg=0.000622)
MSEdge::setSlope(SUMOReal arg=0.009852)
MSEdge::setSlope(SUMOReal arg=0.001960)
MSEdge::setSlope(SUMOReal arg=0.014906)
MSEdge::setSlope(SUMOReal arg=-0.005618)
MSEdge::setSlope(SUMOReal arg=-0.002365)
MSEdge::setSlope(SUMOReal arg=0.005579)
MSEdge::setSlope(SUMOReal arg=-0.009852)
MSEdge::setSlope(SUMOReal arg=-0.045638)
MSEdge::setSlope(SUMOReal arg=0.002135)
MSEdge::setSlope(SUMOReal arg=-0.002135)
MSEdge::setSlope(SUMOReal arg=-0.043664)
MSEdge::setSlope(SUMOReal arg=-0.002206)
MSEdge::setSlope(SUMOReal arg=0.003040)
MSEdge::setSlope(SUMOReal arg=0.005411)
MSEdge::setSlope(SUMOReal arg=-0.028564)
MSEdge::setSlope(SUMOReal arg=0.007092)
MSEdge::setSlope(SUMOReal arg=0.007092)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.028564)
MSEdge::setSlope(SUMOReal arg=-0.007092)
MSEdge::setSlope(SUMOReal arg=-0.000274)
MSEdge::setSlope(SUMOReal arg=-0.002133)
MSEdge::setSlope(SUMOReal arg=-0.007092)
MSEdge::setSlope(SUMOReal arg=-0.005745)
MSEdge::setSlope(SUMOReal arg=-0.003040)
MSEdge::setSlope(SUMOReal arg=0.003386)
MSEdge::setSlope(SUMOReal arg=-0.003386)
MSEdge::setSlope(SUMOReal arg=0.001622)
MSEdge::setSlope(SUMOReal arg=0.003017)
MSEdge::setSlope(SUMOReal arg=0.004307)
MSEdge::setSlope(SUMOReal arg=-0.003017)
MSEdge::setSlope(SUMOReal arg=0.007246)
MSEdge::setSlope(SUMOReal arg=0.003182)
MSEdge::setSlope(SUMOReal arg=-0.003859)
MSEdge::setSlope(SUMOReal arg=-0.005435)
MSEdge::setSlope(SUMOReal arg=0.003993)
MSEdge::setSlope(SUMOReal arg=0.003993)
MSEdge::setSlope(SUMOReal arg=-0.003993)
MSEdge::setSlope(SUMOReal arg=-0.003993)
MSEdge::setSlope(SUMOReal arg=0.005405)
MSEdge::setSlope(SUMOReal arg=0.005405)
MSEdge::setSlope(SUMOReal arg=0.002572)
MSEdge::setSlope(SUMOReal arg=-0.005405)
MSEdge::setSlope(SUMOReal arg=-0.005405)
MSEdge::setSlope(SUMOReal arg=0.003121)
MSEdge::setSlope(SUMOReal arg=-0.003529)
MSEdge::setSlope(SUMOReal arg=-0.003121)
MSEdge::setSlope(SUMOReal arg=0.028564)
MSEdge::setSlope(SUMOReal arg=0.028564)
MSEdge::setSlope(SUMOReal arg=0.000333)
MSEdge::setSlope(SUMOReal arg=0.009434)
MSEdge::setSlope(SUMOReal arg=-0.002973)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.004082)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.006757)
MSEdge::setSlope(SUMOReal arg=0.002801)
MSEdge::setSlope(SUMOReal arg=-0.006757)
MSEdge::setSlope(SUMOReal arg=-0.037783)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.004878)
MSEdge::setSlope(SUMOReal arg=0.004412)
MSEdge::setSlope(SUMOReal arg=-0.008620)
MSEdge::setSlope(SUMOReal arg=-0.005510)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001860)
MSEdge::setSlope(SUMOReal arg=-0.009878)
MSEdge::setSlope(SUMOReal arg=0.008649)
MSEdge::setSlope(SUMOReal arg=-0.006595)
MSEdge::setSlope(SUMOReal arg=0.088980)
MSEdge::setSlope(SUMOReal arg=0.052395)
MSEdge::setSlope(SUMOReal arg=-0.003270)
MSEdge::setSlope(SUMOReal arg=0.007290)
MSEdge::setSlope(SUMOReal arg=-0.007246)
MSEdge::setSlope(SUMOReal arg=-0.006971)
MSEdge::setSlope(SUMOReal arg=0.002989)
MSEdge::setSlope(SUMOReal arg=0.003472)
MSEdge::setSlope(SUMOReal arg=-0.003534)
MSEdge::setSlope(SUMOReal arg=0.002639)
MSEdge::setSlope(SUMOReal arg=-0.058756)
MSEdge::setSlope(SUMOReal arg=0.044151)
MSEdge::setSlope(SUMOReal arg=-0.037525)
MSEdge::setSlope(SUMOReal arg=0.000083)
MSEdge::setSlope(SUMOReal arg=-0.004663)
MSEdge::setSlope(SUMOReal arg=-0.000079)
MSEdge::setSlope(SUMOReal arg=0.006360)
MSEdge::setSlope(SUMOReal arg=-0.015479)
MSEdge::setSlope(SUMOReal arg=0.000434)
MSEdge::setSlope(SUMOReal arg=0.015479)
MSEdge::setSlope(SUMOReal arg=-0.000406)
MSEdge::setSlope(SUMOReal arg=0.001219)
MSEdge::setSlope(SUMOReal arg=0.000406)
MSEdge::setSlope(SUMOReal arg=0.003827)
MSEdge::setSlope(SUMOReal arg=-0.003825)
MSEdge::setSlope(SUMOReal arg=0.304511)
MSEdge::setSlope(SUMOReal arg=-0.008295)
MSEdge::setSlope(SUMOReal arg=-0.010285)
MSEdge::setSlope(SUMOReal arg=0.008295)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.007643)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.027505)
MSEdge::setSlope(SUMOReal arg=-0.027505)
MSEdge::setSlope(SUMOReal arg=0.037966)
MSEdge::setSlope(SUMOReal arg=-0.012019)
MSEdge::setSlope(SUMOReal arg=0.000766)
MSEdge::setSlope(SUMOReal arg=0.000451)
MSEdge::setSlope(SUMOReal arg=-0.000451)
MSEdge::setSlope(SUMOReal arg=0.005761)
MSEdge::setSlope(SUMOReal arg=0.002716)
MSEdge::setSlope(SUMOReal arg=-0.005761)
MSEdge::setSlope(SUMOReal arg=0.000699)
MSEdge::setSlope(SUMOReal arg=-0.037966)
MSEdge::setSlope(SUMOReal arg=-0.005837)
MSEdge::setSlope(SUMOReal arg=0.005837)
MSEdge::setSlope(SUMOReal arg=0.011319)
MSEdge::setSlope(SUMOReal arg=0.009791)
MSEdge::setSlope(SUMOReal arg=-0.011319)
MSEdge::setSlope(SUMOReal arg=0.380506)
MSEdge::setSlope(SUMOReal arg=-0.304511)
MSEdge::setSlope(SUMOReal arg=-0.008691)
MSEdge::setSlope(SUMOReal arg=-0.002596)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.380506)
MSEdge::setSlope(SUMOReal arg=-0.000655)
MSEdge::setSlope(SUMOReal arg=0.011557)
MSEdge::setSlope(SUMOReal arg=-0.011598)
MSEdge::setSlope(SUMOReal arg=-0.389193)
MSEdge::setSlope(SUMOReal arg=0.138968)
MSEdge::setSlope(SUMOReal arg=-0.034388)
MSEdge::setSlope(SUMOReal arg=0.034388)
MSEdge::setSlope(SUMOReal arg=0.041562)
MSEdge::setSlope(SUMOReal arg=0.118159)
MSEdge::setSlope(SUMOReal arg=0.010550)
MSEdge::setSlope(SUMOReal arg=-0.008048)
MSEdge::setSlope(SUMOReal arg=-0.001376)
MSEdge::setSlope(SUMOReal arg=-0.118159)
MSEdge::setSlope(SUMOReal arg=-0.428778)
MSEdge::setSlope(SUMOReal arg=0.064427)
MSEdge::setSlope(SUMOReal arg=0.047845)
MSEdge::setSlope(SUMOReal arg=-0.059245)
MSEdge::setSlope(SUMOReal arg=-0.152029)
MSEdge::setSlope(SUMOReal arg=0.152029)
MSEdge::setSlope(SUMOReal arg=-0.010550)
MSEdge::setSlope(SUMOReal arg=-0.030928)
MSEdge::setSlope(SUMOReal arg=0.008048)
MSEdge::setSlope(SUMOReal arg=0.001121)
MSEdge::setSlope(SUMOReal arg=-0.006010)
MSEdge::setSlope(SUMOReal arg=0.006010)
MSEdge::setSlope(SUMOReal arg=0.030928)
MSEdge::setSlope(SUMOReal arg=0.073679)
MSEdge::setSlope(SUMOReal arg=-0.047845)
MSEdge::setSlope(SUMOReal arg=-0.138968)
MSEdge::setSlope(SUMOReal arg=0.015383)
MSEdge::setSlope(SUMOReal arg=0.005389)
MSEdge::setSlope(SUMOReal arg=-0.015383)
MSEdge::setSlope(SUMOReal arg=-0.006285)
MSEdge::setSlope(SUMOReal arg=0.079632)
MSEdge::setSlope(SUMOReal arg=0.022204)
MSEdge::setSlope(SUMOReal arg=0.056543)
MSEdge::setSlope(SUMOReal arg=0.002738)
MSEdge::setSlope(SUMOReal arg=0.003463)
MSEdge::setSlope(SUMOReal arg=-0.001831)
MSEdge::setSlope(SUMOReal arg=0.012702)
MSEdge::setSlope(SUMOReal arg=0.026085)
MSEdge::setSlope(SUMOReal arg=-0.017598)
MSEdge::setSlope(SUMOReal arg=-0.012702)
MSEdge::setSlope(SUMOReal arg=0.039583)
MSEdge::setSlope(SUMOReal arg=0.068549)
MSEdge::setSlope(SUMOReal arg=0.008675)
MSEdge::setSlope(SUMOReal arg=0.027664)
MSEdge::setSlope(SUMOReal arg=0.001232)
MSEdge::setSlope(SUMOReal arg=-0.025205)
MSEdge::setSlope(SUMOReal arg=0.017877)
MSEdge::setSlope(SUMOReal arg=-0.010567)
MSEdge::setSlope(SUMOReal arg=0.001472)
MSEdge::setSlope(SUMOReal arg=-0.086029)
MSEdge::setSlope(SUMOReal arg=-0.001471)
MSEdge::setSlope(SUMOReal arg=-0.140375)
MSEdge::setSlope(SUMOReal arg=-0.276274)
MSEdge::setSlope(SUMOReal arg=0.140375)
MSEdge::setSlope(SUMOReal arg=0.013655)
MSEdge::setSlope(SUMOReal arg=-0.021449)
MSEdge::setSlope(SUMOReal arg=-0.051626)
MSEdge::setSlope(SUMOReal arg=0.030723)
MSEdge::setSlope(SUMOReal arg=-0.018866)
MSEdge::setSlope(SUMOReal arg=0.002945)
MSEdge::setSlope(SUMOReal arg=-0.002851)
MSEdge::setSlope(SUMOReal arg=-0.687124)
MSEdge::setSlope(SUMOReal arg=-0.010830)
MSEdge::setSlope(SUMOReal arg=0.011443)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002524)
MSEdge::setSlope(SUMOReal arg=0.005512)
MSEdge::setSlope(SUMOReal arg=0.002524)
MSEdge::setSlope(SUMOReal arg=-0.003210)
MSEdge::setSlope(SUMOReal arg=0.002166)
MSEdge::setSlope(SUMOReal arg=0.003210)
MSEdge::setSlope(SUMOReal arg=-0.002234)
MSEdge::setSlope(SUMOReal arg=-0.042295)
MSEdge::setSlope(SUMOReal arg=0.276274)
MSEdge::setSlope(SUMOReal arg=0.197396)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.008000)
MSEdge::setSlope(SUMOReal arg=-0.001782)
MSEdge::setSlope(SUMOReal arg=0.001782)
MSEdge::setSlope(SUMOReal arg=-0.005039)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000840)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.001761)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.046399)
MSEdge::setSlope(SUMOReal arg=0.014869)
MSEdge::setSlope(SUMOReal arg=-0.026746)
MSEdge::setSlope(SUMOReal arg=-0.036689)
MSEdge::setSlope(SUMOReal arg=-0.008373)
MSEdge::setSlope(SUMOReal arg=-0.002419)
MSEdge::setSlope(SUMOReal arg=0.008373)
MSEdge::setSlope(SUMOReal arg=0.002405)
MSEdge::setSlope(SUMOReal arg=-0.002405)
MSEdge::setSlope(SUMOReal arg=-0.000991)
MSEdge::setSlope(SUMOReal arg=-0.004243)
MSEdge::setSlope(SUMOReal arg=0.004243)
MSEdge::setSlope(SUMOReal arg=0.007808)
MSEdge::setSlope(SUMOReal arg=0.001960)
MSEdge::setSlope(SUMOReal arg=-0.001960)
MSEdge::setSlope(SUMOReal arg=-0.017974)
MSEdge::setSlope(SUMOReal arg=-0.001001)
MSEdge::setSlope(SUMOReal arg=0.017974)
MSEdge::setSlope(SUMOReal arg=-0.010674)
MSEdge::setSlope(SUMOReal arg=0.005039)
MSEdge::setSlope(SUMOReal arg=0.003333)
MSEdge::setSlope(SUMOReal arg=0.029694)
MSEdge::setSlope(SUMOReal arg=0.046167)
MSEdge::setSlope(SUMOReal arg=0.001209)
MSEdge::setSlope(SUMOReal arg=-0.049495)
MSEdge::setSlope(SUMOReal arg=0.002760)
MSEdge::setSlope(SUMOReal arg=-0.011338)
MSEdge::setSlope(SUMOReal arg=0.002047)
MSEdge::setSlope(SUMOReal arg=-0.001963)
MSEdge::setSlope(SUMOReal arg=0.008243)
MSEdge::setSlope(SUMOReal arg=0.111683)
MSEdge::setSlope(SUMOReal arg=0.001963)
MSEdge::setSlope(SUMOReal arg=0.000840)
MSEdge::setSlope(SUMOReal arg=-0.032955)
MSEdge::setSlope(SUMOReal arg=0.000317)
MSEdge::setSlope(SUMOReal arg=0.000991)
MSEdge::setSlope(SUMOReal arg=-0.006410)
MSEdge::setSlope(SUMOReal arg=0.003341)
MSEdge::setSlope(SUMOReal arg=0.006579)
MSEdge::setSlope(SUMOReal arg=-0.003490)
MSEdge::setSlope(SUMOReal arg=-0.007335)
MSEdge::setSlope(SUMOReal arg=0.002353)
MSEdge::setSlope(SUMOReal arg=0.003490)
MSEdge::setSlope(SUMOReal arg=0.007362)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001641)
MSEdge::setSlope(SUMOReal arg=-0.001874)
MSEdge::setSlope(SUMOReal arg=0.008490)
MSEdge::setSlope(SUMOReal arg=-0.019942)
MSEdge::setSlope(SUMOReal arg=-0.002197)
MSEdge::setSlope(SUMOReal arg=-1.014630)
MSEdge::setSlope(SUMOReal arg=-0.038159)
MSEdge::setSlope(SUMOReal arg=0.012317)
MSEdge::setSlope(SUMOReal arg=-0.030741)
MSEdge::setSlope(SUMOReal arg=0.030741)
MSEdge::setSlope(SUMOReal arg=0.002279)
MSEdge::setSlope(SUMOReal arg=0.017993)
MSEdge::setSlope(SUMOReal arg=-0.017993)
MSEdge::setSlope(SUMOReal arg=0.006207)
MSEdge::setSlope(SUMOReal arg=0.027226)
MSEdge::setSlope(SUMOReal arg=-0.027226)
MSEdge::setSlope(SUMOReal arg=-0.004275)
MSEdge::setSlope(SUMOReal arg=-0.035220)
MSEdge::setSlope(SUMOReal arg=-0.001381)
MSEdge::setSlope(SUMOReal arg=0.013897)
MSEdge::setSlope(SUMOReal arg=0.006985)
MSEdge::setSlope(SUMOReal arg=-0.006985)
MSEdge::setSlope(SUMOReal arg=0.011031)
MSEdge::setSlope(SUMOReal arg=-0.007823)
MSEdge::setSlope(SUMOReal arg=0.007823)
MSEdge::setSlope(SUMOReal arg=0.006544)
MSEdge::setSlope(SUMOReal arg=0.029169)
MSEdge::setSlope(SUMOReal arg=-0.029169)
MSEdge::setSlope(SUMOReal arg=0.020548)
MSEdge::setSlope(SUMOReal arg=0.012027)
MSEdge::setSlope(SUMOReal arg=-0.001390)
MSEdge::setSlope(SUMOReal arg=-0.010438)
MSEdge::setSlope(SUMOReal arg=0.069949)
MSEdge::setSlope(SUMOReal arg=-0.003737)
MSEdge::setSlope(SUMOReal arg=-0.000212)
MSEdge::setSlope(SUMOReal arg=0.035552)
MSEdge::setSlope(SUMOReal arg=-0.006708)
MSEdge::setSlope(SUMOReal arg=-0.035552)
MSEdge::setSlope(SUMOReal arg=0.001668)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.089314)
MSEdge::setSlope(SUMOReal arg=-0.017266)
MSEdge::setSlope(SUMOReal arg=-0.111991)
MSEdge::setSlope(SUMOReal arg=0.273659)
MSEdge::setSlope(SUMOReal arg=0.098709)
MSEdge::setSlope(SUMOReal arg=-0.098709)
MSEdge::setSlope(SUMOReal arg=0.029740)
MSEdge::setSlope(SUMOReal arg=-0.029740)
MSEdge::setSlope(SUMOReal arg=-0.007140)
MSEdge::setSlope(SUMOReal arg=0.017266)
MSEdge::setSlope(SUMOReal arg=-0.002250)
MSEdge::setSlope(SUMOReal arg=0.008080)
MSEdge::setSlope(SUMOReal arg=0.017948)
MSEdge::setSlope(SUMOReal arg=0.006797)
MSEdge::setSlope(SUMOReal arg=0.009759)
MSEdge::setSlope(SUMOReal arg=-0.009823)
MSEdge::setSlope(SUMOReal arg=-0.017948)
MSEdge::setSlope(SUMOReal arg=-0.007023)
MSEdge::setSlope(SUMOReal arg=-0.009244)
MSEdge::setSlope(SUMOReal arg=0.007023)
MSEdge::setSlope(SUMOReal arg=-0.006797)
MSEdge::setSlope(SUMOReal arg=-0.108551)
MSEdge::setSlope(SUMOReal arg=0.003862)
MSEdge::setSlope(SUMOReal arg=0.007269)
MSEdge::setSlope(SUMOReal arg=-0.002238)
MSEdge::setSlope(SUMOReal arg=-0.003859)
MSEdge::setSlope(SUMOReal arg=-0.057579)
MSEdge::setSlope(SUMOReal arg=-0.022947)
MSEdge::setSlope(SUMOReal arg=0.189348)
MSEdge::setSlope(SUMOReal arg=0.023860)
MSEdge::setSlope(SUMOReal arg=-0.030158)
MSEdge::setSlope(SUMOReal arg=0.004329)
MSEdge::setSlope(SUMOReal arg=0.003206)
MSEdge::setSlope(SUMOReal arg=0.070816)
MSEdge::setSlope(SUMOReal arg=-0.008876)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.008876)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001602)
MSEdge::setSlope(SUMOReal arg=0.002102)
MSEdge::setSlope(SUMOReal arg=-0.003094)
MSEdge::setSlope(SUMOReal arg=0.000895)
MSEdge::setSlope(SUMOReal arg=0.000777)
MSEdge::setSlope(SUMOReal arg=0.004577)
MSEdge::setSlope(SUMOReal arg=-0.002667)
MSEdge::setSlope(SUMOReal arg=-0.002238)
MSEdge::setSlope(SUMOReal arg=-0.001210)
MSEdge::setSlope(SUMOReal arg=0.002941)
MSEdge::setSlope(SUMOReal arg=-0.002941)
MSEdge::setSlope(SUMOReal arg=0.000924)
MSEdge::setSlope(SUMOReal arg=-0.002608)
MSEdge::setSlope(SUMOReal arg=-0.000924)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.001215)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.023525)
MSEdge::setSlope(SUMOReal arg=0.003606)
MSEdge::setSlope(SUMOReal arg=0.002986)
MSEdge::setSlope(SUMOReal arg=0.007772)
MSEdge::setSlope(SUMOReal arg=-0.001953)
MSEdge::setSlope(SUMOReal arg=0.001451)
MSEdge::setSlope(SUMOReal arg=-0.002316)
MSEdge::setSlope(SUMOReal arg=-0.001376)
MSEdge::setSlope(SUMOReal arg=0.009346)
MSEdge::setSlope(SUMOReal arg=-0.002205)
MSEdge::setSlope(SUMOReal arg=0.003901)
MSEdge::setSlope(SUMOReal arg=0.001561)
MSEdge::setSlope(SUMOReal arg=0.002359)
MSEdge::setSlope(SUMOReal arg=0.012531)
MSEdge::setSlope(SUMOReal arg=0.000437)
MSEdge::setSlope(SUMOReal arg=-0.004743)
MSEdge::setSlope(SUMOReal arg=0.037769)
MSEdge::setSlope(SUMOReal arg=0.000346)
MSEdge::setSlope(SUMOReal arg=-0.037769)
MSEdge::setSlope(SUMOReal arg=0.002128)
MSEdge::setSlope(SUMOReal arg=-0.001558)
MSEdge::setSlope(SUMOReal arg=0.107655)
MSEdge::setSlope(SUMOReal arg=0.007554)
MSEdge::setSlope(SUMOReal arg=-0.034034)
MSEdge::setSlope(SUMOReal arg=-0.007554)
MSEdge::setSlope(SUMOReal arg=-0.051850)
MSEdge::setSlope(SUMOReal arg=-0.009244)
MSEdge::setSlope(SUMOReal arg=-0.002907)
MSEdge::setSlope(SUMOReal arg=0.005913)
MSEdge::setSlope(SUMOReal arg=0.108551)
MSEdge::setSlope(SUMOReal arg=-0.005970)
MSEdge::setSlope(SUMOReal arg=0.006311)
MSEdge::setSlope(SUMOReal arg=-0.026895)
MSEdge::setSlope(SUMOReal arg=0.005479)
MSEdge::setSlope(SUMOReal arg=-0.019181)
MSEdge::setSlope(SUMOReal arg=-0.005468)
MSEdge::setSlope(SUMOReal arg=-0.007180)
MSEdge::setSlope(SUMOReal arg=0.017977)
MSEdge::setSlope(SUMOReal arg=-0.039372)
MSEdge::setSlope(SUMOReal arg=-0.017977)
MSEdge::setSlope(SUMOReal arg=0.012604)
MSEdge::setSlope(SUMOReal arg=-0.017317)
MSEdge::setSlope(SUMOReal arg=-0.012604)
MSEdge::setSlope(SUMOReal arg=-0.009396)
MSEdge::setSlope(SUMOReal arg=-0.026111)
MSEdge::setSlope(SUMOReal arg=0.026111)
MSEdge::setSlope(SUMOReal arg=0.002979)
MSEdge::setSlope(SUMOReal arg=0.012792)
MSEdge::setSlope(SUMOReal arg=0.002133)
MSEdge::setSlope(SUMOReal arg=-0.002979)
MSEdge::setSlope(SUMOReal arg=-0.000283)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.067150)
MSEdge::setSlope(SUMOReal arg=0.000283)
MSEdge::setSlope(SUMOReal arg=0.019325)
MSEdge::setSlope(SUMOReal arg=-0.039835)
MSEdge::setSlope(SUMOReal arg=-0.007740)
MSEdge::setSlope(SUMOReal arg=0.001443)
MSEdge::setSlope(SUMOReal arg=-0.001357)
MSEdge::setSlope(SUMOReal arg=-0.001584)
MSEdge::setSlope(SUMOReal arg=0.003178)
MSEdge::setSlope(SUMOReal arg=0.001401)
MSEdge::setSlope(SUMOReal arg=-0.004956)
MSEdge::setSlope(SUMOReal arg=0.002876)
MSEdge::setSlope(SUMOReal arg=0.004464)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.007874)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.008849)
MSEdge::setSlope(SUMOReal arg=0.002130)
MSEdge::setSlope(SUMOReal arg=-0.005464)
MSEdge::setSlope(SUMOReal arg=-0.002983)
MSEdge::setSlope(SUMOReal arg=0.003096)
MSEdge::setSlope(SUMOReal arg=-0.003876)
MSEdge::setSlope(SUMOReal arg=0.000611)
MSEdge::setSlope(SUMOReal arg=-0.000515)
MSEdge::setSlope(SUMOReal arg=0.004227)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.006341)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.005704)
MSEdge::setSlope(SUMOReal arg=0.006993)
MSEdge::setSlope(SUMOReal arg=-0.006525)
MSEdge::setSlope(SUMOReal arg=0.005355)
MSEdge::setSlope(SUMOReal arg=-0.005469)
MSEdge::setSlope(SUMOReal arg=-0.003710)
MSEdge::setSlope(SUMOReal arg=0.005156)
MSEdge::setSlope(SUMOReal arg=-0.006486)
MSEdge::setSlope(SUMOReal arg=-0.004132)
MSEdge::setSlope(SUMOReal arg=0.014492)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001873)
MSEdge::setSlope(SUMOReal arg=0.001735)
MSEdge::setSlope(SUMOReal arg=-0.007105)
MSEdge::setSlope(SUMOReal arg=0.003090)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002325)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.003247)
MSEdge::setSlope(SUMOReal arg=0.007233)
MSEdge::setSlope(SUMOReal arg=-0.014039)
MSEdge::setSlope(SUMOReal arg=-0.001886)
MSEdge::setSlope(SUMOReal arg=0.001868)
MSEdge::setSlope(SUMOReal arg=-0.004717)
MSEdge::setSlope(SUMOReal arg=0.010143)
MSEdge::setSlope(SUMOReal arg=-0.007874)
MSEdge::setSlope(SUMOReal arg=-0.008972)
MSEdge::setSlope(SUMOReal arg=0.002929)
MSEdge::setSlope(SUMOReal arg=-0.001625)
MSEdge::setSlope(SUMOReal arg=0.002527)
MSEdge::setSlope(SUMOReal arg=-0.088007)
MSEdge::setSlope(SUMOReal arg=-0.002741)
MSEdge::setSlope(SUMOReal arg=0.001239)
MSEdge::setSlope(SUMOReal arg=0.004944)
MSEdge::setSlope(SUMOReal arg=0.006735)
MSEdge::setSlope(SUMOReal arg=-0.001239)
MSEdge::setSlope(SUMOReal arg=-0.001415)
MSEdge::setSlope(SUMOReal arg=0.003084)
MSEdge::setSlope(SUMOReal arg=0.001605)
MSEdge::setSlope(SUMOReal arg=-0.002040)
MSEdge::setSlope(SUMOReal arg=0.001993)
MSEdge::setSlope(SUMOReal arg=-0.005025)
MSEdge::setSlope(SUMOReal arg=0.001838)
MSEdge::setSlope(SUMOReal arg=0.007559)
MSEdge::setSlope(SUMOReal arg=0.005968)
MSEdge::setSlope(SUMOReal arg=0.005378)
MSEdge::setSlope(SUMOReal arg=0.000461)
MSEdge::setSlope(SUMOReal arg=0.060042)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.075727)
MSEdge::setSlope(SUMOReal arg=-0.015787)
MSEdge::setSlope(SUMOReal arg=-0.006575)
MSEdge::setSlope(SUMOReal arg=0.006242)
MSEdge::setSlope(SUMOReal arg=-0.029991)
MSEdge::setSlope(SUMOReal arg=-0.009757)
MSEdge::setSlope(SUMOReal arg=0.054381)
MSEdge::setSlope(SUMOReal arg=0.009956)
MSEdge::setSlope(SUMOReal arg=0.045147)
MSEdge::setSlope(SUMOReal arg=0.003876)
MSEdge::setSlope(SUMOReal arg=0.002694)
MSEdge::setSlope(SUMOReal arg=-0.003089)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002112)
MSEdge::setSlope(SUMOReal arg=0.001387)
MSEdge::setSlope(SUMOReal arg=-0.000257)
MSEdge::setSlope(SUMOReal arg=0.000292)
MSEdge::setSlope(SUMOReal arg=-0.002676)
MSEdge::setSlope(SUMOReal arg=0.002864)
MSEdge::setSlope(SUMOReal arg=0.002676)
MSEdge::setSlope(SUMOReal arg=-0.006025)
MSEdge::setSlope(SUMOReal arg=-0.002786)
MSEdge::setSlope(SUMOReal arg=0.005989)
MSEdge::setSlope(SUMOReal arg=-0.010798)
MSEdge::setSlope(SUMOReal arg=-0.029449)
MSEdge::setSlope(SUMOReal arg=0.643501)
MSEdge::setSlope(SUMOReal arg=-0.024755)
MSEdge::setSlope(SUMOReal arg=0.023211)
MSEdge::setSlope(SUMOReal arg=-0.010810)
MSEdge::setSlope(SUMOReal arg=0.010810)
MSEdge::setSlope(SUMOReal arg=-0.003841)
MSEdge::setSlope(SUMOReal arg=0.019430)
MSEdge::setSlope(SUMOReal arg=0.023151)
MSEdge::setSlope(SUMOReal arg=-0.023634)
MSEdge::setSlope(SUMOReal arg=-0.055937)
MSEdge::setSlope(SUMOReal arg=-0.016920)
MSEdge::setSlope(SUMOReal arg=0.016920)
MSEdge::setSlope(SUMOReal arg=0.001622)
MSEdge::setSlope(SUMOReal arg=-0.002981)
MSEdge::setSlope(SUMOReal arg=-0.001622)
MSEdge::setSlope(SUMOReal arg=0.016375)
MSEdge::setSlope(SUMOReal arg=0.011203)
MSEdge::setSlope(SUMOReal arg=-0.011354)
MSEdge::setSlope(SUMOReal arg=0.037527)
MSEdge::setSlope(SUMOReal arg=0.180895)
MSEdge::setSlope(SUMOReal arg=0.079893)
MSEdge::setSlope(SUMOReal arg=0.039835)
MSEdge::setSlope(SUMOReal arg=-0.180895)
MSEdge::setSlope(SUMOReal arg=-0.107655)
MSEdge::setSlope(SUMOReal arg=0.002981)
MSEdge::setSlope(SUMOReal arg=0.008210)
MSEdge::setSlope(SUMOReal arg=0.047343)
MSEdge::setSlope(SUMOReal arg=-0.008210)
MSEdge::setSlope(SUMOReal arg=0.004228)
MSEdge::setSlope(SUMOReal arg=0.003841)
MSEdge::setSlope(SUMOReal arg=0.000777)
MSEdge::setSlope(SUMOReal arg=-0.003936)
MSEdge::setSlope(SUMOReal arg=0.004451)
MSEdge::setSlope(SUMOReal arg=0.008879)
MSEdge::setSlope(SUMOReal arg=-0.000768)
MSEdge::setSlope(SUMOReal arg=-0.002113)
MSEdge::setSlope(SUMOReal arg=0.003529)
MSEdge::setSlope(SUMOReal arg=-0.003494)
MSEdge::setSlope(SUMOReal arg=0.004033)
MSEdge::setSlope(SUMOReal arg=0.003060)
MSEdge::setSlope(SUMOReal arg=0.005435)
MSEdge::setSlope(SUMOReal arg=-0.004390)
MSEdge::setSlope(SUMOReal arg=0.004390)
MSEdge::setSlope(SUMOReal arg=-0.005540)
MSEdge::setSlope(SUMOReal arg=0.003016)
MSEdge::setSlope(SUMOReal arg=0.005540)
MSEdge::setSlope(SUMOReal arg=-0.003065)
MSEdge::setSlope(SUMOReal arg=-0.001766)
MSEdge::setSlope(SUMOReal arg=0.001766)
MSEdge::setSlope(SUMOReal arg=0.007918)
MSEdge::setSlope(SUMOReal arg=-0.002376)
MSEdge::setSlope(SUMOReal arg=-0.003016)
MSEdge::setSlope(SUMOReal arg=0.004379)
MSEdge::setSlope(SUMOReal arg=-0.005495)
MSEdge::setSlope(SUMOReal arg=-0.004379)
MSEdge::setSlope(SUMOReal arg=0.007699)
MSEdge::setSlope(SUMOReal arg=-0.010994)
MSEdge::setSlope(SUMOReal arg=-0.007699)
MSEdge::setSlope(SUMOReal arg=0.007180)
MSEdge::setSlope(SUMOReal arg=-0.014330)
MSEdge::setSlope(SUMOReal arg=0.039372)
MSEdge::setSlope(SUMOReal arg=0.003728)
MSEdge::setSlope(SUMOReal arg=-0.108038)
MSEdge::setSlope(SUMOReal arg=0.108038)
MSEdge::setSlope(SUMOReal arg=0.061650)
MSEdge::setSlope(SUMOReal arg=0.063816)
MSEdge::setSlope(SUMOReal arg=0.000232)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.004635)
MSEdge::setSlope(SUMOReal arg=0.009591)
MSEdge::setSlope(SUMOReal arg=0.017317)
MSEdge::setSlope(SUMOReal arg=-0.029782)
MSEdge::setSlope(SUMOReal arg=0.093685)
MSEdge::setSlope(SUMOReal arg=-0.093685)
MSEdge::setSlope(SUMOReal arg=-0.001485)
MSEdge::setSlope(SUMOReal arg=-0.021726)
MSEdge::setSlope(SUMOReal arg=0.028655)
MSEdge::setSlope(SUMOReal arg=-0.004796)
MSEdge::setSlope(SUMOReal arg=0.004796)
MSEdge::setSlope(SUMOReal arg=-0.005798)
MSEdge::setSlope(SUMOReal arg=0.006260)
MSEdge::setSlope(SUMOReal arg=0.003096)
MSEdge::setSlope(SUMOReal arg=-0.004697)
MSEdge::setSlope(SUMOReal arg=-0.005143)
MSEdge::setSlope(SUMOReal arg=-0.003886)
MSEdge::setSlope(SUMOReal arg=0.005223)
MSEdge::setSlope(SUMOReal arg=0.003185)
MSEdge::setSlope(SUMOReal arg=0.006920)
MSEdge::setSlope(SUMOReal arg=-0.037020)
MSEdge::setSlope(SUMOReal arg=0.004941)
MSEdge::setSlope(SUMOReal arg=-0.004262)
MSEdge::setSlope(SUMOReal arg=-0.005626)
MSEdge::setSlope(SUMOReal arg=0.004739)
MSEdge::setSlope(SUMOReal arg=0.005626)
MSEdge::setSlope(SUMOReal arg=-0.006920)
MSEdge::setSlope(SUMOReal arg=0.003886)
MSEdge::setSlope(SUMOReal arg=-0.005152)
MSEdge::setSlope(SUMOReal arg=-0.003757)
MSEdge::setSlope(SUMOReal arg=0.007576)
MSEdge::setSlope(SUMOReal arg=0.003340)
MSEdge::setSlope(SUMOReal arg=-0.005848)
MSEdge::setSlope(SUMOReal arg=0.007647)
MSEdge::setSlope(SUMOReal arg=-0.006260)
MSEdge::setSlope(SUMOReal arg=-0.007647)
MSEdge::setSlope(SUMOReal arg=0.002681)
MSEdge::setSlope(SUMOReal arg=-0.002681)
MSEdge::setSlope(SUMOReal arg=-0.006818)
MSEdge::setSlope(SUMOReal arg=0.006818)
MSEdge::setSlope(SUMOReal arg=-0.009367)
MSEdge::setSlope(SUMOReal arg=-0.003340)
MSEdge::setSlope(SUMOReal arg=0.006486)
MSEdge::setSlope(SUMOReal arg=-0.002451)
MSEdge::setSlope(SUMOReal arg=-0.004211)
MSEdge::setSlope(SUMOReal arg=-0.013888)
MSEdge::setSlope(SUMOReal arg=0.001572)
MSEdge::setSlope(SUMOReal arg=-0.004756)
MSEdge::setSlope(SUMOReal arg=0.002502)
MSEdge::setSlope(SUMOReal arg=0.010457)
MSEdge::setSlope(SUMOReal arg=0.013888)
MSEdge::setSlope(SUMOReal arg=-0.002414)
MSEdge::setSlope(SUMOReal arg=-0.002016)
MSEdge::setSlope(SUMOReal arg=-0.116383)
MSEdge::setSlope(SUMOReal arg=0.021726)
MSEdge::setSlope(SUMOReal arg=-0.012296)
MSEdge::setSlope(SUMOReal arg=-0.033561)
MSEdge::setSlope(SUMOReal arg=0.002376)
MSEdge::setSlope(SUMOReal arg=0.005495)
MSEdge::setSlope(SUMOReal arg=-0.005747)
MSEdge::setSlope(SUMOReal arg=0.002111)
MSEdge::setSlope(SUMOReal arg=0.005747)
MSEdge::setSlope(SUMOReal arg=0.010994)
MSEdge::setSlope(SUMOReal arg=-0.000606)
MSEdge::setSlope(SUMOReal arg=-0.021680)
MSEdge::setSlope(SUMOReal arg=0.000606)
MSEdge::setSlope(SUMOReal arg=0.014330)
MSEdge::setSlope(SUMOReal arg=0.026895)
MSEdge::setSlope(SUMOReal arg=-0.007918)
MSEdge::setSlope(SUMOReal arg=0.032732)
MSEdge::setSlope(SUMOReal arg=-0.012457)
MSEdge::setSlope(SUMOReal arg=0.013990)
MSEdge::setSlope(SUMOReal arg=-0.000269)
MSEdge::setSlope(SUMOReal arg=0.296459)
MSEdge::setSlope(SUMOReal arg=0.071598)
MSEdge::setSlope(SUMOReal arg=-0.228125)
MSEdge::setSlope(SUMOReal arg=0.020287)
MSEdge::setSlope(SUMOReal arg=0.048593)
MSEdge::setSlope(SUMOReal arg=-0.273009)
MSEdge::setSlope(SUMOReal arg=-0.032732)
MSEdge::setSlope(SUMOReal arg=0.014885)
MSEdge::setSlope(SUMOReal arg=0.754873)
MSEdge::setSlope(SUMOReal arg=-0.046646)
MSEdge::setSlope(SUMOReal arg=-0.130566)
MSEdge::setSlope(SUMOReal arg=0.044415)
MSEdge::setSlope(SUMOReal arg=0.964413)
MSEdge::setSlope(SUMOReal arg=-0.062739)
MSEdge::setSlope(SUMOReal arg=0.179853)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001375)
MSEdge::setSlope(SUMOReal arg=-0.000422)
MSEdge::setSlope(SUMOReal arg=-0.003504)
MSEdge::setSlope(SUMOReal arg=0.000439)
MSEdge::setSlope(SUMOReal arg=0.001496)
MSEdge::setSlope(SUMOReal arg=-0.011405)
MSEdge::setSlope(SUMOReal arg=-0.346136)
MSEdge::setSlope(SUMOReal arg=0.030525)
MSEdge::setSlope(SUMOReal arg=-0.008410)
MSEdge::setSlope(SUMOReal arg=0.055051)
MSEdge::setSlope(SUMOReal arg=-0.004925)
MSEdge::setSlope(SUMOReal arg=0.004040)
MSEdge::setSlope(SUMOReal arg=0.008512)
MSEdge::setSlope(SUMOReal arg=0.003148)
MSEdge::setSlope(SUMOReal arg=-0.004047)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002415)
MSEdge::setSlope(SUMOReal arg=-0.362926)
MSEdge::setSlope(SUMOReal arg=0.023591)
MSEdge::setSlope(SUMOReal arg=-0.022782)
MSEdge::setSlope(SUMOReal arg=-0.031021)
MSEdge::setSlope(SUMOReal arg=-0.077898)
MSEdge::setSlope(SUMOReal arg=-0.001649)
MSEdge::setSlope(SUMOReal arg=-0.001660)
MSEdge::setSlope(SUMOReal arg=0.000687)
MSEdge::setSlope(SUMOReal arg=0.001660)
MSEdge::setSlope(SUMOReal arg=0.001050)
MSEdge::setSlope(SUMOReal arg=0.052282)
MSEdge::setSlope(SUMOReal arg=-0.000187)
MSEdge::setSlope(SUMOReal arg=-0.052282)
MSEdge::setSlope(SUMOReal arg=-0.006767)
MSEdge::setSlope(SUMOReal arg=0.006775)
MSEdge::setSlope(SUMOReal arg=0.015782)
MSEdge::setSlope(SUMOReal arg=0.030832)
MSEdge::setSlope(SUMOReal arg=0.018811)
MSEdge::setSlope(SUMOReal arg=0.001906)
MSEdge::setSlope(SUMOReal arg=0.001627)
MSEdge::setSlope(SUMOReal arg=-0.026085)
MSEdge::setSlope(SUMOReal arg=-0.008320)
MSEdge::setSlope(SUMOReal arg=-0.001361)
MSEdge::setSlope(SUMOReal arg=-0.016848)
MSEdge::setSlope(SUMOReal arg=-0.015782)
MSEdge::setSlope(SUMOReal arg=-0.005072)
MSEdge::setSlope(SUMOReal arg=-0.007373)
MSEdge::setSlope(SUMOReal arg=0.005072)
MSEdge::setSlope(SUMOReal arg=-0.010946)
MSEdge::setSlope(SUMOReal arg=0.001294)
MSEdge::setSlope(SUMOReal arg=0.010946)
MSEdge::setSlope(SUMOReal arg=0.017598)
MSEdge::setSlope(SUMOReal arg=-0.005512)
MSEdge::setSlope(SUMOReal arg=-0.008460)
MSEdge::setSlope(SUMOReal arg=0.003714)
MSEdge::setSlope(SUMOReal arg=0.008460)
MSEdge::setSlope(SUMOReal arg=0.035763)
MSEdge::setSlope(SUMOReal arg=0.006545)
MSEdge::setSlope(SUMOReal arg=0.000272)
MSEdge::setSlope(SUMOReal arg=0.008721)
MSEdge::setSlope(SUMOReal arg=-0.006545)
MSEdge::setSlope(SUMOReal arg=-0.008721)
MSEdge::setSlope(SUMOReal arg=0.002979)
MSEdge::setSlope(SUMOReal arg=-0.002979)
MSEdge::setSlope(SUMOReal arg=0.078260)
MSEdge::setSlope(SUMOReal arg=-0.002589)
MSEdge::setSlope(SUMOReal arg=0.002589)
MSEdge::setSlope(SUMOReal arg=0.006818)
MSEdge::setSlope(SUMOReal arg=0.002034)
MSEdge::setSlope(SUMOReal arg=-0.022044)
MSEdge::setSlope(SUMOReal arg=-0.005332)
MSEdge::setSlope(SUMOReal arg=0.005332)
MSEdge::setSlope(SUMOReal arg=-0.003714)
MSEdge::setSlope(SUMOReal arg=-0.005427)
MSEdge::setSlope(SUMOReal arg=0.005427)
MSEdge::setSlope(SUMOReal arg=0.020445)
MSEdge::setSlope(SUMOReal arg=0.017094)
MSEdge::setSlope(SUMOReal arg=-0.018506)
MSEdge::setSlope(SUMOReal arg=-0.078260)
MSEdge::setSlope(SUMOReal arg=-0.018128)
MSEdge::setSlope(SUMOReal arg=0.018128)
MSEdge::setSlope(SUMOReal arg=-0.020445)
MSEdge::setSlope(SUMOReal arg=-0.035763)
MSEdge::setSlope(SUMOReal arg=0.000556)
MSEdge::setSlope(SUMOReal arg=0.000968)
MSEdge::setSlope(SUMOReal arg=0.003445)
MSEdge::setSlope(SUMOReal arg=-0.003498)
MSEdge::setSlope(SUMOReal arg=-0.002396)
MSEdge::setSlope(SUMOReal arg=0.002479)
MSEdge::setSlope(SUMOReal arg=-0.001700)
MSEdge::setSlope(SUMOReal arg=-0.007886)
MSEdge::setSlope(SUMOReal arg=-0.000501)
MSEdge::setSlope(SUMOReal arg=-0.009706)
MSEdge::setSlope(SUMOReal arg=-0.008456)
MSEdge::setSlope(SUMOReal arg=0.000968)
MSEdge::setSlope(SUMOReal arg=0.004161)
MSEdge::setSlope(SUMOReal arg=0.002522)
MSEdge::setSlope(SUMOReal arg=-0.004673)
MSEdge::setSlope(SUMOReal arg=-0.002506)
MSEdge::setSlope(SUMOReal arg=0.002177)
MSEdge::setSlope(SUMOReal arg=-0.011363)
MSEdge::setSlope(SUMOReal arg=0.002281)
MSEdge::setSlope(SUMOReal arg=0.001129)
MSEdge::setSlope(SUMOReal arg=-0.000812)
MSEdge::setSlope(SUMOReal arg=-0.004463)
MSEdge::setSlope(SUMOReal arg=-0.004463)
MSEdge::setSlope(SUMOReal arg=0.005048)
MSEdge::setSlope(SUMOReal arg=0.004463)
MSEdge::setSlope(SUMOReal arg=-0.002463)
MSEdge::setSlope(SUMOReal arg=0.003876)
MSEdge::setSlope(SUMOReal arg=0.004463)
MSEdge::setSlope(SUMOReal arg=-0.003325)
MSEdge::setSlope(SUMOReal arg=-0.003367)
MSEdge::setSlope(SUMOReal arg=-0.006289)
MSEdge::setSlope(SUMOReal arg=-0.009461)
MSEdge::setSlope(SUMOReal arg=-0.003620)
MSEdge::setSlope(SUMOReal arg=-0.023805)
MSEdge::setSlope(SUMOReal arg=0.003861)
MSEdge::setSlope(SUMOReal arg=-0.005542)
MSEdge::setSlope(SUMOReal arg=0.004508)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.004508)
MSEdge::setSlope(SUMOReal arg=0.004236)
MSEdge::setSlope(SUMOReal arg=0.001447)
MSEdge::setSlope(SUMOReal arg=-0.001447)
MSEdge::setSlope(SUMOReal arg=0.002244)
MSEdge::setSlope(SUMOReal arg=-0.000477)
MSEdge::setSlope(SUMOReal arg=0.000454)
MSEdge::setSlope(SUMOReal arg=-0.003545)
MSEdge::setSlope(SUMOReal arg=-0.017824)
MSEdge::setSlope(SUMOReal arg=0.012596)
MSEdge::setSlope(SUMOReal arg=-0.056279)
MSEdge::setSlope(SUMOReal arg=0.006304)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002467)
MSEdge::setSlope(SUMOReal arg=0.001618)
MSEdge::setSlope(SUMOReal arg=0.003050)
MSEdge::setSlope(SUMOReal arg=-0.005873)
MSEdge::setSlope(SUMOReal arg=-0.003045)
MSEdge::setSlope(SUMOReal arg=0.002974)
MSEdge::setSlope(SUMOReal arg=0.001412)
MSEdge::setSlope(SUMOReal arg=-0.001422)
MSEdge::setSlope(SUMOReal arg=-0.001412)
MSEdge::setSlope(SUMOReal arg=0.002860)
MSEdge::setSlope(SUMOReal arg=0.001569)
MSEdge::setSlope(SUMOReal arg=-0.001569)
MSEdge::setSlope(SUMOReal arg=0.028564)
MSEdge::setSlope(SUMOReal arg=-0.002500)
MSEdge::setSlope(SUMOReal arg=0.002500)
MSEdge::setSlope(SUMOReal arg=-0.003927)
MSEdge::setSlope(SUMOReal arg=0.001378)
MSEdge::setSlope(SUMOReal arg=0.005873)
MSEdge::setSlope(SUMOReal arg=-0.008203)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.008203)
MSEdge::setSlope(SUMOReal arg=-0.001053)
MSEdge::setSlope(SUMOReal arg=0.042013)
MSEdge::setSlope(SUMOReal arg=0.005800)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000895)
MSEdge::setSlope(SUMOReal arg=0.004601)
MSEdge::setSlope(SUMOReal arg=-0.004161)
MSEdge::setSlope(SUMOReal arg=-0.002398)
MSEdge::setSlope(SUMOReal arg=0.004673)
MSEdge::setSlope(SUMOReal arg=-0.002974)
MSEdge::setSlope(SUMOReal arg=-0.001008)
MSEdge::setSlope(SUMOReal arg=-0.001385)
MSEdge::setSlope(SUMOReal arg=0.000838)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002864)
MSEdge::setSlope(SUMOReal arg=0.003732)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000293)
MSEdge::setSlope(SUMOReal arg=0.000251)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.001817)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.006274)
MSEdge::setSlope(SUMOReal arg=0.020777)
MSEdge::setSlope(SUMOReal arg=-0.008512)
MSEdge::setSlope(SUMOReal arg=-0.004269)
MSEdge::setSlope(SUMOReal arg=0.010759)
MSEdge::setSlope(SUMOReal arg=0.013230)
MSEdge::setSlope(SUMOReal arg=0.034005)
MSEdge::setSlope(SUMOReal arg=-0.000662)
MSEdge::setSlope(SUMOReal arg=-0.010767)
MSEdge::setSlope(SUMOReal arg=0.002278)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002951)
MSEdge::setSlope(SUMOReal arg=0.005097)
MSEdge::setSlope(SUMOReal arg=-0.000847)
MSEdge::setSlope(SUMOReal arg=0.006395)
MSEdge::setSlope(SUMOReal arg=0.004925)
MSEdge::setSlope(SUMOReal arg=0.003731)
MSEdge::setSlope(SUMOReal arg=0.013392)
MSEdge::setSlope(SUMOReal arg=-0.013392)
MSEdge::setSlope(SUMOReal arg=0.008928)
MSEdge::setSlope(SUMOReal arg=0.008928)
MSEdge::setSlope(SUMOReal arg=-0.000949)
MSEdge::setSlope(SUMOReal arg=-0.008928)
MSEdge::setSlope(SUMOReal arg=0.001390)
MSEdge::setSlope(SUMOReal arg=0.006349)
MSEdge::setSlope(SUMOReal arg=-0.008928)
MSEdge::setSlope(SUMOReal arg=-0.006349)
MSEdge::setSlope(SUMOReal arg=0.004942)
MSEdge::setSlope(SUMOReal arg=-0.002803)
MSEdge::setSlope(SUMOReal arg=-0.006795)
MSEdge::setSlope(SUMOReal arg=0.037020)
MSEdge::setSlope(SUMOReal arg=-0.007402)
MSEdge::setSlope(SUMOReal arg=-0.004942)
MSEdge::setSlope(SUMOReal arg=-0.003152)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002465)
MSEdge::setSlope(SUMOReal arg=0.007326)
MSEdge::setSlope(SUMOReal arg=-0.002452)
MSEdge::setSlope(SUMOReal arg=-0.010738)
MSEdge::setSlope(SUMOReal arg=0.002766)
MSEdge::setSlope(SUMOReal arg=0.007986)
MSEdge::setSlope(SUMOReal arg=-0.002766)
MSEdge::setSlope(SUMOReal arg=0.004211)
MSEdge::setSlope(SUMOReal arg=0.013119)
MSEdge::setSlope(SUMOReal arg=-0.004234)
MSEdge::setSlope(SUMOReal arg=0.001958)
MSEdge::setSlope(SUMOReal arg=0.002314)
MSEdge::setSlope(SUMOReal arg=-0.006896)
MSEdge::setSlope(SUMOReal arg=-0.013119)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.007993)
MSEdge::setSlope(SUMOReal arg=0.003567)
MSEdge::setSlope(SUMOReal arg=-0.004383)
MSEdge::setSlope(SUMOReal arg=-0.003567)
MSEdge::setSlope(SUMOReal arg=0.001418)
MSEdge::setSlope(SUMOReal arg=0.002405)
MSEdge::setSlope(SUMOReal arg=-0.002814)
MSEdge::setSlope(SUMOReal arg=0.004005)
MSEdge::setSlope(SUMOReal arg=-0.001615)
MSEdge::setSlope(SUMOReal arg=-0.001106)
MSEdge::setSlope(SUMOReal arg=0.024995)
MSEdge::setSlope(SUMOReal arg=0.001025)
MSEdge::setSlope(SUMOReal arg=-0.028564)
MSEdge::setSlope(SUMOReal arg=0.004474)
MSEdge::setSlope(SUMOReal arg=-0.001653)
MSEdge::setSlope(SUMOReal arg=0.002849)
MSEdge::setSlope(SUMOReal arg=0.001653)
MSEdge::setSlope(SUMOReal arg=-0.024995)
MSEdge::setSlope(SUMOReal arg=0.007143)
MSEdge::setSlope(SUMOReal arg=0.004038)
MSEdge::setSlope(SUMOReal arg=-0.003151)
MSEdge::setSlope(SUMOReal arg=-0.004474)
MSEdge::setSlope(SUMOReal arg=-0.002849)
MSEdge::setSlope(SUMOReal arg=0.001831)
MSEdge::setSlope(SUMOReal arg=-0.004223)
MSEdge::setSlope(SUMOReal arg=0.002224)
MSEdge::setSlope(SUMOReal arg=0.005446)
MSEdge::setSlope(SUMOReal arg=-0.002244)
MSEdge::setSlope(SUMOReal arg=0.004223)
MSEdge::setSlope(SUMOReal arg=-0.005446)
MSEdge::setSlope(SUMOReal arg=-0.000472)
MSEdge::setSlope(SUMOReal arg=0.000415)
MSEdge::setSlope(SUMOReal arg=0.088007)
MSEdge::setSlope(SUMOReal arg=-0.002224)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002995)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.004082)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.004415)
MSEdge::setSlope(SUMOReal arg=0.003098)
MSEdge::setSlope(SUMOReal arg=-0.011210)
MSEdge::setSlope(SUMOReal arg=0.003297)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.007407)
MSEdge::setSlope(SUMOReal arg=0.004869)
MSEdge::setSlope(SUMOReal arg=-0.003643)
MSEdge::setSlope(SUMOReal arg=0.002803)
MSEdge::setSlope(SUMOReal arg=-0.001189)
MSEdge::setSlope(SUMOReal arg=0.002291)
MSEdge::setSlope(SUMOReal arg=-0.001848)
MSEdge::setSlope(SUMOReal arg=-0.011494)
MSEdge::setSlope(SUMOReal arg=0.002750)
MSEdge::setSlope(SUMOReal arg=-0.003731)
MSEdge::setSlope(SUMOReal arg=-0.002673)
MSEdge::setSlope(SUMOReal arg=-0.037020)
MSEdge::setSlope(SUMOReal arg=0.004742)
MSEdge::setSlope(SUMOReal arg=0.037020)
MSEdge::setSlope(SUMOReal arg=-0.016128)
MSEdge::setSlope(SUMOReal arg=0.002014)
MSEdge::setSlope(SUMOReal arg=-0.005411)
MSEdge::setSlope(SUMOReal arg=0.016128)
MSEdge::setSlope(SUMOReal arg=-0.002143)
MSEdge::setSlope(SUMOReal arg=-0.006265)
MSEdge::setSlope(SUMOReal arg=0.002143)
MSEdge::setSlope(SUMOReal arg=0.011494)
MSEdge::setSlope(SUMOReal arg=-0.002014)
MSEdge::setSlope(SUMOReal arg=-0.001807)
MSEdge::setSlope(SUMOReal arg=0.003038)
MSEdge::setSlope(SUMOReal arg=-0.007326)
MSEdge::setSlope(SUMOReal arg=0.009367)
MSEdge::setSlope(SUMOReal arg=0.001706)
MSEdge::setSlope(SUMOReal arg=-0.003831)
MSEdge::setSlope(SUMOReal arg=-0.014759)
MSEdge::setSlope(SUMOReal arg=0.006795)
MSEdge::setSlope(SUMOReal arg=0.004953)
MSEdge::setSlope(SUMOReal arg=-0.003228)
MSEdge::setSlope(SUMOReal arg=0.014759)
MSEdge::setSlope(SUMOReal arg=0.006037)
MSEdge::setSlope(SUMOReal arg=-0.001757)
MSEdge::setSlope(SUMOReal arg=0.001513)
MSEdge::setSlope(SUMOReal arg=0.007207)
MSEdge::setSlope(SUMOReal arg=-0.002358)
MSEdge::setSlope(SUMOReal arg=-0.005359)
MSEdge::setSlope(SUMOReal arg=-0.004016)
MSEdge::setSlope(SUMOReal arg=0.042406)
MSEdge::setSlope(SUMOReal arg=0.005544)
MSEdge::setSlope(SUMOReal arg=0.005296)
MSEdge::setSlope(SUMOReal arg=0.005308)
MSEdge::setSlope(SUMOReal arg=-0.059153)
MSEdge::setSlope(SUMOReal arg=-0.006813)
MSEdge::setSlope(SUMOReal arg=-0.003791)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.005096)
MSEdge::setSlope(SUMOReal arg=0.002580)
MSEdge::setSlope(SUMOReal arg=0.045467)
MSEdge::setSlope(SUMOReal arg=-0.643501)
MSEdge::setSlope(SUMOReal arg=-0.029418)
MSEdge::setSlope(SUMOReal arg=-0.045799)
MSEdge::setSlope(SUMOReal arg=-0.005800)
MSEdge::setSlope(SUMOReal arg=0.002551)
MSEdge::setSlope(SUMOReal arg=-0.014651)
MSEdge::setSlope(SUMOReal arg=-0.002498)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.056279)
MSEdge::setSlope(SUMOReal arg=0.012330)
MSEdge::setSlope(SUMOReal arg=0.008048)
MSEdge::setSlope(SUMOReal arg=0.001053)
MSEdge::setSlope(SUMOReal arg=-0.002546)
MSEdge::setSlope(SUMOReal arg=-0.002180)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000397)
MSEdge::setSlope(SUMOReal arg=-0.000383)
MSEdge::setSlope(SUMOReal arg=0.002489)
MSEdge::setSlope(SUMOReal arg=0.000372)
MSEdge::setSlope(SUMOReal arg=-0.000332)
MSEdge::setSlope(SUMOReal arg=-0.000382)
MSEdge::setSlope(SUMOReal arg=0.002183)
MSEdge::setSlope(SUMOReal arg=0.000368)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000615)
MSEdge::setSlope(SUMOReal arg=0.000847)
MSEdge::setSlope(SUMOReal arg=0.003262)
MSEdge::setSlope(SUMOReal arg=-0.003262)
MSEdge::setSlope(SUMOReal arg=-0.000895)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000056)
MSEdge::setSlope(SUMOReal arg=0.002554)
MSEdge::setSlope(SUMOReal arg=0.000054)
MSEdge::setSlope(SUMOReal arg=-0.000835)
MSEdge::setSlope(SUMOReal arg=-0.008152)
MSEdge::setSlope(SUMOReal arg=0.000336)
MSEdge::setSlope(SUMOReal arg=0.002726)
MSEdge::setSlope(SUMOReal arg=0.004594)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002726)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.003511)
MSEdge::setSlope(SUMOReal arg=-0.003511)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000835)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.004594)
MSEdge::setSlope(SUMOReal arg=0.002251)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000673)
MSEdge::setSlope(SUMOReal arg=0.001453)
MSEdge::setSlope(SUMOReal arg=0.002282)
MSEdge::setSlope(SUMOReal arg=-0.001250)
MSEdge::setSlope(SUMOReal arg=-0.002268)
MSEdge::setSlope(SUMOReal arg=-0.006031)
MSEdge::setSlope(SUMOReal arg=-0.009623)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.009431)
MSEdge::setSlope(SUMOReal arg=-0.001534)
MSEdge::setSlope(SUMOReal arg=-0.004687)
MSEdge::setSlope(SUMOReal arg=-0.003198)
MSEdge::setSlope(SUMOReal arg=-0.010980)
MSEdge::setSlope(SUMOReal arg=-0.017611)
MSEdge::setSlope(SUMOReal arg=-0.024175)
MSEdge::setSlope(SUMOReal arg=-0.008684)
MSEdge::setSlope(SUMOReal arg=-0.009423)
MSEdge::setSlope(SUMOReal arg=0.008571)
MSEdge::setSlope(SUMOReal arg=0.019000)
MSEdge::setSlope(SUMOReal arg=0.025714)
MSEdge::setSlope(SUMOReal arg=-0.025714)
MSEdge::setSlope(SUMOReal arg=-0.052583)
MSEdge::setSlope(SUMOReal arg=-0.014798)
MSEdge::setSlope(SUMOReal arg=0.329806)
MSEdge::setSlope(SUMOReal arg=-0.047343)
MSEdge::setSlope(SUMOReal arg=-0.016421)
MSEdge::setSlope(SUMOReal arg=-0.003549)
MSEdge::setSlope(SUMOReal arg=-0.004251)
MSEdge::setSlope(SUMOReal arg=0.002415)
MSEdge::setSlope(SUMOReal arg=-0.009091)
MSEdge::setSlope(SUMOReal arg=0.004832)
MSEdge::setSlope(SUMOReal arg=-0.002427)
MSEdge::setSlope(SUMOReal arg=-0.025247)
MSEdge::setSlope(SUMOReal arg=0.002560)
MSEdge::setSlope(SUMOReal arg=-0.010343)
MSEdge::setSlope(SUMOReal arg=-0.002560)
MSEdge::setSlope(SUMOReal arg=0.018795)
MSEdge::setSlope(SUMOReal arg=-0.018795)
MSEdge::setSlope(SUMOReal arg=0.011562)
MSEdge::setSlope(SUMOReal arg=0.016598)
MSEdge::setSlope(SUMOReal arg=-0.001468)
MSEdge::setSlope(SUMOReal arg=0.007874)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.001949)
MSEdge::setSlope(SUMOReal arg=0.021854)
MSEdge::setSlope(SUMOReal arg=-0.004435)
MSEdge::setSlope(SUMOReal arg=-0.044415)
MSEdge::setSlope(SUMOReal arg=0.001012)
MSEdge::setSlope(SUMOReal arg=-0.000919)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001935)
MSEdge::setSlope(SUMOReal arg=-0.003178)
MSEdge::setSlope(SUMOReal arg=0.011904)
MSEdge::setSlope(SUMOReal arg=-0.002876)
MSEdge::setSlope(SUMOReal arg=-0.021736)
MSEdge::setSlope(SUMOReal arg=0.003549)
MSEdge::setSlope(SUMOReal arg=0.044223)
MSEdge::setSlope(SUMOReal arg=0.115135)
MSEdge::setSlope(SUMOReal arg=-0.115135)
MSEdge::setSlope(SUMOReal arg=-0.037527)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.052313)
MSEdge::setSlope(SUMOReal arg=0.062419)
MSEdge::setSlope(SUMOReal arg=-0.054002)
MSEdge::setSlope(SUMOReal arg=0.002625)
MSEdge::setSlope(SUMOReal arg=0.020308)
MSEdge::setSlope(SUMOReal arg=-0.006480)
MSEdge::setSlope(SUMOReal arg=0.132834)
MSEdge::setSlope(SUMOReal arg=-0.219131)
MSEdge::setSlope(SUMOReal arg=0.029157)
MSEdge::setSlope(SUMOReal arg=-0.029827)
MSEdge::setSlope(SUMOReal arg=-0.394127)
MSEdge::setSlope(SUMOReal arg=-0.015728)
MSEdge::setSlope(SUMOReal arg=-0.026538)
MSEdge::setSlope(SUMOReal arg=0.008620)
MSEdge::setSlope(SUMOReal arg=0.076188)
MSEdge::setSlope(SUMOReal arg=-0.066804)
MSEdge::setSlope(SUMOReal arg=0.105308)
MSEdge::setSlope(SUMOReal arg=-0.009356)
MSEdge::setSlope(SUMOReal arg=0.008729)
MSEdge::setSlope(SUMOReal arg=-0.049958)
MSEdge::setSlope(SUMOReal arg=-0.034213)
MSEdge::setSlope(SUMOReal arg=-0.016527)
MSEdge::setSlope(SUMOReal arg=0.049958)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.033717)
MSEdge::setSlope(SUMOReal arg=-0.034870)
MSEdge::setSlope(SUMOReal arg=-0.389918)
MSEdge::setSlope(SUMOReal arg=-0.996491)
MSEdge::setSlope(SUMOReal arg=-0.009233)
MSEdge::setSlope(SUMOReal arg=-0.002624)
MSEdge::setSlope(SUMOReal arg=0.007968)
MSEdge::setSlope(SUMOReal arg=-0.000558)
MSEdge::setSlope(SUMOReal arg=0.000558)
MSEdge::setSlope(SUMOReal arg=0.115963)
MSEdge::setSlope(SUMOReal arg=0.263819)
MSEdge::setSlope(SUMOReal arg=-0.029647)
MSEdge::setSlope(SUMOReal arg=-0.019044)
MSEdge::setSlope(SUMOReal arg=0.011037)
MSEdge::setSlope(SUMOReal arg=-0.001698)
MSEdge::setSlope(SUMOReal arg=-0.012911)
MSEdge::setSlope(SUMOReal arg=-0.037253)
MSEdge::setSlope(SUMOReal arg=-0.001484)
MSEdge::setSlope(SUMOReal arg=0.001501)
MSEdge::setSlope(SUMOReal arg=-0.007401)
MSEdge::setSlope(SUMOReal arg=-0.001501)
MSEdge::setSlope(SUMOReal arg=0.001860)
MSEdge::setSlope(SUMOReal arg=0.009878)
MSEdge::setSlope(SUMOReal arg=-0.009189)
MSEdge::setSlope(SUMOReal arg=0.035928)
MSEdge::setSlope(SUMOReal arg=-0.004931)
MSEdge::setSlope(SUMOReal arg=0.005376)
MSEdge::setSlope(SUMOReal arg=-0.002517)
MSEdge::setSlope(SUMOReal arg=0.002157)
MSEdge::setSlope(SUMOReal arg=-0.006376)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.008908)
MSEdge::setSlope(SUMOReal arg=0.011821)
MSEdge::setSlope(SUMOReal arg=-0.003546)
MSEdge::setSlope(SUMOReal arg=0.005990)
MSEdge::setSlope(SUMOReal arg=-0.007576)
MSEdge::setSlope(SUMOReal arg=0.005848)
MSEdge::setSlope(SUMOReal arg=-0.000740)
MSEdge::setSlope(SUMOReal arg=0.001975)
MSEdge::setSlope(SUMOReal arg=-0.008879)
MSEdge::setSlope(SUMOReal arg=-0.004329)
MSEdge::setSlope(SUMOReal arg=0.040572)
MSEdge::setSlope(SUMOReal arg=-0.003487)
MSEdge::setSlope(SUMOReal arg=0.005160)
MSEdge::setSlope(SUMOReal arg=-0.010554)
MSEdge::setSlope(SUMOReal arg=0.002506)
MSEdge::setSlope(SUMOReal arg=0.004263)
MSEdge::setSlope(SUMOReal arg=-0.002738)
MSEdge::setSlope(SUMOReal arg=0.034409)
MSEdge::setSlope(SUMOReal arg=0.003179)
MSEdge::setSlope(SUMOReal arg=-0.003179)
MSEdge::setSlope(SUMOReal arg=-0.003097)
MSEdge::setSlope(SUMOReal arg=0.001297)
MSEdge::setSlope(SUMOReal arg=-0.032365)
MSEdge::setSlope(SUMOReal arg=-0.034409)
MSEdge::setSlope(SUMOReal arg=-0.010491)
MSEdge::setSlope(SUMOReal arg=0.012249)
MSEdge::setSlope(SUMOReal arg=-0.206536)
MSEdge::setSlope(SUMOReal arg=-0.059504)
MSEdge::setSlope(SUMOReal arg=-0.012315)
MSEdge::setSlope(SUMOReal arg=-0.073939)
MSEdge::setSlope(SUMOReal arg=0.005799)
MSEdge::setSlope(SUMOReal arg=0.026223)
MSEdge::setSlope(SUMOReal arg=0.019838)
MSEdge::setSlope(SUMOReal arg=-0.019838)
MSEdge::setSlope(SUMOReal arg=-0.123550)
MSEdge::setSlope(SUMOReal arg=0.123729)
MSEdge::setSlope(SUMOReal arg=-0.019183)
MSEdge::setSlope(SUMOReal arg=0.131187)
MSEdge::setSlope(SUMOReal arg=-0.122885)
MSEdge::setSlope(SUMOReal arg=-0.006302)
MSEdge::setSlope(SUMOReal arg=0.000756)
MSEdge::setSlope(SUMOReal arg=0.001650)
MSEdge::setSlope(SUMOReal arg=0.010853)
MSEdge::setSlope(SUMOReal arg=0.006504)
MSEdge::setSlope(SUMOReal arg=-0.006504)
MSEdge::setSlope(SUMOReal arg=-0.011091)
MSEdge::setSlope(SUMOReal arg=-0.007804)
MSEdge::setSlope(SUMOReal arg=-0.001334)
MSEdge::setSlope(SUMOReal arg=-0.003029)
MSEdge::setSlope(SUMOReal arg=0.001008)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.004533)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000700)
MSEdge::setSlope(SUMOReal arg=-0.004762)
MSEdge::setSlope(SUMOReal arg=0.003300)
MSEdge::setSlope(SUMOReal arg=-0.002254)
MSEdge::setSlope(SUMOReal arg=0.001706)
MSEdge::setSlope(SUMOReal arg=0.011363)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002886)
MSEdge::setSlope(SUMOReal arg=-0.008425)
MSEdge::setSlope(SUMOReal arg=-0.002144)
MSEdge::setSlope(SUMOReal arg=-0.003589)
MSEdge::setSlope(SUMOReal arg=0.002973)
MSEdge::setSlope(SUMOReal arg=-0.006329)
MSEdge::setSlope(SUMOReal arg=0.003507)
MSEdge::setSlope(SUMOReal arg=0.010951)
MSEdge::setSlope(SUMOReal arg=0.002427)
MSEdge::setSlope(SUMOReal arg=0.033321)
MSEdge::setSlope(SUMOReal arg=-0.019060)
MSEdge::setSlope(SUMOReal arg=0.017273)
MSEdge::setSlope(SUMOReal arg=0.014588)
MSEdge::setSlope(SUMOReal arg=0.003712)
MSEdge::setSlope(SUMOReal arg=-0.001243)
MSEdge::setSlope(SUMOReal arg=0.009991)
MSEdge::setSlope(SUMOReal arg=-0.009991)
MSEdge::setSlope(SUMOReal arg=-0.014071)
MSEdge::setSlope(SUMOReal arg=0.000116)
MSEdge::setSlope(SUMOReal arg=0.014268)
MSEdge::setSlope(SUMOReal arg=-0.003652)
MSEdge::setSlope(SUMOReal arg=0.018603)
MSEdge::setSlope(SUMOReal arg=0.000736)
MSEdge::setSlope(SUMOReal arg=-0.001285)
MSEdge::setSlope(SUMOReal arg=-0.030248)
MSEdge::setSlope(SUMOReal arg=-0.060532)
MSEdge::setSlope(SUMOReal arg=0.030248)
MSEdge::setSlope(SUMOReal arg=-0.012335)
MSEdge::setSlope(SUMOReal arg=-0.005479)
MSEdge::setSlope(SUMOReal arg=0.049083)
MSEdge::setSlope(SUMOReal arg=0.007280)
MSEdge::setSlope(SUMOReal arg=-0.050738)
MSEdge::setSlope(SUMOReal arg=0.028977)
MSEdge::setSlope(SUMOReal arg=0.048850)
MSEdge::setSlope(SUMOReal arg=-0.049083)
MSEdge::setSlope(SUMOReal arg=-0.024145)
MSEdge::setSlope(SUMOReal arg=0.002049)
MSEdge::setSlope(SUMOReal arg=-0.008677)
MSEdge::setSlope(SUMOReal arg=-0.007280)
MSEdge::setSlope(SUMOReal arg=0.011405)
MSEdge::setSlope(SUMOReal arg=-0.040131)
MSEdge::setSlope(SUMOReal arg=0.040131)
MSEdge::setSlope(SUMOReal arg=-0.009696)
MSEdge::setSlope(SUMOReal arg=-0.011128)
MSEdge::setSlope(SUMOReal arg=0.013875)
MSEdge::setSlope(SUMOReal arg=0.051615)
MSEdge::setSlope(SUMOReal arg=0.011311)
MSEdge::setSlope(SUMOReal arg=0.050738)
MSEdge::setSlope(SUMOReal arg=-0.051615)
MSEdge::setSlope(SUMOReal arg=0.009696)
MSEdge::setSlope(SUMOReal arg=0.041270)
MSEdge::setSlope(SUMOReal arg=-0.042446)
MSEdge::setSlope(SUMOReal arg=-0.021328)
MSEdge::setSlope(SUMOReal arg=-0.015547)
MSEdge::setSlope(SUMOReal arg=0.008557)
MSEdge::setSlope(SUMOReal arg=-0.014361)
MSEdge::setSlope(SUMOReal arg=0.024092)
MSEdge::setSlope(SUMOReal arg=0.011400)
MSEdge::setSlope(SUMOReal arg=0.017249)
MSEdge::setSlope(SUMOReal arg=0.341187)
MSEdge::setSlope(SUMOReal arg=0.004270)
MSEdge::setSlope(SUMOReal arg=-0.053447)
MSEdge::setSlope(SUMOReal arg=0.000388)
MSEdge::setSlope(SUMOReal arg=0.024727)
MSEdge::setSlope(SUMOReal arg=-0.018086)
MSEdge::setSlope(SUMOReal arg=-0.000669)
MSEdge::setSlope(SUMOReal arg=-0.000840)
MSEdge::setSlope(SUMOReal arg=0.024610)
MSEdge::setSlope(SUMOReal arg=-0.000896)
MSEdge::setSlope(SUMOReal arg=-0.013333)
MSEdge::setSlope(SUMOReal arg=-0.003921)
MSEdge::setSlope(SUMOReal arg=-0.000698)
MSEdge::setSlope(SUMOReal arg=0.000037)
MSEdge::setSlope(SUMOReal arg=0.015016)
MSEdge::setSlope(SUMOReal arg=-0.001362)
MSEdge::setSlope(SUMOReal arg=-0.004518)
MSEdge::setSlope(SUMOReal arg=-0.003480)
MSEdge::setSlope(SUMOReal arg=-0.000221)
MSEdge::setSlope(SUMOReal arg=-0.004454)
MSEdge::setSlope(SUMOReal arg=-0.017036)
MSEdge::setSlope(SUMOReal arg=-0.034812)
MSEdge::setSlope(SUMOReal arg=-0.048238)
MSEdge::setSlope(SUMOReal arg=-0.164971)
MSEdge::setSlope(SUMOReal arg=-0.005578)
MSEdge::setSlope(SUMOReal arg=-0.052023)
MSEdge::setSlope(SUMOReal arg=0.005530)
MSEdge::setSlope(SUMOReal arg=0.004030)
MSEdge::setSlope(SUMOReal arg=0.007695)
MSEdge::setSlope(SUMOReal arg=0.013011)
MSEdge::setSlope(SUMOReal arg=0.565149)
MSEdge::setSlope(SUMOReal arg=0.009796)
MSEdge::setSlope(SUMOReal arg=0.074860)
MSEdge::setSlope(SUMOReal arg=0.000921)
MSEdge::setSlope(SUMOReal arg=-0.018802)
MSEdge::setSlope(SUMOReal arg=0.002868)
MSEdge::setSlope(SUMOReal arg=-0.006938)
MSEdge::setSlope(SUMOReal arg=-0.001213)
MSEdge::setSlope(SUMOReal arg=0.000982)
MSEdge::setSlope(SUMOReal arg=0.008883)
MSEdge::setSlope(SUMOReal arg=-0.004932)
MSEdge::setSlope(SUMOReal arg=0.001371)
MSEdge::setSlope(SUMOReal arg=-0.002052)
MSEdge::setSlope(SUMOReal arg=0.003287)
MSEdge::setSlope(SUMOReal arg=0.005253)
MSEdge::setSlope(SUMOReal arg=-0.028180)
MSEdge::setSlope(SUMOReal arg=0.089135)
MSEdge::setSlope(SUMOReal arg=0.021507)
MSEdge::setSlope(SUMOReal arg=-0.000844)
MSEdge::setSlope(SUMOReal arg=-0.013233)
MSEdge::setSlope(SUMOReal arg=-0.000921)
MSEdge::setSlope(SUMOReal arg=0.011560)
MSEdge::setSlope(SUMOReal arg=0.039677)
MSEdge::setSlope(SUMOReal arg=-0.031134)
MSEdge::setSlope(SUMOReal arg=-0.019701)
MSEdge::setSlope(SUMOReal arg=0.012061)
MSEdge::setSlope(SUMOReal arg=0.001061)
MSEdge::setSlope(SUMOReal arg=-0.003264)
MSEdge::setSlope(SUMOReal arg=-0.002077)
MSEdge::setSlope(SUMOReal arg=-0.056650)
MSEdge::setSlope(SUMOReal arg=-0.010585)
MSEdge::setSlope(SUMOReal arg=-0.012493)
MSEdge::setSlope(SUMOReal arg=-0.008300)
MSEdge::setSlope(SUMOReal arg=0.000079)
MSEdge::setSlope(SUMOReal arg=0.001551)
MSEdge::setSlope(SUMOReal arg=-0.000849)
MSEdge::setSlope(SUMOReal arg=-0.001357)
MSEdge::setSlope(SUMOReal arg=0.001905)
MSEdge::setSlope(SUMOReal arg=-0.004520)
MSEdge::setSlope(SUMOReal arg=-0.001467)
MSEdge::setSlope(SUMOReal arg=-0.055385)
MSEdge::setSlope(SUMOReal arg=-0.003848)
MSEdge::setSlope(SUMOReal arg=-0.003575)
MSEdge::setSlope(SUMOReal arg=0.000431)
MSEdge::setSlope(SUMOReal arg=-0.004751)
MSEdge::setSlope(SUMOReal arg=-0.011469)
MSEdge::setSlope(SUMOReal arg=0.018441)
MSEdge::setSlope(SUMOReal arg=-0.021543)
MSEdge::setSlope(SUMOReal arg=0.010221)
MSEdge::setSlope(SUMOReal arg=-0.015747)
MSEdge::setSlope(SUMOReal arg=0.002188)
MSEdge::setSlope(SUMOReal arg=0.001041)
MSEdge::setSlope(SUMOReal arg=-0.014167)
MSEdge::setSlope(SUMOReal arg=-0.006107)
MSEdge::setSlope(SUMOReal arg=0.026987)
MSEdge::setSlope(SUMOReal arg=0.058100)
MSEdge::setSlope(SUMOReal arg=0.062695)
MSEdge::setSlope(SUMOReal arg=-0.032319)
MSEdge::setSlope(SUMOReal arg=0.002899)
MSEdge::setSlope(SUMOReal arg=-0.007500)
MSEdge::setSlope(SUMOReal arg=-0.011001)
MSEdge::setSlope(SUMOReal arg=0.011615)
MSEdge::setSlope(SUMOReal arg=-0.016699)
MSEdge::setSlope(SUMOReal arg=-0.038837)
MSEdge::setSlope(SUMOReal arg=-0.002283)
MSEdge::setSlope(SUMOReal arg=1.088283)
MSEdge::setSlope(SUMOReal arg=0.005030)
MSEdge::setSlope(SUMOReal arg=0.002507)
MSEdge::setSlope(SUMOReal arg=-0.003868)
MSEdge::setSlope(SUMOReal arg=-0.005976)
MSEdge::setSlope(SUMOReal arg=-0.011691)
MSEdge::setSlope(SUMOReal arg=-0.004942)
MSEdge::setSlope(SUMOReal arg=0.007202)
MSEdge::setSlope(SUMOReal arg=-0.003026)
MSEdge::setSlope(SUMOReal arg=-0.003704)
MSEdge::setSlope(SUMOReal arg=0.019975)
MSEdge::setSlope(SUMOReal arg=-0.000923)
MSEdge::setSlope(SUMOReal arg=0.017015)
MSEdge::setSlope(SUMOReal arg=0.008732)
MSEdge::setSlope(SUMOReal arg=-0.037211)
MSEdge::setSlope(SUMOReal arg=-0.007436)
MSEdge::setSlope(SUMOReal arg=-0.000232)
MSEdge::setSlope(SUMOReal arg=-0.005021)
MSEdge::setSlope(SUMOReal arg=-0.001225)
MSEdge::setSlope(SUMOReal arg=0.003971)
MSEdge::setSlope(SUMOReal arg=-0.011905)
MSEdge::setSlope(SUMOReal arg=-0.001660)
MSEdge::setSlope(SUMOReal arg=-0.005775)
MSEdge::setSlope(SUMOReal arg=-0.054950)
MSEdge::setSlope(SUMOReal arg=-0.007688)
MSEdge::setSlope(SUMOReal arg=-0.008155)
MSEdge::setSlope(SUMOReal arg=0.007663)
MSEdge::setSlope(SUMOReal arg=-0.013475)
MSEdge::setSlope(SUMOReal arg=-0.000210)
MSEdge::setSlope(SUMOReal arg=-0.002223)
MSEdge::setSlope(SUMOReal arg=-0.013309)
MSEdge::setSlope(SUMOReal arg=-0.013672)
MSEdge::setSlope(SUMOReal arg=0.006228)
MSEdge::setSlope(SUMOReal arg=-0.014301)
MSEdge::setSlope(SUMOReal arg=-0.001533)
MSEdge::setSlope(SUMOReal arg=-0.005348)
MSEdge::setSlope(SUMOReal arg=-0.006330)
MSEdge::setSlope(SUMOReal arg=-0.013558)
MSEdge::setSlope(SUMOReal arg=-0.003923)
MSEdge::setSlope(SUMOReal arg=-0.002494)
MSEdge::setSlope(SUMOReal arg=0.003236)
MSEdge::setSlope(SUMOReal arg=-0.004569)
MSEdge::setSlope(SUMOReal arg=-0.008670)
MSEdge::setSlope(SUMOReal arg=0.004007)
MSEdge::setSlope(SUMOReal arg=0.010968)
MSEdge::setSlope(SUMOReal arg=-0.009907)
MSEdge::setSlope(SUMOReal arg=-0.015110)
MSEdge::setSlope(SUMOReal arg=0.000722)
MSEdge::setSlope(SUMOReal arg=-0.029991)
MSEdge::setSlope(SUMOReal arg=-0.067177)
MSEdge::setSlope(SUMOReal arg=0.018115)
MSEdge::setSlope(SUMOReal arg=-0.000039)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.060168)
MSEdge::setSlope(SUMOReal arg=0.027190)
MSEdge::setSlope(SUMOReal arg=0.003273)
MSEdge::setSlope(SUMOReal arg=-0.000987)
MSEdge::setSlope(SUMOReal arg=-0.021634)
MSEdge::setSlope(SUMOReal arg=0.000383)
MSEdge::setSlope(SUMOReal arg=0.186614)
MSEdge::setSlope(SUMOReal arg=0.006827)
MSEdge::setSlope(SUMOReal arg=-0.002393)
MSEdge::setSlope(SUMOReal arg=0.017860)
MSEdge::setSlope(SUMOReal arg=-0.007947)
MSEdge::setSlope(SUMOReal arg=0.003699)
MSEdge::setSlope(SUMOReal arg=0.005657)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.176709)
MSEdge::setSlope(SUMOReal arg=-0.001529)
MSEdge::setSlope(SUMOReal arg=-0.109508)
MSEdge::setSlope(SUMOReal arg=-0.000555)
MSEdge::setSlope(SUMOReal arg=-0.023968)
MSEdge::setSlope(SUMOReal arg=0.000909)
MSEdge::setSlope(SUMOReal arg=0.007658)
MSEdge::setSlope(SUMOReal arg=-0.002125)
MSEdge::setSlope(SUMOReal arg=-0.017720)
MSEdge::setSlope(SUMOReal arg=-0.007936)
MSEdge::setSlope(SUMOReal arg=0.013257)
MSEdge::setSlope(SUMOReal arg=-0.005125)
MSEdge::setSlope(SUMOReal arg=-0.055294)
MSEdge::setSlope(SUMOReal arg=0.005963)
MSEdge::setSlope(SUMOReal arg=0.045237)
MSEdge::setSlope(SUMOReal arg=0.015546)
MSEdge::setSlope(SUMOReal arg=-0.039611)
MSEdge::setSlope(SUMOReal arg=-0.001339)
MSEdge::setSlope(SUMOReal arg=-0.003865)
MSEdge::setSlope(SUMOReal arg=0.016407)
MSEdge::setSlope(SUMOReal arg=-0.058350)
MSEdge::setSlope(SUMOReal arg=0.059504)
MSEdge::setSlope(SUMOReal arg=0.001710)
MSEdge::setSlope(SUMOReal arg=-0.008163)
MSEdge::setSlope(SUMOReal arg=0.001378)
MSEdge::setSlope(SUMOReal arg=0.012109)
MSEdge::setSlope(SUMOReal arg=0.243874)
MSEdge::setSlope(SUMOReal arg=-0.003304)
MSEdge::setSlope(SUMOReal arg=-0.013353)
MSEdge::setSlope(SUMOReal arg=0.009019)
MSEdge::setSlope(SUMOReal arg=-0.011385)
MSEdge::setSlope(SUMOReal arg=-0.007211)
MSEdge::setSlope(SUMOReal arg=-0.002021)
MSEdge::setSlope(SUMOReal arg=-0.018493)
MSEdge::setSlope(SUMOReal arg=-0.027692)
MSEdge::setSlope(SUMOReal arg=-0.003896)
MSEdge::setSlope(SUMOReal arg=0.002978)
MSEdge::setSlope(SUMOReal arg=-0.008681)
MSEdge::setSlope(SUMOReal arg=0.011476)
MSEdge::setSlope(SUMOReal arg=0.081848)
MSEdge::setSlope(SUMOReal arg=0.008180)
MSEdge::setSlope(SUMOReal arg=0.010529)
MSEdge::setSlope(SUMOReal arg=0.010484)
MSEdge::setSlope(SUMOReal arg=0.000837)
MSEdge::setSlope(SUMOReal arg=0.002760)
MSEdge::setSlope(SUMOReal arg=0.007352)
MSEdge::setSlope(SUMOReal arg=0.000826)
MSEdge::setSlope(SUMOReal arg=0.013333)
MSEdge::setSlope(SUMOReal arg=0.007323)
MSEdge::setSlope(SUMOReal arg=0.077725)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.017954)
MSEdge::setSlope(SUMOReal arg=-0.001203)
MSEdge::setSlope(SUMOReal arg=0.002698)
MSEdge::setSlope(SUMOReal arg=-0.027535)
MSEdge::setSlope(SUMOReal arg=0.013409)
MSEdge::setSlope(SUMOReal arg=0.013775)
MSEdge::setSlope(SUMOReal arg=0.012342)
MSEdge::setSlope(SUMOReal arg=-0.002910)
MSEdge::setSlope(SUMOReal arg=-0.043688)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.055742)
MSEdge::setSlope(SUMOReal arg=-0.001252)
MSEdge::setSlope(SUMOReal arg=0.001093)
MSEdge::setSlope(SUMOReal arg=0.100922)
MSEdge::setSlope(SUMOReal arg=-0.021987)
MSEdge::setSlope(SUMOReal arg=-0.001381)
MSEdge::setSlope(SUMOReal arg=0.003859)
MSEdge::setSlope(SUMOReal arg=-0.146893)
MSEdge::setSlope(SUMOReal arg=-0.012808)
MSEdge::setSlope(SUMOReal arg=-0.188603)
MSEdge::setSlope(SUMOReal arg=0.173423)
MSEdge::setSlope(SUMOReal arg=-0.123891)
MSEdge::setSlope(SUMOReal arg=0.044892)
MSEdge::setSlope(SUMOReal arg=-0.036378)
MSEdge::setSlope(SUMOReal arg=0.007843)
MSEdge::setSlope(SUMOReal arg=0.192048)
MSEdge::setSlope(SUMOReal arg=-0.020830)
MSEdge::setSlope(SUMOReal arg=-0.395571)
MSEdge::setSlope(SUMOReal arg=0.073315)
MSEdge::setSlope(SUMOReal arg=0.098777)
MSEdge::setSlope(SUMOReal arg=0.176961)
MSEdge::setSlope(SUMOReal arg=0.036896)
MSEdge::setSlope(SUMOReal arg=0.003244)
MSEdge::setSlope(SUMOReal arg=-0.004490)
MSEdge::setSlope(SUMOReal arg=0.002698)
MSEdge::setSlope(SUMOReal arg=0.001156)
MSEdge::setSlope(SUMOReal arg=-0.003833)
MSEdge::setSlope(SUMOReal arg=-0.009026)
MSEdge::setSlope(SUMOReal arg=0.050438)
MSEdge::setSlope(SUMOReal arg=0.050847)
MSEdge::setSlope(SUMOReal arg=0.012345)
MSEdge::setSlope(SUMOReal arg=-0.000281)
MSEdge::setSlope(SUMOReal arg=-0.006824)
MSEdge::setSlope(SUMOReal arg=-0.004793)
MSEdge::setSlope(SUMOReal arg=0.020525)
MSEdge::setSlope(SUMOReal arg=0.003866)
MSEdge::setSlope(SUMOReal arg=0.006316)
MSEdge::setSlope(SUMOReal arg=-0.009373)
MSEdge::setSlope(SUMOReal arg=-0.001856)
MSEdge::setSlope(SUMOReal arg=0.014438)
MSEdge::setSlope(SUMOReal arg=0.024485)
MSEdge::setSlope(SUMOReal arg=0.000726)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.004073)
MSEdge::setSlope(SUMOReal arg=-0.006520)
MSEdge::setSlope(SUMOReal arg=-0.059653)
MSEdge::setSlope(SUMOReal arg=-0.097516)
MSEdge::setSlope(SUMOReal arg=0.015560)
MSEdge::setSlope(SUMOReal arg=0.011037)
MSEdge::setSlope(SUMOReal arg=-0.073746)
MSEdge::setSlope(SUMOReal arg=0.059156)
MSEdge::setSlope(SUMOReal arg=-0.008152)
MSEdge::setSlope(SUMOReal arg=0.007103)
MSEdge::setSlope(SUMOReal arg=-0.007184)
MSEdge::setSlope(SUMOReal arg=-0.007225)
MSEdge::setSlope(SUMOReal arg=0.147312)
MSEdge::setSlope(SUMOReal arg=0.212938)
MSEdge::setSlope(SUMOReal arg=0.011348)
MSEdge::setSlope(SUMOReal arg=-0.008561)
MSEdge::setSlope(SUMOReal arg=-0.010328)
MSEdge::setSlope(SUMOReal arg=0.046750)
MSEdge::setSlope(SUMOReal arg=0.043852)
MSEdge::setSlope(SUMOReal arg=0.005417)
MSEdge::setSlope(SUMOReal arg=-0.000581)
MSEdge::setSlope(SUMOReal arg=-0.005317)
MSEdge::setSlope(SUMOReal arg=0.010253)
MSEdge::setSlope(SUMOReal arg=0.028162)
MSEdge::setSlope(SUMOReal arg=-0.000703)
MSEdge::setSlope(SUMOReal arg=-0.000676)
MSEdge::setSlope(SUMOReal arg=0.014578)
MSEdge::setSlope(SUMOReal arg=0.059686)
MSEdge::setSlope(SUMOReal arg=-0.015624)
MSEdge::setSlope(SUMOReal arg=-0.000945)
MSEdge::setSlope(SUMOReal arg=-0.001391)
MSEdge::setSlope(SUMOReal arg=0.006639)
MSEdge::setSlope(SUMOReal arg=-0.025047)
MSEdge::setSlope(SUMOReal arg=-0.002304)
MSEdge::setSlope(SUMOReal arg=0.040015)
MSEdge::setSlope(SUMOReal arg=-0.003663)
MSEdge::setSlope(SUMOReal arg=-0.040189)
MSEdge::setSlope(SUMOReal arg=-0.012141)
MSEdge::setSlope(SUMOReal arg=-0.015490)
MSEdge::setSlope(SUMOReal arg=-0.016079)
MSEdge::setSlope(SUMOReal arg=-0.111979)
MSEdge::setSlope(SUMOReal arg=-0.011639)
MSEdge::setSlope(SUMOReal arg=0.008921)
MSEdge::setSlope(SUMOReal arg=-0.001831)
MSEdge::setSlope(SUMOReal arg=-0.005797)
MSEdge::setSlope(SUMOReal arg=-0.006367)
MSEdge::setSlope(SUMOReal arg=-0.003300)
MSEdge::setSlope(SUMOReal arg=0.012587)
MSEdge::setSlope(SUMOReal arg=-0.008596)
MSEdge::setSlope(SUMOReal arg=0.003049)
MSEdge::setSlope(SUMOReal arg=0.128419)
MSEdge::setSlope(SUMOReal arg=-0.015528)
MSEdge::setSlope(SUMOReal arg=-0.016215)
MSEdge::setSlope(SUMOReal arg=-0.030166)
MSEdge::setSlope(SUMOReal arg=0.013157)
MSEdge::setSlope(SUMOReal arg=0.003937)
MSEdge::setSlope(SUMOReal arg=0.002930)
MSEdge::setSlope(SUMOReal arg=0.011056)
MSEdge::setSlope(SUMOReal arg=-0.006237)
MSEdge::setSlope(SUMOReal arg=-0.011130)
MSEdge::setSlope(SUMOReal arg=-0.007016)
MSEdge::setSlope(SUMOReal arg=0.003667)
MSEdge::setSlope(SUMOReal arg=-0.004042)
MSEdge::setSlope(SUMOReal arg=0.050021)
MSEdge::setSlope(SUMOReal arg=-0.011650)
MSEdge::setSlope(SUMOReal arg=0.005181)
MSEdge::setSlope(SUMOReal arg=0.006010)
MSEdge::setSlope(SUMOReal arg=-0.020140)
MSEdge::setSlope(SUMOReal arg=-0.011904)
MSEdge::setSlope(SUMOReal arg=-0.055499)
MSEdge::setSlope(SUMOReal arg=0.035446)
MSEdge::setSlope(SUMOReal arg=0.031418)
MSEdge::setSlope(SUMOReal arg=0.005746)
MSEdge::setSlope(SUMOReal arg=-0.029048)
MSEdge::setSlope(SUMOReal arg=-0.010764)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.010674)
MSEdge::setSlope(SUMOReal arg=0.002937)
MSEdge::setSlope(SUMOReal arg=-0.000216)
MSEdge::setSlope(SUMOReal arg=-0.042004)
MSEdge::setSlope(SUMOReal arg=-0.012875)
MSEdge::setSlope(SUMOReal arg=-0.017117)
MSEdge::setSlope(SUMOReal arg=-0.030603)
MSEdge::setSlope(SUMOReal arg=0.001488)
MSEdge::setSlope(SUMOReal arg=0.120383)
MSEdge::setSlope(SUMOReal arg=0.025635)
MSEdge::setSlope(SUMOReal arg=0.048980)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.007776)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.114440)
MSEdge::setSlope(SUMOReal arg=-0.007269)
MSEdge::setSlope(SUMOReal arg=-0.107075)
MSEdge::setSlope(SUMOReal arg=-0.080423)
MSEdge::setSlope(SUMOReal arg=-0.026356)
MSEdge::setSlope(SUMOReal arg=0.004458)
MSEdge::setSlope(SUMOReal arg=-0.023525)
MSEdge::setSlope(SUMOReal arg=0.015803)
MSEdge::setSlope(SUMOReal arg=0.000180)
MSEdge::setSlope(SUMOReal arg=-0.002627)
MSEdge::setSlope(SUMOReal arg=0.042942)
MSEdge::setSlope(SUMOReal arg=-0.003995)
MSEdge::setSlope(SUMOReal arg=-0.082115)
MSEdge::setSlope(SUMOReal arg=-0.005855)
MSEdge::setSlope(SUMOReal arg=0.001691)
MSEdge::setSlope(SUMOReal arg=-0.021732)
MSEdge::setSlope(SUMOReal arg=-0.002738)
MSEdge::setSlope(SUMOReal arg=-0.011980)
MSEdge::setSlope(SUMOReal arg=-0.072599)
MSEdge::setSlope(SUMOReal arg=0.000947)
MSEdge::setSlope(SUMOReal arg=0.011431)
MSEdge::setSlope(SUMOReal arg=0.007284)
MSEdge::setSlope(SUMOReal arg=0.001104)
MSEdge::setSlope(SUMOReal arg=0.059153)
MSEdge::setSlope(SUMOReal arg=0.008961)
MSEdge::setSlope(SUMOReal arg=-0.000653)
MSEdge::setSlope(SUMOReal arg=0.000615)
MSEdge::setSlope(SUMOReal arg=0.002150)
MSEdge::setSlope(SUMOReal arg=-0.000666)
MSEdge::setSlope(SUMOReal arg=-0.001080)
MSEdge::setSlope(SUMOReal arg=0.008368)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.058243)
MSEdge::setSlope(SUMOReal arg=-0.002034)
MSEdge::setSlope(SUMOReal arg=0.015513)
MSEdge::setSlope(SUMOReal arg=-0.008894)
MSEdge::setSlope(SUMOReal arg=0.013781)
MSEdge::setSlope(SUMOReal arg=-0.017896)
MSEdge::setSlope(SUMOReal arg=-0.027615)
MSEdge::setSlope(SUMOReal arg=-0.004024)
MSEdge::setSlope(SUMOReal arg=0.053312)
MSEdge::setSlope(SUMOReal arg=0.007860)
MSEdge::setSlope(SUMOReal arg=-0.103082)
MSEdge::setSlope(SUMOReal arg=-0.122392)
MSEdge::setSlope(SUMOReal arg=0.005208)
MSEdge::setSlope(SUMOReal arg=-0.070816)
MSEdge::setSlope(SUMOReal arg=0.006569)
MSEdge::setSlope(SUMOReal arg=0.001367)
MSEdge::setSlope(SUMOReal arg=0.003133)
MSEdge::setSlope(SUMOReal arg=0.001286)
MSEdge::setSlope(SUMOReal arg=-0.032199)
MSEdge::setSlope(SUMOReal arg=-0.008162)
MSEdge::setSlope(SUMOReal arg=0.010354)
MSEdge::setSlope(SUMOReal arg=0.019371)
MSEdge::setSlope(SUMOReal arg=0.034078)
MSEdge::setSlope(SUMOReal arg=-0.000232)
MSEdge::setSlope(SUMOReal arg=0.033561)
MSEdge::setSlope(SUMOReal arg=0.005706)
MSEdge::setSlope(SUMOReal arg=-0.011304)
MSEdge::setSlope(SUMOReal arg=-0.000429)
MSEdge::setSlope(SUMOReal arg=-0.005259)
MSEdge::setSlope(SUMOReal arg=0.000803)
MSEdge::setSlope(SUMOReal arg=0.000069)
MSEdge::setSlope(SUMOReal arg=-0.027390)
MSEdge::setSlope(SUMOReal arg=-0.002284)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.001696)
MSEdge::setSlope(SUMOReal arg=-0.003644)
MSEdge::setSlope(SUMOReal arg=-0.006360)
MSEdge::setSlope(SUMOReal arg=0.000138)
MSEdge::setSlope(SUMOReal arg=-0.007201)
MSEdge::setSlope(SUMOReal arg=0.003566)
MSEdge::setSlope(SUMOReal arg=-0.027484)
MSEdge::setSlope(SUMOReal arg=-0.064427)
MSEdge::setSlope(SUMOReal arg=0.013333)
MSEdge::setSlope(SUMOReal arg=-0.012542)
MSEdge::setSlope(SUMOReal arg=-0.087116)
MSEdge::setSlope(SUMOReal arg=-0.096414)
MSEdge::setSlope(SUMOReal arg=0.017817)
MSEdge::setSlope(SUMOReal arg=-0.004670)
MSEdge::setSlope(SUMOReal arg=-0.000994)
MSEdge::setSlope(SUMOReal arg=-0.231717)
MSEdge::setSlope(SUMOReal arg=-0.035938)
MSEdge::setSlope(SUMOReal arg=0.009996)
MSEdge::setSlope(SUMOReal arg=-0.463648)
MSEdge::setSlope(SUMOReal arg=-0.012026)
MSEdge::setSlope(SUMOReal arg=-0.006896)
MSEdge::setSlope(SUMOReal arg=0.001672)
MSEdge::setSlope(SUMOReal arg=0.000088)
MSEdge::setSlope(SUMOReal arg=-0.000751)
MSEdge::setSlope(SUMOReal arg=0.030649)
MSEdge::setSlope(SUMOReal arg=-0.012912)
MSEdge::setSlope(SUMOReal arg=0.019605)
MSEdge::setSlope(SUMOReal arg=-0.217801)
MSEdge::setSlope(SUMOReal arg=-0.012121)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.002326)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.011600)
MSEdge::setSlope(SUMOReal arg=0.019940)
MSEdge::setSlope(SUMOReal arg=0.002339)
MSEdge::setSlope(SUMOReal arg=-0.004299)
MSEdge::setSlope(SUMOReal arg=-0.002512)
MSEdge::setSlope(SUMOReal arg=-0.012149)
MSEdge::setSlope(SUMOReal arg=-0.006797)
MSEdge::setSlope(SUMOReal arg=0.004200)
MSEdge::setSlope(SUMOReal arg=0.007153)
MSEdge::setSlope(SUMOReal arg=0.057158)
MSEdge::setSlope(SUMOReal arg=0.010529)
MSEdge::setSlope(SUMOReal arg=0.014935)
MSEdge::setSlope(SUMOReal arg=0.003476)
MSEdge::setSlope(SUMOReal arg=-0.000296)
MSEdge::setSlope(SUMOReal arg=0.001199)
MSEdge::setSlope(SUMOReal arg=-0.009815)
MSEdge::setSlope(SUMOReal arg=-0.018145)
MSEdge::setSlope(SUMOReal arg=-0.003390)
MSEdge::setSlope(SUMOReal arg=0.255182)
MSEdge::setSlope(SUMOReal arg=0.001448)
MSEdge::setSlope(SUMOReal arg=-0.002456)
MSEdge::setSlope(SUMOReal arg=-0.003277)
MSEdge::setSlope(SUMOReal arg=-0.007334)
MSEdge::setSlope(SUMOReal arg=0.011641)
MSEdge::setSlope(SUMOReal arg=0.034996)
MSEdge::setSlope(SUMOReal arg=-0.007772)
MSEdge::setSlope(SUMOReal arg=0.003292)
MSEdge::setSlope(SUMOReal arg=-0.003049)
MSEdge::setSlope(SUMOReal arg=0.028894)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.065125)
MSEdge::setSlope(SUMOReal arg=-0.000250)
MSEdge::setSlope(SUMOReal arg=0.004239)
MSEdge::setSlope(SUMOReal arg=-0.004089)
MSEdge::setSlope(SUMOReal arg=0.075172)
MSEdge::setSlope(SUMOReal arg=0.015117)
MSEdge::setSlope(SUMOReal arg=0.012744)
MSEdge::setSlope(SUMOReal arg=0.144034)
MSEdge::setSlope(SUMOReal arg=0.014947)
MSEdge::setSlope(SUMOReal arg=-0.006515)
MSEdge::setSlope(SUMOReal arg=-0.065267)
MSEdge::setSlope(SUMOReal arg=-0.042918)
MSEdge::setSlope(SUMOReal arg=-0.116865)
MSEdge::setSlope(SUMOReal arg=-0.113962)
MSEdge::setSlope(SUMOReal arg=-0.146620)
MSEdge::setSlope(SUMOReal arg=0.046945)
MSEdge::setSlope(SUMOReal arg=0.180471)
MSEdge::setSlope(SUMOReal arg=0.009259)
MSEdge::setSlope(SUMOReal arg=0.006393)
MSEdge::setSlope(SUMOReal arg=-0.039477)
MSEdge::setSlope(SUMOReal arg=-0.001209)
MSEdge::setSlope(SUMOReal arg=0.040335)
MSEdge::setSlope(SUMOReal arg=0.006228)
MSEdge::setSlope(SUMOReal arg=-0.001718)
MSEdge::setSlope(SUMOReal arg=-0.002219)
MSEdge::setSlope(SUMOReal arg=-0.007686)
MSEdge::setSlope(SUMOReal arg=-0.028240)
MSEdge::setSlope(SUMOReal arg=-0.020784)
MSEdge::setSlope(SUMOReal arg=-0.111683)
MSEdge::setSlope(SUMOReal arg=-0.010151)
MSEdge::setSlope(SUMOReal arg=0.078713)
MSEdge::setSlope(SUMOReal arg=-0.009331)
MSEdge::setSlope(SUMOReal arg=-0.002301)
MSEdge::setSlope(SUMOReal arg=0.007128)
MSEdge::setSlope(SUMOReal arg=0.016059)
MSEdge::setSlope(SUMOReal arg=-0.013499)
MSEdge::setSlope(SUMOReal arg=0.001863)
MSEdge::setSlope(SUMOReal arg=0.002576)
MSEdge::setSlope(SUMOReal arg=-0.006289)
MSEdge::setSlope(SUMOReal arg=0.000658)
MSEdge::setSlope(SUMOReal arg=-0.002290)
MSEdge::setSlope(SUMOReal arg=-0.004940)
MSEdge::setSlope(SUMOReal arg=-0.015846)
MSEdge::setSlope(SUMOReal arg=-0.013033)
MSEdge::setSlope(SUMOReal arg=-0.004805)
MSEdge::setSlope(SUMOReal arg=-0.000917)
MSEdge::setSlope(SUMOReal arg=0.038915)
MSEdge::setSlope(SUMOReal arg=0.006493)
MSEdge::setSlope(SUMOReal arg=0.071472)
MSEdge::setSlope(SUMOReal arg=-0.011047)
MSEdge::setSlope(SUMOReal arg=-0.186849)
MSEdge::setSlope(SUMOReal arg=-0.019206)
MSEdge::setSlope(SUMOReal arg=0.093324)
MSEdge::setSlope(SUMOReal arg=0.060417)
MSEdge::setSlope(SUMOReal arg=0.009418)
MSEdge::setSlope(SUMOReal arg=-0.002014)
MSEdge::setSlope(SUMOReal arg=-0.005378)
MSEdge::setSlope(SUMOReal arg=-0.010543)
MSEdge::setSlope(SUMOReal arg=0.005938)
MSEdge::setSlope(SUMOReal arg=0.009228)
MSEdge::setSlope(SUMOReal arg=-0.065167)
MSEdge::setSlope(SUMOReal arg=0.019029)
MSEdge::setSlope(SUMOReal arg=-0.000723)
MSEdge::setSlope(SUMOReal arg=0.096918)
MSEdge::setSlope(SUMOReal arg=0.016422)
MSEdge::setSlope(SUMOReal arg=0.008292)
MSEdge::setSlope(SUMOReal arg=-0.035984)
MSEdge::setSlope(SUMOReal arg=-0.010930)
MSEdge::setSlope(SUMOReal arg=-0.011042)
MSEdge::setSlope(SUMOReal arg=-0.000812)
MSEdge::setSlope(SUMOReal arg=0.000312)
MSEdge::setSlope(SUMOReal arg=0.004005)
MSEdge::setSlope(SUMOReal arg=-0.017367)
MSEdge::setSlope(SUMOReal arg=-0.003963)
MSEdge::setSlope(SUMOReal arg=-0.001954)
MSEdge::setSlope(SUMOReal arg=0.002496)
MSEdge::setSlope(SUMOReal arg=-0.019727)
MSEdge::setSlope(SUMOReal arg=0.004534)
MSEdge::setSlope(SUMOReal arg=0.029379)
MSEdge::setSlope(SUMOReal arg=-0.026064)
MSEdge::setSlope(SUMOReal arg=0.081491)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.087634)
MSEdge::setSlope(SUMOReal arg=-0.068613)
MSEdge::setSlope(SUMOReal arg=0.007092)
MSEdge::setSlope(SUMOReal arg=-0.008116)
MSEdge::setSlope(SUMOReal arg=-0.008445)
MSEdge::setSlope(SUMOReal arg=0.057687)
MSEdge::setSlope(SUMOReal arg=0.026589)
MSEdge::setSlope(SUMOReal arg=0.002319)
MSEdge::setSlope(SUMOReal arg=-0.004975)
MSEdge::setSlope(SUMOReal arg=0.005695)
MSEdge::setSlope(SUMOReal arg=0.059190)
MSEdge::setSlope(SUMOReal arg=-0.020819)
MSEdge::setSlope(SUMOReal arg=-0.004848)
MSEdge::setSlope(SUMOReal arg=0.013478)
MSEdge::setSlope(SUMOReal arg=0.039350)
MSEdge::setSlope(SUMOReal arg=0.006852)
MSEdge::setSlope(SUMOReal arg=-0.007481)
MSEdge::setSlope(SUMOReal arg=0.394249)
MSEdge::setSlope(SUMOReal arg=-0.057573)
MSEdge::setSlope(SUMOReal arg=-0.021402)
MSEdge::setSlope(SUMOReal arg=-0.000450)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.007561)
MSEdge::setSlope(SUMOReal arg=0.006533)
MSEdge::setSlope(SUMOReal arg=-0.101465)
MSEdge::setSlope(SUMOReal arg=0.059656)
MSEdge::setSlope(SUMOReal arg=0.080315)
MSEdge::setSlope(SUMOReal arg=-0.098504)
MSEdge::setSlope(SUMOReal arg=-0.034089)
MSEdge::setSlope(SUMOReal arg=-0.004636)
MSEdge::setSlope(SUMOReal arg=-0.002179)
MSEdge::setSlope(SUMOReal arg=-0.008867)
MSEdge::setSlope(SUMOReal arg=0.000611)
MSEdge::setSlope(SUMOReal arg=-0.003392)
MSEdge::setSlope(SUMOReal arg=0.010948)
MSEdge::setSlope(SUMOReal arg=0.013710)
MSEdge::setSlope(SUMOReal arg=-0.005353)
MSEdge::setSlope(SUMOReal arg=0.038510)
MSEdge::setSlope(SUMOReal arg=-0.090917)
MSEdge::setSlope(SUMOReal arg=0.056462)
MSEdge::setSlope(SUMOReal arg=-0.013761)
MSEdge::setSlope(SUMOReal arg=0.059425)
MSEdge::setSlope(SUMOReal arg=-0.134418)
MSEdge::setSlope(SUMOReal arg=0.977446)
MSEdge::setSlope(SUMOReal arg=0.042860)
MSEdge::setSlope(SUMOReal arg=-0.021439)
MSEdge::setSlope(SUMOReal arg=-0.014898)
MSEdge::setSlope(SUMOReal arg=-0.324403)
MSEdge::setSlope(SUMOReal arg=-0.010986)
MSEdge::setSlope(SUMOReal arg=-0.067465)
MSEdge::setSlope(SUMOReal arg=0.023618)
MSEdge::setSlope(SUMOReal arg=0.008368)
MSEdge::setSlope(SUMOReal arg=0.363979)
MSEdge::setSlope(SUMOReal arg=0.048874)
MSEdge::setSlope(SUMOReal arg=-0.014906)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.008314)
MSEdge::setSlope(SUMOReal arg=0.004717)
MSEdge::setSlope(SUMOReal arg=-0.015329)
MSEdge::setSlope(SUMOReal arg=-0.002940)
MSEdge::setSlope(SUMOReal arg=-0.011406)
MSEdge::setSlope(SUMOReal arg=-0.002994)
MSEdge::setSlope(SUMOReal arg=-0.004189)
MSEdge::setSlope(SUMOReal arg=-0.084997)
MSEdge::setSlope(SUMOReal arg=0.003180)
MSEdge::setSlope(SUMOReal arg=-0.044408)
MSEdge::setSlope(SUMOReal arg=0.012019)
MSEdge::setSlope(SUMOReal arg=0.022872)
MSEdge::setSlope(SUMOReal arg=0.028010)
MSEdge::setSlope(SUMOReal arg=-0.041562)
MSEdge::setSlope(SUMOReal arg=-0.056543)
MSEdge::setSlope(SUMOReal arg=-0.022409)
MSEdge::setSlope(SUMOReal arg=-0.003463)
MSEdge::setSlope(SUMOReal arg=-0.000159)
MSEdge::setSlope(SUMOReal arg=0.090998)
MSEdge::setSlope(SUMOReal arg=0.002987)
MSEdge::setSlope(SUMOReal arg=-0.000662)
MSEdge::setSlope(SUMOReal arg=0.001676)
MSEdge::setSlope(SUMOReal arg=-0.004571)
MSEdge::setSlope(SUMOReal arg=0.000835)
MSEdge::setSlope(SUMOReal arg=-0.006629)
MSEdge::setSlope(SUMOReal arg=-0.002649)
MSEdge::setSlope(SUMOReal arg=-0.009006)
MSEdge::setSlope(SUMOReal arg=0.006344)
MSEdge::setSlope(SUMOReal arg=-0.012307)
MSEdge::setSlope(SUMOReal arg=0.002197)
MSEdge::setSlope(SUMOReal arg=-0.006139)
MSEdge::setSlope(SUMOReal arg=0.030299)
MSEdge::setSlope(SUMOReal arg=-0.009375)
MSEdge::setSlope(SUMOReal arg=-0.035194)
MSEdge::setSlope(SUMOReal arg=-0.079586)
MSEdge::setSlope(SUMOReal arg=0.001317)
MSEdge::setSlope(SUMOReal arg=0.023915)
MSEdge::setSlope(SUMOReal arg=-0.007845)
MSEdge::setSlope(SUMOReal arg=0.011471)
MSEdge::setSlope(SUMOReal arg=-0.002179)
MSEdge::setSlope(SUMOReal arg=0.132552)
MSEdge::setSlope(SUMOReal arg=-0.014873)
MSEdge::setSlope(SUMOReal arg=0.005754)
MSEdge::setSlope(SUMOReal arg=0.002754)
MSEdge::setSlope(SUMOReal arg=-0.001818)
MSEdge::setSlope(SUMOReal arg=0.000111)
MSEdge::setSlope(SUMOReal arg=0.009286)
MSEdge::setSlope(SUMOReal arg=-0.009334)
MSEdge::setSlope(SUMOReal arg=-0.003568)
MSEdge::setSlope(SUMOReal arg=-0.033899)
MSEdge::setSlope(SUMOReal arg=0.053387)
MSEdge::setSlope(SUMOReal arg=0.032366)
MSEdge::setSlope(SUMOReal arg=-0.034207)
MSEdge::setSlope(SUMOReal arg=-0.030118)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.018436)
MSEdge::setSlope(SUMOReal arg=-0.017841)
MSEdge::setSlope(SUMOReal arg=-0.008163)
MSEdge::setSlope(SUMOReal arg=-0.029931)
MSEdge::setSlope(SUMOReal arg=-0.050951)
MSEdge::setSlope(SUMOReal arg=0.000814)
MSEdge::setSlope(SUMOReal arg=0.023446)
MSEdge::setSlope(SUMOReal arg=0.001238)
MSEdge::setSlope(SUMOReal arg=-0.001183)
MSEdge::setSlope(SUMOReal arg=0.000731)
MSEdge::setSlope(SUMOReal arg=-0.010167)
MSEdge::setSlope(SUMOReal arg=-0.003817)
MSEdge::setSlope(SUMOReal arg=0.010554)
MSEdge::setSlope(SUMOReal arg=-0.003344)
MSEdge::setSlope(SUMOReal arg=-0.007948)
MSEdge::setSlope(SUMOReal arg=0.005538)
MSEdge::setSlope(SUMOReal arg=0.006984)
MSEdge::setSlope(SUMOReal arg=-0.006732)
MSEdge::setSlope(SUMOReal arg=0.001793)
MSEdge::setSlope(SUMOReal arg=0.001598)
MSEdge::setSlope(SUMOReal arg=0.000651)
MSEdge::setSlope(SUMOReal arg=-0.000630)
MSEdge::setSlope(SUMOReal arg=-0.000741)
MSEdge::setSlope(SUMOReal arg=0.020489)
MSEdge::setSlope(SUMOReal arg=0.020758)
MSEdge::setSlope(SUMOReal arg=-0.007067)
MSEdge::setSlope(SUMOReal arg=-0.002702)
MSEdge::setSlope(SUMOReal arg=0.010798)
MSEdge::setSlope(SUMOReal arg=-0.004228)
MSEdge::setSlope(SUMOReal arg=0.005721)
MSEdge::setSlope(SUMOReal arg=-0.019430)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=-0.002111)
MSEdge::setSlope(SUMOReal arg=0.034162)
MSEdge::setSlope(SUMOReal arg=0.021680)
MSEdge::setSlope(SUMOReal arg=0.028272)
MSEdge::setSlope(SUMOReal arg=-0.012792)
MSEdge::setSlope(SUMOReal arg=0.004289)
MSEdge::setSlope(SUMOReal arg=-0.007053)
MSEdge::setSlope(SUMOReal arg=0.002488)
MSEdge::setSlope(SUMOReal arg=0.052835)
MSEdge::setSlope(SUMOReal arg=0.069105)
MSEdge::setSlope(SUMOReal arg=-0.179853)
MSEdge::setSlope(SUMOReal arg=-0.030752)
MSEdge::setSlope(SUMOReal arg=-0.964413)
MSEdge::setSlope(SUMOReal arg=0.042713)
MSEdge::setSlope(SUMOReal arg=-0.754873)
MSEdge::setSlope(SUMOReal arg=-0.096992)
MSEdge::setSlope(SUMOReal arg=-0.039583)
MSEdge::setSlope(SUMOReal arg=0.002478)
MSEdge::setSlope(SUMOReal arg=-0.017887)
MSEdge::setSlope(SUMOReal arg=0.019115)
MSEdge::setSlope(SUMOReal arg=-0.005793)
MSEdge::setSlope(SUMOReal arg=0.008906)
MSEdge::setSlope(SUMOReal arg=0.002919)
MSEdge::setSlope(SUMOReal arg=-0.001761)
MSEdge::setSlope(SUMOReal arg=-0.014550)
MSEdge::setSlope(SUMOReal arg=-0.002177)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.001422)
MSEdge::setSlope(SUMOReal arg=-0.000990)
MSEdge::setSlope(SUMOReal arg=-0.002144)
MSEdge::setSlope(SUMOReal arg=0.009039)
MSEdge::setSlope(SUMOReal arg=-0.012262)
MSEdge::setSlope(SUMOReal arg=-0.003732)
MSEdge::setSlope(SUMOReal arg=-0.000188)
MSEdge::setSlope(SUMOReal arg=-0.065125)
MSEdge::setSlope(SUMOReal arg=-0.112825)
MSEdge::setSlope(SUMOReal arg=0.098581)
MSEdge::setSlope(SUMOReal arg=0.031913)
MSEdge::setSlope(SUMOReal arg=0.002651)
MSEdge::setSlope(SUMOReal arg=-0.003542)
MSEdge::setSlope(SUMOReal arg=0.016665)
MSEdge::setSlope(SUMOReal arg=0.010880)
MSEdge::setSlope(SUMOReal arg=-0.002204)
MSEdge::setSlope(SUMOReal arg=-0.044223)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=-0.029027)
MSEdge::setSlope(SUMOReal arg=0.015675)
MSEdge::setSlope(SUMOReal arg=-0.140413)
MSEdge::setSlope(SUMOReal arg=-0.135171)
MSEdge::setSlope(SUMOReal arg=0.266552)
MSEdge::setSlope(SUMOReal arg=0.025253)
MSEdge::setSlope(SUMOReal arg=0.024708)
MSEdge::setSlope(SUMOReal arg=-0.003200)
MSEdge::setSlope(SUMOReal arg=-0.036005)
MSEdge::setSlope(SUMOReal arg=0.001094)
MSEdge::setSlope(SUMOReal arg=-0.007782)
MSEdge::setSlope(SUMOReal arg=-0.004510)
MSEdge::setSlope(SUMOReal arg=0.007812)
MSEdge::setSlope(SUMOReal arg=0.003900)
MSEdge::setSlope(SUMOReal arg=-0.000632)
MSEdge::setSlope(SUMOReal arg=0.000239)
MSEdge::setSlope(SUMOReal arg=0.004019)
MSEdge::setSlope(SUMOReal arg=-0.026286)
MSEdge::setSlope(SUMOReal arg=0.008889)
MSEdge::setSlope(SUMOReal arg=-0.021028)
MSEdge::setSlope(SUMOReal arg=-0.034751)
MSEdge::setSlope(SUMOReal arg=-0.037815)
MSEdge::setSlope(SUMOReal arg=0.007804)
MSEdge::setSlope(SUMOReal arg=0.000480)
MSEdge::setSlope(SUMOReal arg=-0.000000)
MSEdge::setSlope(SUMOReal arg=0.004762)
MSEdge::setSlope(SUMOReal arg=0.004943)
MSEdge::setSlope(SUMOReal arg=0.000598)
MSEdge::setSlope(SUMOReal arg=-0.005596)
MSEdge::setSlope(SUMOReal arg=-0.003879)
MSEdge::setSlope(SUMOReal arg=-0.005213)
MSEdge::setSlope(SUMOReal arg=0.002543)
MSEdge::setSlope(SUMOReal arg=-0.004187)
MSEdge::setSlope(SUMOReal arg=0.002682)
MSEdge::setSlope(SUMOReal arg=0.000899)
MSEdge::setSlope(SUMOReal arg=-0.003839)
MSEdge::setSlope(SUMOReal arg=0.008222)
MSEdge::setSlope(SUMOReal arg=0.047024)
MSEdge::setSlope(SUMOReal arg=-0.006196)
MSEdge::setSlope(SUMOReal arg=0.000434)
MSEdge::setSlope(SUMOReal arg=0.003334)
MSEdge::setSlope(SUMOReal arg=0.006030)
MSEdge::setSlope(SUMOReal arg=0.000757)
MSEdge::setSlope(SUMOReal arg=-0.006640)
MSEdge::setSlope(SUMOReal arg=-0.013010)
MSEdge::setSlope(SUMOReal arg=-0.017866)
MSEdge::setSlope(SUMOReal arg=0.004819)
MSEdge::setSlope(SUMOReal arg=0.002084)
MSEdge::setSlope(SUMOReal arg=0.003141)
MSEdge::setSlope(SUMOReal arg=-0.002851)
MSEdge::setSlope(SUMOReal arg=0.005479)
MSEdge::setSlope(SUMOReal arg=-0.001720)
MSEdge::setSlope(SUMOReal arg=0.081729)
MSEdge::setSlope(SUMOReal arg=-0.018474)
MSEdge::setSlope(SUMOReal arg=0.011617)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.007568)
MSEdge::setSlope(SUMOReal arg=-0.009982)
MSEdge::setSlope(SUMOReal arg=0.003676)
MSEdge::setSlope(SUMOReal arg=0.267749)
MSEdge::setSlope(SUMOReal arg=-0.030262)
MSEdge::setSlope(SUMOReal arg=-0.008193)
MSEdge::setSlope(SUMOReal arg=-0.006434)
MSEdge::setSlope(SUMOReal arg=0.005144)
MSEdge::setSlope(SUMOReal arg=0.000000)
MSEdge::setSlope(SUMOReal arg=0.024891)
MSEdge::setSlope(SUMOReal arg=0.007207)
MSEdge::setSlope(SUMOReal arg=-0.021854)
MSRouteHandler::MSRouteHandler(file=../../Lucca/Lucca.alturas.rou.xml, addVehiclesDirectly=0) - MSRouteHandler instance=0x7814660
Loading done.
NLHandler::~NLHandler() - NLHandler instance=0x7fff16c1c680
MSRouteHandler::~MSRouteHandler() - MSRouteHandler instance=0x7fff16c1c680
Net loading complete
Net could be loaded
Net checked:
 got 2638 positive sloped edges
 got 18563 zero sloped edges
  got 18339 internal zero sloped edges
  got 224 noninternal zero sloped edges
 got 2687 negative sloped edges
 got 0 NaN (unsetted) sloped edges
Simulation started with time: 0.00
Simulation started with time: 0.00
----> void MSNet::simulate(...)
----> void MSNet::preSimStepOutput() const
Step #0.00----> void MSNet::simulationStep()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHElecVeh0000001
 route->getID()=!SHElecVeh0000001
 type->getID()=DEFAULT_ELECVEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHElecVeh0000001
  v.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
----> void MSDevice_FEV::buildVehicleDevices(...)
 (v.getVehicleType().getID()==DEFAULT_ELECVEHTYPE)
const std::string& MSBaseVehicle::getId()

----> MSDevice_FEV::MSDevice_FEV(...id=SHElecVeh0000001fevDevice...)
[100] MSDevice_FEV::MSDevice_FEV(...id=SHElecVeh0000001fevDevice...)
const std::string& MSBaseVehicle::getId()

  holder.getID().c_str()=SHElecVeh0000001
  holder.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHElecVeh0000001
  pars->color=0.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHElecVeh0000001
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=fev0
 route->getID()=!fev0
 type->getID()=DEFAULT_ELECVEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=fev0
  v.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
----> void MSDevice_FEV::buildVehicleDevices(...)
 (v.getVehicleType().getID()==DEFAULT_ELECVEHTYPE)
const std::string& MSBaseVehicle::getId()

----> MSDevice_FEV::MSDevice_FEV(...id=fev0fevDevice...)
[100] MSDevice_FEV::MSDevice_FEV(...id=fev0fevDevice...)
const std::string& MSBaseVehicle::getId()

  holder.getID().c_str()=fev0
  holder.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=fev0
  pars->color=0.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=fev0
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (1ms ~= 1000.00*RT, ~1000.00UPS, vehicles TOT 1 ACT 1)             ----> void MSNet::preSimStepOutput() const
Step #1.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.44)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.44) - my_last_speed=0.00
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.44) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{1.44}) - returning newSpeed=1.44
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{1.44}
 vNext{1.44}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{1.44}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{1.44}
[450] bool MSVehicle::moveChecked()
 vNext{1.44}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){53.40}
 getCapacity(){49.66}
my_last_speed=0.00
accel=1.44m/s^2
Fad=0.45N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=3887.70N
Frr=120.97N
Fte=4130.37N
newSpeed=1.44m/s
Pte=5954.70W
omega=53.34
omega nonzero processing
Pmot_out=5656.97W
Torque=106.05
eff_mot=0.59
Pmot_in=3320.66W
computeElectricAuxiliaries()=14688999353.60
Pbat=4083598.25W
my_last_DoD=0.000001000
0.15 * my_last_DoD=0.000000150
2.15 - 0.15 * my_last_DoD=2.149999850
E=928.799935200
veh.getVehicleType().getCapacity()=49.66
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.191373686
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4083598.25)
E*E=862669.32
4*Ri*Pbat=3125973.00
E*E-4*Ri*Pbat=-2263303.68
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.38
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2426.67
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.35
 my_curr_charge_rem{2.345997602}
 my_last_charge_rem{0.000100000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{23459.976021092}
 my_curr_charge_rem{0.000110000}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 71.71
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=49.66 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 1.44
my_curr_DoD = 0.000001534
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.10
 my_curr_energy_removed_a = 0.10
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1134.33
 my_curr_energy_removed_c = 0.07
Pbat = 4083598.25
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1134.33
 (printf) Pbat * DELTA_T_hours = 1134.3328488
eff_mot = 0.59
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (1ms ~= 1000.00*RT, ~1000.00UPS, vehicles TOT 1 ACT 1)             ----> void MSNet::preSimStepOutput() const
Step #2.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.12)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.12) - my_last_speed=1.44
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.12) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{3.12}) - returning newSpeed=3.12
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{3.12}
 vNext{3.12}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{3.12}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{3.12}
[450] bool MSVehicle::moveChecked()
 vNext{3.12}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){49.66}
 getCapacity(){51.26}
my_last_speed=1.44
accel=1.67m/s^2
Fad=2.10N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=4516.64N
Frr=120.97N
Fte=4760.96N
newSpeed=3.12m/s
Pte=14832.52W
omega=115.27
omega nonzero processing
Pmot_out=14090.89W
Torque=122.24
eff_mot=0.73
Pmot_in=10345.13W
computeElectricAuxiliaries()=14688999353.60
Pbat=4090622.72W
my_last_DoD=0.000001534
0.15 * my_last_DoD=0.000000230
2.15 - 0.15 * my_last_DoD=2.149999770
E=928.799900593
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4090622.72)
E*E=862669.26
4*Ri*Pbat=3033495.50
E*E-4*Ri*Pbat=-2170826.25
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434013990}
 my_last_charge_rem{0.000110000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{22127.399904843}
 my_curr_charge_rem{0.000121000}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 3.12
my_curr_DoD = 0.000001626
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.11
 my_curr_energy_removed_a = 0.21
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1136.28
 my_curr_energy_removed_c = 0.08
Pbat = 4090622.72
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1136.28
 (printf) Pbat * DELTA_T_hours = 1136.2840908
eff_mot = 0.73
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.12
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHElecVeh000000
 route->getID()=!SHElecVeh000000
 type->getID()=DEFAULT_ELECVEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHElecVeh000000
  v.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
----> void MSDevice_FEV::buildVehicleDevices(...)
 (v.getVehicleType().getID()==DEFAULT_ELECVEHTYPE)
const std::string& MSBaseVehicle::getId()

----> MSDevice_FEV::MSDevice_FEV(...id=SHElecVeh000000fevDevice...)
[100] MSDevice_FEV::MSDevice_FEV(...id=SHElecVeh000000fevDevice...)
const std::string& MSBaseVehicle::getId()

  holder.getID().c_str()=SHElecVeh000000
  holder.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHElecVeh000000
  pars->color=0.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHElecVeh000000
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (1ms ~= 1000.00*RT, ~2000.00UPS, vehicles TOT 2 ACT 2)             ----> void MSNet::preSimStepOutput() const
Step #3.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.66)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.66) - my_last_speed=3.12
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.66) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.66}) - returning newSpeed=5.66
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{5.66}
 vNext{5.66}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.66}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.66}
[450] bool MSVehicle::moveChecked()
 vNext{5.66}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=3.12
accel=2.54m/s^2
Fad=6.94N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=6856.56N
Frr=120.97N
Fte=7105.71N
newSpeed=5.66m/s
Pte=40192.20W
omega=209.28
omega nonzero processing
Pmot_out=38182.59W
Torque=182.44
eff_mot=0.78
Pmot_in=29853.75W
computeElectricAuxiliaries()=14688999353.60
Pbat=4110131.34W
my_last_DoD=0.000001626
0.15 * my_last_DoD=0.000000244
2.15 - 0.15 * my_last_DoD=2.149999756
E=928.799894607
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4110131.34)
E*E=862669.24
4*Ri*Pbat=3047962.57
E*E-4*Ri*Pbat=-2185293.33
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434024971}
 my_last_charge_rem{0.000121000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{20115.908854002}
 my_curr_charge_rem{0.000133100}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.66
my_curr_DoD = 0.000001789
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.12
 my_curr_energy_removed_a = 0.34
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1141.70
 my_curr_energy_removed_c = 0.09
Pbat = 4110131.34
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1141.70
 (printf) Pbat * DELTA_T_hours = 1141.7031518
eff_mot = 0.78
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=8.77
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.96)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.96) - my_last_speed=0.00
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.96) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{1.96}) - returning newSpeed=1.96
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{1.96}
 vNext{1.96}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{1.96}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{1.96}
[450] bool MSVehicle::moveChecked()
 vNext{1.96}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=0.00
accel=1.96m/s^2
Fad=0.83N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=75.86N
Fla=5289.39N
Frr=120.97N
Fte=5487.05N
newSpeed=1.96m/s
Pte=10760.77W
omega=72.56
omega nonzero processing
Pmot_out=10222.73W
Torque=140.88
eff_mot=0.61
Pmot_in=6225.54W
computeElectricAuxiliaries()=14725921382.40
Pbat=4096759.26W
my_last_DoD=0.000001000
0.15 * my_last_DoD=0.000000150
2.15 - 0.15 * my_last_DoD=2.149999850
E=928.799935200
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4096759.26)
E*E=862669.32
4*Ri*Pbat=3038046.19
E*E-4*Ri*Pbat=-2175376.87
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434004095}
 my_last_charge_rem{0.000100000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{24340.040947282}
 my_curr_charge_rem{0.000110000}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 1.96
my_curr_DoD = 0.000001479
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.10
 my_curr_energy_removed_a = 0.10
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1137.99
 my_curr_energy_removed_c = 0.07
Pbat = 4096759.26
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1137.99
 (printf) Pbat * DELTA_T_hours = 1137.9886848
eff_mot = 0.61
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (2ms ~= 500.00*RT, ~1000.00UPS, vehicles TOT 2 ACT 2)              ----> void MSNet::preSimStepOutput() const
Step #4.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.49)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.49) - my_last_speed=5.66
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.49) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{7.49}) - returning newSpeed=7.49
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{7.49}
 vNext{7.49}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{7.49}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{7.49}
[450] bool MSVehicle::moveChecked()
 vNext{7.49}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=5.66
accel=1.83m/s^2
Fad=12.16N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=4946.51N
Frr=120.97N
Fte=5200.89N
newSpeed=7.49m/s
Pte=38951.45W
omega=277.11
omega nonzero processing
Pmot_out=37003.88W
Torque=133.54
eff_mot=0.86
Pmot_in=31779.17W
computeElectricAuxiliaries()=14688999353.60
Pbat=4112056.77W
my_last_DoD=0.000001789
0.15 * my_last_DoD=0.000000268
2.15 - 0.15 * my_last_DoD=2.149999732
E=928.799884067
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4112056.77)
E*E=862669.22
4*Ri*Pbat=3049390.41
E*E-4*Ri*Pbat=-2186721.19
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434037039}
 my_last_charge_rem{0.000133100}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{18287.280535666}
 my_curr_charge_rem{0.000146410}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 7.49
my_curr_DoD = 0.000001968
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.14
 my_curr_energy_removed_a = 0.47
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1142.24
 my_curr_energy_removed_c = 0.09
Pbat = 4112056.77
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1142.24
 (printf) Pbat * DELTA_T_hours = 1142.2379918
eff_mot = 0.86
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=16.26
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.50)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.50) - my_last_speed=1.96
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.50) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.50}) - returning newSpeed=4.50
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{4.50}
 vNext{4.50}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.50}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.50}
[450] bool MSVehicle::moveChecked()
 vNext{4.50}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=1.96
accel=2.54m/s^2
Fad=4.40N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=75.86N
Fla=6863.11N
Frr=120.97N
Fte=7064.34N
newSpeed=4.50m/s
Pte=31820.79W
omega=166.66
omega nonzero processing
Pmot_out=30229.75W
Torque=181.38
eff_mot=0.74
Pmot_in=22431.32W
computeElectricAuxiliaries()=14725921382.40
Pbat=4112965.04W
my_last_DoD=0.000001479
0.15 * my_last_DoD=0.000000222
2.15 - 0.15 * my_last_DoD=2.149999778
E=928.799904188
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4112965.04)
E*E=862669.26
4*Ri*Pbat=3050063.96
E*E-4*Ri*Pbat=-2187394.70
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434014000}
 my_last_charge_rem{0.000110000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{22127.400004171}
 my_curr_charge_rem{0.000121000}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.50
my_curr_DoD = 0.000001626
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.11
 my_curr_energy_removed_a = 0.21
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1142.49
 my_curr_energy_removed_c = 0.08
Pbat = 4112965.04
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1142.49
 (printf) Pbat * DELTA_T_hours = 1142.4902898
eff_mot = 0.74
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=4.50
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{-49.23}, bearing{229.23}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,125402.000,A,4350.1008,N,01028.3906,E,8.8,229.2,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999998,60.00,20.53,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (529ms ~= 1.89*RT, ~3.78UPS, vehicles TOT 2 ACT 2)                 ----> void MSNet::preSimStepOutput() const
Step #5.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.12)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.12) - my_last_speed=7.49
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.12) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{9.12}) - returning newSpeed=9.12
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{9.12}
 vNext{9.12}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{9.12}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{9.12}
[450] bool MSVehicle::moveChecked()
 vNext{9.12}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=7.49
accel=1.63m/s^2
Fad=18.05N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=4408.72N
Frr=120.97N
Fte=4668.98N
newSpeed=9.12m/s
Pte=42595.82W
omega=337.56
omega nonzero processing
Pmot_out=40466.03W
Torque=119.88
eff_mot=0.89
Pmot_in=35907.39W
computeElectricAuxiliaries()=14688999353.60
Pbat=4116184.99W
my_last_DoD=0.000001968
0.15 * my_last_DoD=0.000000295
2.15 - 0.15 * my_last_DoD=2.149999705
E=928.799872474
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4116184.99)
E*E=862669.20
4*Ri*Pbat=3052451.79
E*E-4*Ri*Pbat=-2189782.58
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434050314}
 my_last_charge_rem{0.000146410}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{16624.891155361}
 my_curr_charge_rem{0.000161051}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 9.12
my_curr_DoD = 0.000002165
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.15
 my_curr_energy_removed_a = 0.62
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1143.38
 my_curr_energy_removed_c = 0.10
Pbat = 4116184.99
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1143.38
 (printf) Pbat * DELTA_T_hours = 1143.3847188
eff_mot = 0.89
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=25.38
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.71)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.71) - my_last_speed=4.50
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.71) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{6.71}) - returning newSpeed=6.71
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{6.71}
 vNext{6.71}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{6.71}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{6.71}
[450] bool MSVehicle::moveChecked()
 vNext{6.71}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.50
accel=2.20m/s^2
Fad=9.75N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=75.86N
Fla=5939.90N
Frr=120.97N
Fte=6146.48N
newSpeed=6.71m/s
Pte=41215.91W
omega=248.11
omega nonzero processing
Pmot_out=39155.11W
Torque=157.82
eff_mot=0.83
Pmot_in=32393.60W
computeElectricAuxiliaries()=14725921382.40
Pbat=4122927.31W
my_last_DoD=0.000001626
0.15 * my_last_DoD=0.000000244
2.15 - 0.15 * my_last_DoD=2.149999756
E=928.799894607
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4122927.31)
E*E=862669.24
4*Ri*Pbat=3057451.72
E*E-4*Ri*Pbat=-2194782.47
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434024971}
 my_last_charge_rem{0.000121000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{20115.908854002}
 my_curr_charge_rem{0.000133100}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 6.71
my_curr_DoD = 0.000001789
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.12
 my_curr_energy_removed_a = 0.34
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1145.26
 my_curr_energy_removed_c = 0.09
Pbat = 4122927.31
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1145.26
 (printf) Pbat * DELTA_T_hours = 1145.2575878
eff_mot = 0.83
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=11.21
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{-51.16}, bearing{231.16}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,131042.000,A,4350.0986,N,01028.3867,E,13.0,231.2,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999998,60.00,20.53,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (517ms ~= 1.93*RT, ~3.87UPS, vehicles TOT 2 ACT 2)                 ----> void MSNet::preSimStepOutput() const
Step #6.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.01)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.01) - my_last_speed=9.12
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.01) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{11.01}) - returning newSpeed=11.01
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{11.01}
 vNext{11.01}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{11.01}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.01}
[450] bool MSVehicle::moveChecked()
 vNext{11.01}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=9.12
accel=1.89m/s^2
Fad=26.31N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=5103.25N
Frr=120.97N
Fte=5371.77N
newSpeed=11.01m/s
Pte=59166.26W
omega=407.53
omega nonzero processing
Pmot_out=56207.94W
Torque=137.92
eff_mot=0.89
Pmot_in=50232.65W
computeElectricAuxiliaries()=14688999353.60
Pbat=4130510.25W
my_last_DoD=0.000002165
0.15 * my_last_DoD=0.000000325
2.15 - 0.15 * my_last_DoD=2.149999675
E=928.799859721
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4130510.25)
E*E=862669.18
4*Ri*Pbat=3063075.02
E*E-4*Ri*Pbat=-2200405.84
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434064916}
 my_last_charge_rem{0.000161051}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{15113.628082357}
 my_curr_charge_rem{0.000177156}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.01
my_curr_DoD = 0.000002381
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.16
 my_curr_energy_removed_a = 0.79
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1147.36
 my_curr_energy_removed_c = 0.11
Pbat = 4130510.25
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1147.36
 (printf) Pbat * DELTA_T_hours = 1147.3639598
eff_mot = 0.89
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=36.40
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.05)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.05) - my_last_speed=6.71
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.05) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{3.05}) - returning res=-97.17
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-97.17}
 vNext{3.05}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{3.05}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{3.05}
[450] bool MSVehicle::moveChecked()
 vNext{3.05}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=6.71
accel=-3.66m/s^2
Fad=2.01N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=75.86N
Fla=-9870.67N
Frr=120.97N
Fte=-9671.83N
newSpeed=3.05m/s
Pte=-29477.55W
omega=112.77
omega nonzero processing
Pte=-8843.27W
Pmot_out=-9308.70W
Torque=-82.55
eff_mot=1.40
Pmot_in=-6646.02W
computeElectricAuxiliaries()=14725921382.40
Pbat=4083887.70W
my_last_DoD=0.000001789
0.15 * my_last_DoD=0.000000268
2.15 - 0.15 * my_last_DoD=2.149999732
E=928.799884067
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4083887.70)
E*E=862669.22
4*Ri*Pbat=3028500.99
E*E-4*Ri*Pbat=-2165831.76
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434037039}
 my_last_charge_rem{0.000133100}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{18287.280535666}
 my_curr_charge_rem{0.000146410}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 3.05
my_curr_DoD = 0.000001968
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.14
 my_curr_energy_removed_a = 0.47
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1134.41
 my_curr_energy_removed_c = 0.09
Pbat = 4083887.70
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1134.41
 (printf) Pbat * DELTA_T_hours = 1134.4132498
eff_mot = 1.40
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=14.26
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{-53.89}, bearing{233.89}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,132722.000,A,4350.0977,N,01028.3847,E,5.9,233.9,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999998,60.00,20.53,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000002
 route->getID()=!SHNormVeh000002
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000002
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000002
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000002
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000003
 route->getID()=!SHNormVeh000003
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000003
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000003
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000003
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (539ms ~= 1.86*RT, ~7.42UPS, vehicles TOT 4 ACT 4)                 ----> void MSNet::preSimStepOutput() const
Step #7.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.61)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.61) - my_last_speed=11.01
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.61) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.61}) - returning res=9.92
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{9.92}
 vNext{13.61}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.61}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{9.92}
[450] bool MSVehicle::moveChecked()
 vNext{9.92}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.01
accel=-1.09m/s^2
Fad=21.34N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=-2951.72N
Frr=120.97N
Fte=-2688.16N
newSpeed=9.92m/s
Pte=-26667.76W
omega=367.06
omega nonzero processing
Pte=-8000.33W
Pmot_out=-8421.40W
Torque=-22.94
eff_mot=1.14
Pmot_in=-7379.51W
computeElectricAuxiliaries()=14688999353.60
Pbat=4072898.09W
my_last_DoD=0.000002381
0.15 * my_last_DoD=0.000000357
2.15 - 0.15 * my_last_DoD=2.149999643
E=928.799845694
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4072898.09)
E*E=862669.15
4*Ri*Pbat=3020351.39
E*E-4*Ri*Pbat=-2157682.24
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434080979}
 my_last_charge_rem{0.000177156}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{13739.752561444}
 my_curr_charge_rem{0.000194872}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 9.92
my_curr_DoD = 0.000002619
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.18
 my_curr_energy_removed_a = 0.97
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1131.36
 my_curr_energy_removed_c = 0.12
Pbat = 4072898.09
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1131.36
 (printf) Pbat * DELTA_T_hours = 1131.3605808
eff_mot = 1.14
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=46.32
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.77)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.77) - my_last_speed=3.05
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.77) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.77}) - returning newSpeed=4.77
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{4.77}
 vNext{4.77}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.77}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.77}
[450] bool MSVehicle::moveChecked()
 vNext{4.77}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=14.26
getPositionOnLane()=2.01
myCurrentTraveledDistance=16.27
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 4000
 time_ = 4000.00
 time_ = 4.00
 a-b (distance) = 14.26
 avg_speed = 3.56
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=0
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-8
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=fev0
 avg_speed = 12.83
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{-45.35}, bearing{225.35}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,134402.000,A,4350.0959,N,01028.3826,E,9.3,225.4,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999998,60.00,20.53,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=3.05
accel=1.73m/s^2
Fad=4.94N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=4655.17N
Frr=120.97N
Fte=4781.08N
newSpeed=4.77m/s
Pte=22819.49W
omega=176.60
omega nonzero processing
Pmot_out=21678.51W
Torque=122.76
eff_mot=0.81
Pmot_in=17506.65W
computeElectricAuxiliaries()=14725921382.40
Pbat=4108040.37W
my_last_DoD=0.000001968
0.15 * my_last_DoD=0.000000295
2.15 - 0.15 * my_last_DoD=2.149999705
E=928.799872474
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4108040.37)
E*E=862669.20
4*Ri*Pbat=3046411.96
E*E-4*Ri*Pbat=-2183742.76
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434050314}
 my_last_charge_rem{0.000146410}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{16624.891155361}
 my_curr_charge_rem{0.000161051}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.77
my_curr_DoD = 0.000002165
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.15
 my_curr_energy_removed_a = 0.62
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1141.12
 my_curr_energy_removed_c = 0.10
Pbat = 4108040.37
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1141.12
 (printf) Pbat * DELTA_T_hours = 1141.1223258
eff_mot = 0.81
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{1.99}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=2.01)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=2.01) - my_last_speed=0.00
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=2.01) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{2.01}) - returning newSpeed=2.01
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{2.01}
 vNext{2.01}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{2.01}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{2.01}
[450] bool MSVehicle::moveChecked()
 vNext{2.01}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=0.00
accel=2.01m/s^2
Fad=0.88N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=5427.37N
Frr=120.97N
Fte=5392.24N
newSpeed=2.01m/s
Pte=10850.55W
omega=74.45
omega nonzero processing
Pmot_out=10308.03W
Torque=138.45
eff_mot=0.62
Pmot_in=6374.81W
computeElectricAuxiliaries()=14727999091.20
Pbat=4097485.67W
my_last_DoD=0.000001000
0.15 * my_last_DoD=0.000000150
2.15 - 0.15 * my_last_DoD=2.149999850
E=928.799935200
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4097485.67)
E*E=862669.32
4*Ri*Pbat=3038584.88
E*E-4*Ri*Pbat=-2175915.56
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434004095}
 my_last_charge_rem{0.000100000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{24340.040947282}
 my_curr_charge_rem{0.000110000}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 2.01
my_curr_DoD = 0.000001479
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.10
 my_curr_energy_removed_a = 0.10
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1138.19
 my_curr_energy_removed_c = 0.07
Pbat = 4097485.67
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1138.19
 (printf) Pbat * DELTA_T_hours = 1138.1904658
eff_mot = 0.62
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000005
 route->getID()=!SHNormVeh000005
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000005
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000005
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000005
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (469ms ~= 2.13*RT, ~10.66UPS, vehicles TOT 5 ACT 5)                ----> void MSNet::preSimStepOutput() const
Step #8.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.78)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.78) - my_last_speed=13.61
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.78) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{11.78}) - returning res=-61.83
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-61.83}
 vNext{11.78}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{11.78}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.78}
[450] bool MSVehicle::moveChecked()
 vNext{11.78}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=9.92
accel=1.86m/s^2
Fad=30.04N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=5029.58N
Frr=120.97N
Fte=5301.84N
newSpeed=11.78m/s
Pte=62478.43W
omega=436.02
omega nonzero processing
Pmot_out=59354.50W
Torque=136.13
eff_mot=0.90
Pmot_in=53400.92W
computeElectricAuxiliaries()=14688999353.60
Pbat=4133678.52W
my_last_DoD=0.000002619
0.15 * my_last_DoD=0.000000393
2.15 - 0.15 * my_last_DoD=2.149999607
E=928.799830263
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4133678.52)
E*E=862669.12
4*Ri*Pbat=3065424.52
E*E-4*Ri*Pbat=-2202755.40
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434098647}
 my_last_charge_rem{0.000194872}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{12490.774815159}
 my_curr_charge_rem{0.000214359}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.78
my_curr_DoD = 0.000002881
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.20
 my_curr_energy_removed_a = 1.17
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1148.24
 my_curr_energy_removed_c = 0.14
Pbat = 4133678.52
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1148.24
 (printf) Pbat * DELTA_T_hours = 1148.2440348
eff_mot = 0.90
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=58.10
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.25}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=4.25
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.53)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.53) - my_last_speed=2.01
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.53) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.53}) - returning newSpeed=4.53
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{4.53}
 vNext{4.53}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.53}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.53}
[450] bool MSVehicle::moveChecked()
 vNext{4.53}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=2.01
accel=2.52m/s^2
Fad=4.45N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=6804.71N
Frr=120.97N
Fte=6773.15N
newSpeed=4.53m/s
Pte=30708.92W
omega=167.76
omega nonzero processing
Pmot_out=29173.47W
Torque=173.91
eff_mot=0.75
Pmot_in=21886.41W
computeElectricAuxiliaries()=14727999091.20
Pbat=4112997.27W
my_last_DoD=0.000001479
0.15 * my_last_DoD=0.000000222
2.15 - 0.15 * my_last_DoD=2.149999778
E=928.799904188
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4112997.27)
E*E=862669.26
4*Ri*Pbat=3050087.86
E*E-4*Ri*Pbat=-2187418.60
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434014000}
 my_last_charge_rem{0.000110000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{22127.400004171}
 my_curr_charge_rem{0.000121000}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.53
my_curr_DoD = 0.000001626
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.11
 my_curr_energy_removed_a = 0.21
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1142.50
 my_curr_energy_removed_c = 0.08
Pbat = 4112997.27
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1142.50
 (printf) Pbat * DELTA_T_hours = 1142.4992428
eff_mot = 0.75
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=4.53
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.23)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.23) - my_last_speed=4.77
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.23) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{6.23}) - returning newSpeed=6.23
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{6.23}
 vNext{6.23}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{6.23}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{6.23}
[450] bool MSVehicle::moveChecked()
 vNext{6.23}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=16.27
getPositionOnLane()=3.43
myCurrentTraveledDistance=19.70
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
[704] bool MSVehicle::moveChecked()
ARFTmode is set
[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{106.15}, bearing{73.85}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,020042.000,A,4350.0964,N,01028.3865,E,12.1,73.9,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999998,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.77
accel=1.46m/s^2
Fad=8.41N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-74.79N
Fla=3944.51N
Frr=120.97N
Fte=3999.11N
newSpeed=6.23m/s
Pte=24932.87W
omega=230.68
omega nonzero processing
Pmot_out=23686.23W
Torque=102.68
eff_mot=0.86
Pmot_in=20376.45W
computeElectricAuxiliaries()=14725921382.40
Pbat=4110910.17W
my_last_DoD=0.000002165
0.15 * my_last_DoD=0.000000325
2.15 - 0.15 * my_last_DoD=2.149999675
E=928.799859721
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4110910.17)
E*E=862669.18
4*Ri*Pbat=3048540.13
E*E-4*Ri*Pbat=-2185870.95
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434064916}
 my_last_charge_rem{0.000161051}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{15113.628082357}
 my_curr_charge_rem{0.000177156}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 6.23
my_curr_DoD = 0.000002381
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.16
 my_curr_energy_removed_a = 0.79
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1141.92
 my_curr_energy_removed_c = 0.11
Pbat = 4110910.17
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1141.92
 (printf) Pbat * DELTA_T_hours = 1141.9194918
eff_mot = 0.86
algo1 = 0.00
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.18}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (486ms ~= 2.06*RT, ~10.29UPS, vehicles TOT 5 ACT 5)                ----> void MSNet::preSimStepOutput() const
Step #9.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.50)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.50) - my_last_speed=11.78
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.50) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.50}) - returning newSpeed=13.50
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.50}
 vNext{13.50}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.50}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.50}
[450] bool MSVehicle::moveChecked()
 vNext{13.50}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.78
accel=1.71m/s^2
Fad=39.40N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=121.24N
Fla=4617.97N
Frr=120.97N
Fte=4899.59N
newSpeed=13.50m/s
Pte=66123.00W
omega=499.34
omega nonzero processing
Pmot_out=62816.85W
Torque=125.80
eff_mot=0.91
Pmot_in=57323.17W
computeElectricAuxiliaries()=14688999353.60
Pbat=4137600.77W
my_last_DoD=0.000002881
0.15 * my_last_DoD=0.000000432
2.15 - 0.15 * my_last_DoD=2.149999568
E=928.799813289
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4137600.77)
E*E=862669.09
4*Ri*Pbat=3068333.16
E*E-4*Ri*Pbat=-2205664.06
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434118083}
 my_last_charge_rem{0.000214359}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{11355.340500354}
 my_curr_charge_rem{0.000235795}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.50
my_curr_DoD = 0.000003169
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.22
 my_curr_energy_removed_a = 1.39
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1149.33
 my_curr_energy_removed_c = 0.15
Pbat = 4137600.77
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1149.33
 (printf) Pbat * DELTA_T_hours = 1149.3335478
eff_mot = 0.91
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=71.60
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.81}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=9.06
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.47)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.47) - my_last_speed=4.53
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.47) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{6.47}) - returning newSpeed=6.47
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{6.47}
 vNext{6.47}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{6.47}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{6.47}
[450] bool MSVehicle::moveChecked()
 vNext{6.47}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.53
accel=1.93m/s^2
Fad=9.05N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=5216.59N
Frr=120.97N
Fte=5189.62N
newSpeed=6.47m/s
Pte=33561.63W
omega=239.28
omega nonzero processing
Pmot_out=31883.55W
Torque=133.25
eff_mot=0.84
Pmot_in=26820.47W
computeElectricAuxiliaries()=14727999091.20
Pbat=4117931.33W
my_last_DoD=0.000001626
0.15 * my_last_DoD=0.000000244
2.15 - 0.15 * my_last_DoD=2.149999756
E=928.799894607
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4117931.33)
E*E=862669.24
4*Ri*Pbat=3053746.83
E*E-4*Ri*Pbat=-2191077.59
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434024971}
 my_last_charge_rem{0.000121000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{20115.908854002}
 my_curr_charge_rem{0.000133100}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 6.47
my_curr_DoD = 0.000001789
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.12
 my_curr_energy_removed_a = 0.34
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1143.87
 my_curr_energy_removed_c = 0.09
Pbat = 4117931.33
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1143.87
 (printf) Pbat * DELTA_T_hours = 1143.8698148
eff_mot = 0.84
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=11.00
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=8.44)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=8.44) - my_last_speed=6.23
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=8.44) - nonzero slope=-0.00
normal slope detected: -0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{8.44}) - returning newSpeed=8.44
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{8.44}
 vNext{8.44}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{8.44}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{8.44}
[450] bool MSVehicle::moveChecked()
 vNext{8.44}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=6.23
accel=2.20m/s^2
Fad=15.39N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-74.79N
Fla=5938.90N
Frr=120.97N
Fte=6000.49N
newSpeed=8.44m/s
Pte=50616.68W
omega=312.11
omega nonzero processing
Pmot_out=48085.85W
Torque=154.07
eff_mot=0.86
Pmot_in=41297.51W
computeElectricAuxiliaries()=14725921382.40
Pbat=4131831.23W
my_last_DoD=0.000002381
0.15 * my_last_DoD=0.000000357
2.15 - 0.15 * my_last_DoD=2.149999643
E=928.799845694
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4131831.23)
E*E=862669.15
4*Ri*Pbat=3064054.62
E*E-4*Ri*Pbat=-2201385.46
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434080979}
 my_last_charge_rem{0.000177156}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{13739.752561444}
 my_curr_charge_rem{0.000194872}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 8.44
my_curr_DoD = 0.000002619
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.18
 my_curr_energy_removed_a = 0.97
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1147.73
 my_curr_energy_removed_c = 0.12
Pbat = 4131831.23
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1147.73
 (printf) Pbat * DELTA_T_hours = 1147.7308968
eff_mot = 0.86
algo1 = 0.00
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=28.13
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{127.41}, bearing{52.59}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,021722.000,A,4350.0991,N,01028.3916,E,16.4,52.6,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999997,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.96}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=0.00
getPositionOnLane()=1.32
myCurrentTraveledDistance=1.32
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000006
 route->getID()=!SHNormVeh000006
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000006
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000006
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000006
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (497ms ~= 2.01*RT, ~12.07UPS, vehicles TOT 6 ACT 6)                ----> void MSNet::preSimStepOutput() const
Step #10.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.87)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.87) - my_last_speed=13.50
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.87) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{14.87}) - returning newSpeed=14.87
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{14.87}
 vNext{14.87}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{14.87}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{14.87}
[450] bool MSVehicle::moveChecked()
 vNext{14.87}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=71.60
getPositionOnLane()=8.18
myCurrentTraveledDistance=79.77
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 9000
 time_ = 9000.00
 time_ = 9.00
 a-b (distance) = 71.60
 avg_speed = 7.96
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh0000001
 avg_speed = 28.64
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.50
accel=1.38m/s^2
Fad=47.87N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-218.50N
Fla=3721.90N
Frr=120.97N
Fte=3672.24N
newSpeed=14.87m/s
Pte=54624.11W
omega=550.37
omega nonzero processing
Pmot_out=51892.90W
Torque=94.29
eff_mot=0.93
Pmot_in=48045.39W
computeElectricAuxiliaries()=14688999353.60
Pbat=4128322.99W
my_last_DoD=0.000003169
0.15 * my_last_DoD=0.000000475
2.15 - 0.15 * my_last_DoD=2.149999525
E=928.799794618
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4128322.99)
E*E=862669.06
4*Ri*Pbat=3061453.01
E*E-4*Ri*Pbat=-2198783.95
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434139462}
 my_last_charge_rem{0.000235795}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{10323.127486896}
 my_curr_charge_rem{0.000259374}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 14.87
my_curr_DoD = 0.000003486
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.24
 my_curr_energy_removed_a = 1.63
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1146.76
 my_curr_energy_removed_c = 0.17
Pbat = 4128322.99
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1146.76
 (printf) Pbat * DELTA_T_hours = 1146.7563878
eff_mot = 0.93
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.34}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=9.06
getPositionOnLane()=3.64
myCurrentTraveledDistance=12.70
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.91)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.91) - my_last_speed=6.47
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.91) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{7.91}) - returning newSpeed=7.91
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{7.91}
 vNext{7.91}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{7.91}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{7.91}
[450] bool MSVehicle::moveChecked()
 vNext{7.91}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=6.47
accel=1.45m/s^2
Fad=13.55N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=3902.27N
Frr=120.97N
Fte=3879.80N
newSpeed=7.91m/s
Pte=30701.45W
omega=292.79
omega nonzero processing
Pmot_out=29166.38W
Torque=99.62
eff_mot=0.89
Pmot_in=25857.89W
computeElectricAuxiliaries()=14727999091.20
Pbat=4116968.75W
my_last_DoD=0.000001789
0.15 * my_last_DoD=0.000000268
2.15 - 0.15 * my_last_DoD=2.149999732
E=928.799884067
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4116968.75)
E*E=862669.22
4*Ri*Pbat=3053033.00
E*E-4*Ri*Pbat=-2190363.78
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434037039}
 my_last_charge_rem{0.000133100}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{18287.280535666}
 my_curr_charge_rem{0.000146410}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 7.91
my_curr_DoD = 0.000001968
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.14
 my_curr_energy_removed_a = 0.47
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1143.60
 my_curr_energy_removed_c = 0.09
Pbat = 4116968.75
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1143.60
 (printf) Pbat * DELTA_T_hours = 1143.6024308
eff_mot = 0.89
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=18.91
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.52)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.52) - my_last_speed=8.44
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.52) - nonzero slope=-0.00
normal slope detected: -0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{10.52}) - returning newSpeed=10.52
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{10.52}
 vNext{10.52}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{10.52}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.52}
[450] bool MSVehicle::moveChecked()
 vNext{10.52}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=8.44
accel=2.08m/s^2
Fad=23.94N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-74.79N
Fla=5624.89N
Frr=120.97N
Fte=5695.02N
newSpeed=10.52m/s
Pte=59910.87W
omega=389.24
omega nonzero processing
Pmot_out=56915.33W
Torque=146.22
eff_mot=0.89
Pmot_in=50407.38W
computeElectricAuxiliaries()=14725921382.40
Pbat=4140941.10W
my_last_DoD=0.000002619
0.15 * my_last_DoD=0.000000393
2.15 - 0.15 * my_last_DoD=2.149999607
E=928.799830263
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4140941.10)
E*E=862669.12
4*Ri*Pbat=3070810.25
E*E-4*Ri*Pbat=-2208141.13
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434098647}
 my_last_charge_rem{0.000194872}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{12490.774815159}
 my_curr_charge_rem{0.000214359}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.52
my_curr_DoD = 0.000002881
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.20
 my_curr_energy_removed_a = 1.17
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1150.26
 my_curr_energy_removed_c = 0.14
Pbat = 4140941.10
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1150.26
 (printf) Pbat * DELTA_T_hours = 1150.2614178
eff_mot = 0.89
algo1 = 0.00
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=38.65
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{130.75}, bearing{49.25}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,023402.000,A,4350.1027,N,01028.3976,E,20.4,49.2,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999997,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.85}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=1.32
getPositionOnLane()=2.44
myCurrentTraveledDistance=3.76
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.29}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000007
 route->getID()=!SHNormVeh000007
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000007
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000007
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000007
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (497ms ~= 2.01*RT, ~14.08UPS, vehicles TOT 7 ACT 7)               ----> void MSNet::preSimStepOutput() const
Step #11.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.43)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.43) - my_last_speed=14.87
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.43) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{17.43}) - returning res=8.39
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{8.39}
 vNext{17.43}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{17.43}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{8.39}
[450] bool MSVehicle::moveChecked()
 vNext{8.39}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=14.87
accel=-6.48m/s^2
Fad=15.23N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-218.50N
Fla=-17498.03N
Frr=120.97N
Fte=-17580.33N
newSpeed=8.39m/s
Pte=-147507.78W
omega=310.45
omega nonzero processing
Pte=-44252.33W
Pmot_out=-46581.40W
Torque=-150.05
eff_mot=1.19
Pmot_in=-39046.66W
computeElectricAuxiliaries()=14688999353.60
Pbat=4041230.94W
my_last_DoD=0.000003486
0.15 * my_last_DoD=0.000000523
2.15 - 0.15 * my_last_DoD=2.149999477
E=928.799774080
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4041230.94)
E*E=862669.02
4*Ri*Pbat=2996867.89
E*E-4*Ri*Pbat=-2134198.87
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434162979}
 my_last_charge_rem{0.000259374}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{9384.752020115}
 my_curr_charge_rem{0.000285312}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 8.39
my_curr_DoD = 0.000003835
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.26
 my_curr_energy_removed_a = 1.89
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1122.56
 my_curr_energy_removed_c = 0.18
Pbat = 4041230.94
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1122.56
 (printf) Pbat * DELTA_T_hours = 1122.5641508
eff_mot = 1.19
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=88.16
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.12)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.12) - my_last_speed=7.91
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.12) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{10.12}) - returning newSpeed=10.12
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{10.12}
 vNext{10.12}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{10.12}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.12}
[450] bool MSVehicle::moveChecked()
 vNext{10.12}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=7.91
accel=2.21m/s^2
Fad=22.16N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=5957.50N
Frr=120.97N
Fte=5943.65N
newSpeed=10.12m/s
Pte=60154.87W
omega=374.47
omega nonzero processing
Pmot_out=57147.13W
Torque=152.61
eff_mot=0.88
Pmot_in=50216.85W
computeElectricAuxiliaries()=14727999091.20
Pbat=4141327.71W
my_last_DoD=0.000001968
0.15 * my_last_DoD=0.000000295
2.15 - 0.15 * my_last_DoD=2.149999705
E=928.799872474
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4141327.71)
E*E=862669.20
4*Ri*Pbat=3071096.95
E*E-4*Ri*Pbat=-2208427.75
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434050314}
 my_last_charge_rem{0.000146410}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{16624.891155361}
 my_curr_charge_rem{0.000161051}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.12
my_curr_DoD = 0.000002165
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.15
 my_curr_energy_removed_a = 0.62
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1150.37
 my_curr_energy_removed_c = 0.10
Pbat = 4141327.71
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1150.37
 (printf) Pbat * DELTA_T_hours = 1150.3688098
eff_mot = 0.88
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=29.03
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.13)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.13) - my_last_speed=10.52
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.13) - nonzero slope=-0.00
normal slope detected: -0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{12.13}) - returning newSpeed=12.13
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{12.13}
 vNext{12.13}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{12.13}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{12.13}
[450] bool MSVehicle::moveChecked()
 vNext{12.13}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=38.65
getPositionOnLane()=6.65
myCurrentTraveledDistance=45.30
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 3000
 time_ = 3000.00
 time_ = 3.00
 a-b (distance) = 18.96
 avg_speed = 6.32
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=0
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-8
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=fev0
 avg_speed = 22.75
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{140.64}, bearing{39.36}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,025042.000,A,4350.1074,N,01028.4039,E,23.6,39.4,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999997,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.52
accel=1.61m/s^2
Fad=31.81N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.03 for Fhc=0.00 calculation
normal slope detected: 0.03 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=658.89N
Fla=4334.19N
Frr=120.97N
Fte=5145.87N
newSpeed=12.13m/s
Pte=62398.94W
omega=448.66
omega nonzero processing
Pmot_out=59278.99W
Torque=132.12
eff_mot=0.90
Pmot_in=53556.90W
computeElectricAuxiliaries()=14725921382.40
Pbat=4144090.62W
my_last_DoD=0.000002881
0.15 * my_last_DoD=0.000000432
2.15 - 0.15 * my_last_DoD=2.149999568
E=928.799813289
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4144090.62)
E*E=862669.09
4*Ri*Pbat=3073145.85
E*E-4*Ri*Pbat=-2210476.76
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434118083}
 my_last_charge_rem{0.000214359}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{11355.340500354}
 my_curr_charge_rem{0.000235795}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 12.13
my_curr_DoD = 0.000003169
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.22
 my_curr_energy_removed_a = 1.39
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1151.14
 my_curr_energy_removed_c = 0.15
Pbat = 4144090.62
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1151.14
 (printf) Pbat * DELTA_T_hours = 1151.1362848
eff_mot = 0.90
algo1 = 0.00
algo2 = 0.00
slope = 0.03
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.85}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.85
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.70}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=12.70
getPositionOnLane()=0.59
myCurrentTraveledDistance=13.29
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.29}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=3.76
getPositionOnLane()=3.73
myCurrentTraveledDistance=7.49
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{1.71}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000008
 route->getID()=!SHNormVeh000008
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000008
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000008
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000008
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (478ms ~= 2.09*RT, ~16.74UPS, vehicles TOT 8 ACT 8)               ----> void MSNet::preSimStepOutput() const
Step #12.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.56)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.56) - my_last_speed=17.43
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.56) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{10.56}) - returning res=-16.48
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-16.48}
 vNext{10.56}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{10.56}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.56}
[450] bool MSVehicle::moveChecked()
 vNext{10.56}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=8.39
accel=2.17m/s^2
Fad=24.13N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-218.50N
Fla=5853.86N
Frr=120.97N
Fte=5780.45N
newSpeed=10.56m/s
Pte=61040.42W
omega=390.71
omega nonzero processing
Pmot_out=57988.40W
Torque=148.42
eff_mot=0.88
Pmot_in=51311.62W
computeElectricAuxiliaries()=14688999353.60
Pbat=4131589.22W
my_last_DoD=0.000003835
0.15 * my_last_DoD=0.000000575
2.15 - 0.15 * my_last_DoD=2.149999425
E=928.799751488
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4131589.22)
E*E=862668.98
4*Ri*Pbat=3063875.15
E*E-4*Ri*Pbat=-2201206.17
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434188848}
 my_last_charge_rem{0.000285312}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{8531.683413951}
 my_curr_charge_rem{0.000313843}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.56
my_curr_DoD = 0.000004219
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.29
 my_curr_energy_removed_a = 2.18
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1147.66
 my_curr_energy_removed_c = 0.20
Pbat = 4131589.22
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1147.66
 (printf) Pbat * DELTA_T_hours = 1147.6636728
eff_mot = 0.88
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=98.72
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.55)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.55) - my_last_speed=10.12
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.55) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{12.55}) - returning res=11.95
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{11.95}
 vNext{12.55}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{12.55}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.95}
[450] bool MSVehicle::moveChecked()
 vNext{11.95}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.12
accel=1.82m/s^2
Fad=30.87N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=4922.91N
Frr=120.97N
Fte=4917.76N
newSpeed=11.95m/s
Pte=58743.55W
omega=441.97
omega nonzero processing
Pmot_out=55806.37W
Torque=126.27
eff_mot=0.90
Pmot_in=50504.16W
computeElectricAuxiliaries()=14727999091.20
Pbat=4141615.02W
my_last_DoD=0.000002165
0.15 * my_last_DoD=0.000000325
2.15 - 0.15 * my_last_DoD=2.149999675
E=928.799859721
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4141615.02)
E*E=862669.18
4*Ri*Pbat=3071310.01
E*E-4*Ri*Pbat=-2208640.83
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434064916}
 my_last_charge_rem{0.000161051}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{15113.628082357}
 my_curr_charge_rem{0.000177156}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.95
my_curr_DoD = 0.000002381
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.16
 my_curr_energy_removed_a = 0.79
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1150.45
 my_curr_energy_removed_c = 0.11
Pbat = 4141615.02
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1150.45
 (printf) Pbat * DELTA_T_hours = 1150.4486168
eff_mot = 0.90
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=40.98
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.28}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=3.85
getPositionOnLane()=1.84
myCurrentTraveledDistance=5.69
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.77}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.77
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.47)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.47) - my_last_speed=12.13
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.47) - nonzero slope=0.03
normal slope detected: 0.03 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.47}) - returning newSpeed=13.47
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.47}
 vNext{13.47}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.47}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.47}
[450] bool MSVehicle::moveChecked()
 vNext{13.47}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=12.13
accel=1.35m/s^2
Fad=39.27N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.03 for Fhc=0.00 calculation
normal slope detected: 0.03 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=658.89N
Fla=3632.44N
Frr=120.97N
Fte=4451.57N
newSpeed=13.47m/s
Pte=59972.10W
omega=498.47
omega nonzero processing
Pmot_out=56973.50W
Torque=114.30
eff_mot=0.92
Pmot_in=52218.26W
computeElectricAuxiliaries()=14725921382.40
Pbat=4142751.98W
my_last_DoD=0.000003169
0.15 * my_last_DoD=0.000000475
2.15 - 0.15 * my_last_DoD=2.149999525
E=928.799794618
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4142751.98)
E*E=862669.06
4*Ri*Pbat=3072153.15
E*E-4*Ri*Pbat=-2209484.09
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434139462}
 my_last_charge_rem{0.000235795}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{10323.127486896}
 my_curr_charge_rem{0.000259374}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.47
my_curr_DoD = 0.000003486
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.24
 my_curr_energy_removed_a = 1.63
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1150.76
 my_curr_energy_removed_c = 0.17
Pbat = 4142751.98
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1150.76
 (printf) Pbat * DELTA_T_hours = 1150.7644388
eff_mot = 0.92
algo1 = 0.00
algo2 = 0.00
slope = 0.03
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=58.77
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{141.30}, bearing{38.70}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,030722.000,A,4350.1130,N,01028.4103,E,26.2,38.7,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999997,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 18, in <module>
    from suds.client import Client
  File "build/bdist.linux-x86_64/egg/suds/__init__.py", line 154, in <module>
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 26, in <module>
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 26, in <module>
  File "build/bdist.linux-x86_64/egg/suds/plugin.py", line 20, in <module>
KeyboardInterrupt
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.95}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=23.24
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.04}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=15.53
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.38}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000009
 route->getID()=!SHNormVeh000009
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000009
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000009
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000009
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (332ms ~= 3.01*RT, ~27.11UPS, vehicles TOT 9 ACT 9)               ----> void MSNet::preSimStepOutput() const
Step #13.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.42)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.42) - my_last_speed=10.56
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.42) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{12.42}) - returning newSpeed=12.42
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{12.42}
 vNext{12.42}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{12.42}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{12.42}
[450] bool MSVehicle::moveChecked()
 vNext{12.42}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.56
accel=1.86m/s^2
Fad=33.36N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-218.50N
Fla=5010.87N
Frr=120.97N
Fte=4946.69N
newSpeed=12.42m/s
Pte=61421.67W
omega=459.42
omega nonzero processing
Pmot_out=58350.59W
Torque=127.01
eff_mot=0.91
Pmot_in=52934.52W
computeElectricAuxiliaries()=14688999353.60
Pbat=4133212.12W
my_last_DoD=0.000004219
0.15 * my_last_DoD=0.000000633
2.15 - 0.15 * my_last_DoD=2.149999367
E=928.799726637
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4133212.12)
E*E=862668.93
4*Ri*Pbat=3065078.65
E*E-4*Ri*Pbat=-2202409.72
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434217304}
 my_last_charge_rem{0.000313843}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{7756.166499257}
 my_curr_charge_rem{0.000345227}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 12.42
my_curr_DoD = 0.000004640
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.32
 my_curr_energy_removed_a = 2.51
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1148.11
 my_curr_energy_removed_c = 0.22
Pbat = 4133212.12
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1148.11
 (printf) Pbat * DELTA_T_hours = 1148.1144778
eff_mot = 0.91
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=111.14
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.58)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.58) - my_last_speed=12.55
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.58) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.58}) - returning newSpeed=13.58
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.58}
 vNext{13.58}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.58}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.58}
[450] bool MSVehicle::moveChecked()
 vNext{13.58}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.95
accel=1.63m/s^2
Fad=39.88N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=4401.31N
Frr=120.97N
Fte=4405.17N
newSpeed=13.58m/s
Pte=59805.49W
omega=502.32
omega nonzero processing
Pmot_out=56815.22W
Torque=113.11
eff_mot=0.92
Pmot_in=52116.92W
computeElectricAuxiliaries()=14727999091.20
Pbat=4143227.78W
my_last_DoD=0.000002381
0.15 * my_last_DoD=0.000000357
2.15 - 0.15 * my_last_DoD=2.149999643
E=928.799845694
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4143227.78)
E*E=862669.15
4*Ri*Pbat=3072505.99
E*E-4*Ri*Pbat=-2209836.84
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434080979}
 my_last_charge_rem{0.000177156}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{13739.752561444}
 my_curr_charge_rem{0.000194872}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.58
my_curr_DoD = 0.000002619
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.18
 my_curr_energy_removed_a = 0.97
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1150.90
 my_curr_energy_removed_c = 0.12
Pbat = 4143227.78
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1150.90
 (printf) Pbat * DELTA_T_hours = 1150.8966058
eff_mot = 0.92
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=54.56
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.99}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=7.77
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.96)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.96) - my_last_speed=13.47
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.96) - nonzero slope=0.03
normal slope detected: 0.03 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.96}) - returning res=8.25
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{8.25}
 vNext{15.96}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.96}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{8.25}
[450] bool MSVehicle::moveChecked()
 vNext{8.25}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.47
accel=-5.22m/s^2
Fad=14.74N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.03 for Fhc=0.00 calculation
normal slope detected: 0.03 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=658.89N
Fla=-14082.64N
Frr=120.97N
Fte=-13288.03N
newSpeed=8.25m/s
Pte=-109671.79W
omega=305.38
omega nonzero processing
Pte=-32901.54W
Pmot_out=-34633.20W
Torque=-113.41
eff_mot=1.15
Pmot_in=-30001.63W
computeElectricAuxiliaries()=14725921382.40
Pbat=4060532.09W
my_last_DoD=0.000003486
0.15 * my_last_DoD=0.000000523
2.15 - 0.15 * my_last_DoD=2.149999477
E=928.799774080
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4060532.09)
E*E=862669.02
4*Ri*Pbat=3011181.10
E*E-4*Ri*Pbat=-2148512.08
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434162979}
 my_last_charge_rem{0.000259374}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{9384.752020115}
 my_curr_charge_rem{0.000285312}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 8.25
my_curr_DoD = 0.000003835
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.26
 my_curr_energy_removed_a = 1.89
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1127.93
 my_curr_energy_removed_c = 0.18
Pbat = 4060532.09
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1127.93
 (printf) Pbat * DELTA_T_hours = 1127.9255808
eff_mot = 1.15
algo1 = 0.00
algo2 = 0.00
slope = 0.03
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=67.02
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{141.30}, bearing{38.70}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,032402.000,A,4350.1164,N,01028.4143,E,16.0,38.7,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999996,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{10.69}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=33.93
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.82}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=22.35
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.21}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=4.21
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.98}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=5.69
getPositionOnLane()=7.41
myCurrentTraveledDistance=13.10
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{1.38}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000010
 route->getID()=!SHNormVeh000010
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000010
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000010
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000010
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (483ms ~= 2.07*RT, ~20.70UPS, vehicles TOT 10 ACT 10)             ----> void MSNet::preSimStepOutput() const
Step #14.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.77)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.77) - my_last_speed=12.42
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.77) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.77}) - returning newSpeed=13.77
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.77}
 vNext{13.77}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.77}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.77}
[450] bool MSVehicle::moveChecked()
 vNext{13.77}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=12.42
accel=1.35m/s^2
Fad=41.02N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-218.50N
Fla=3648.58N
Frr=120.97N
Fte=3592.07N
newSpeed=13.77m/s
Pte=49458.41W
omega=509.45
omega nonzero processing
Pmot_out=46985.49W
Torque=92.23
eff_mot=0.92
Pmot_in=43415.21W
computeElectricAuxiliaries()=14688999353.60
Pbat=4123692.81W
my_last_DoD=0.000004640
0.15 * my_last_DoD=0.000000696
2.15 - 0.15 * my_last_DoD=2.149999304
E=928.799699301
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4123692.81)
E*E=862668.88
4*Ri*Pbat=3058019.39
E*E-4*Ri*Pbat=-2195350.50
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434248605}
 my_last_charge_rem{0.000345227}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{7051.151122262}
 my_curr_charge_rem{0.000379750}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.77
my_curr_DoD = 0.000005104
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.35
 my_curr_energy_removed_a = 2.86
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1145.47
 my_curr_energy_removed_c = 0.24
Pbat = 4123692.81
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1145.47
 (printf) Pbat * DELTA_T_hours = 1145.4702258
eff_mot = 0.92
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=124.91
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.49)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.49) - my_last_speed=13.58
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.49) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.49}) - returning res=-516.85
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-516.85}
 vNext{13.49}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.49}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.49}
[450] bool MSVehicle::moveChecked()
 vNext{13.49}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.58
accel=-0.09m/s^2
Fad=39.37N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=-232.92N
Frr=120.97N
Fte=-229.57N
newSpeed=13.49m/s
Pte=-3096.83W
omega=499.13
omega nonzero processing
Pte=-929.05W
Pmot_out=-977.95W
Torque=-1.96
eff_mot=-3.32
Pmot_in=294.84W
computeElectricAuxiliaries()=14727999091.20
Pbat=4091405.70W
my_last_DoD=0.000002619
0.15 * my_last_DoD=0.000000393
2.15 - 0.15 * my_last_DoD=2.149999607
E=928.799830263
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4091405.70)
E*E=862669.12
4*Ri*Pbat=3034076.14
E*E-4*Ri*Pbat=-2171407.01
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434098647}
 my_last_charge_rem{0.000194872}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{12490.774815159}
 my_curr_charge_rem{0.000214359}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.49
my_curr_DoD = 0.000002881
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.20
 my_curr_energy_removed_a = 1.17
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1136.50
 my_curr_energy_removed_c = 0.14
Pbat = 4091405.70
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1136.50
 (printf) Pbat * DELTA_T_hours = 1136.5015848
eff_mot = -3.32
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=68.05
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.95}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=7.77
getPositionOnLane()=2.07
myCurrentTraveledDistance=9.83
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.10)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.10) - my_last_speed=15.96
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.10) - nonzero slope=0.03
normal slope detected: 0.03 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{10.10}) - returning res=-21.68
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-21.68}
 vNext{10.10}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{10.10}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.10}
[450] bool MSVehicle::moveChecked()
 vNext{10.10}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=8.25
accel=1.85m/s^2
Fad=22.07N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.03 for Fhc=0.00 calculation
normal slope detected: 0.03 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=658.89N
Fla=4981.19N
Frr=120.97N
Fte=5783.13N
newSpeed=10.10m/s
Pte=58405.76W
omega=373.68
omega nonzero processing
Pmot_out=55485.48W
Torque=148.49
eff_mot=0.88
Pmot_in=48868.72W
computeElectricAuxiliaries()=14725921382.40
Pbat=4139402.44W
my_last_DoD=0.000003835
0.15 * my_last_DoD=0.000000575
2.15 - 0.15 * my_last_DoD=2.149999425
E=928.799751488
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4139402.44)
E*E=862668.98
4*Ri*Pbat=3069669.22
E*E-4*Ri*Pbat=-2207000.24
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434188848}
 my_last_charge_rem{0.000285312}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{8531.683413951}
 my_curr_charge_rem{0.000313843}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.10
my_curr_DoD = 0.000004219
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.29
 my_curr_energy_removed_a = 2.18
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1149.83
 my_curr_energy_removed_c = 0.20
Pbat = 4139402.44
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1149.83
 (printf) Pbat * DELTA_T_hours = 1149.8340108
eff_mot = 0.88
algo1 = 0.00
algo2 = 0.00
slope = 0.03
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=77.12
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{141.30}, bearing{38.70}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,034042.000,A,4350.1206,N,01028.4191,E,19.6,38.7,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999996,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.99}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=41.92
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.68}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=26.03
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.57}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=10.77
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.15}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.15
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.90}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=19.00
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.56}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (573ms ~= 1.75*RT, ~17.45UPS, vehicles TOT 10 ACT 10)             ----> void MSNet::preSimStepOutput() const
Step #15.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.01)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.01) - my_last_speed=13.77
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.01) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{16.01}) - returning res=10.50
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{10.50}
 vNext{16.01}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{16.01}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.50}
[450] bool MSVehicle::moveChecked()
 vNext{10.50}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=124.91
getPositionOnLane()=2.68
myCurrentTraveledDistance=127.59
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 5000
 time_ = 5000.00
 time_ = 5.00
 a-b (distance) = 45.14
 avg_speed = 9.03
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh0000001
 avg_speed = 32.50
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.77
accel=-3.27m/s^2
Fad=23.86N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=-8818.49N
Frr=120.97N
Fte=-8673.66N
newSpeed=10.50m/s
Pte=-91080.88W
omega=388.53
omega nonzero processing
Pte=-27324.26W
Pmot_out=-28762.38W
Torque=-74.03
eff_mot=1.10
Pmot_in=-26186.21W
computeElectricAuxiliaries()=14688999353.60
Pbat=4054091.38W
my_last_DoD=0.000005104
0.15 * my_last_DoD=0.000000766
2.15 - 0.15 * my_last_DoD=2.149999234
E=928.799669231
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4054091.38)
E*E=862668.83
4*Ri*Pbat=3006404.85
E*E-4*Ri*Pbat=-2143736.02
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434283036}
 my_last_charge_rem{0.000379750}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{6410.228052266}
 my_curr_charge_rem{0.000417725}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.50
my_curr_DoD = 0.000005615
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.39
 my_curr_energy_removed_a = 3.25
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1126.14
 my_curr_energy_removed_c = 0.27
Pbat = 4054091.38
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1126.14
 (printf) Pbat * DELTA_T_hours = 1126.1364968
eff_mot = 1.10
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.18)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.18) - my_last_speed=13.49
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.18) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.18}) - returning res=-246.12
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-246.12}
 vNext{13.18}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.18}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.18}
[450] bool MSVehicle::moveChecked()
 vNext{13.18}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.49
accel=-0.31m/s^2
Fad=37.58N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=-838.36N
Frr=120.97N
Fte=-836.80N
newSpeed=13.18m/s
Pte=-11028.35W
omega=487.63
omega nonzero processing
Pte=-3308.51W
Pmot_out=-3482.64W
Torque=-7.14
eff_mot=1.56
Pmot_in=-2238.82W
computeElectricAuxiliaries()=14727999091.20
Pbat=4088872.04W
my_last_DoD=0.000002881
0.15 * my_last_DoD=0.000000432
2.15 - 0.15 * my_last_DoD=2.149999568
E=928.799813289
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4088872.04)
E*E=862669.09
4*Ri*Pbat=3032197.24
E*E-4*Ri*Pbat=-2169528.15
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434118083}
 my_last_charge_rem{0.000214359}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{11355.340500354}
 my_curr_charge_rem{0.000235795}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.18
my_curr_DoD = 0.000003169
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.22
 my_curr_energy_removed_a = 1.39
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1135.80
 my_curr_energy_removed_c = 0.15
Pbat = 4088872.04
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1135.80
 (printf) Pbat * DELTA_T_hours = 1135.7977888
eff_mot = 1.56
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=81.23
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.49)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.49) - my_last_speed=10.10
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.49) - nonzero slope=0.03
normal slope detected: 0.03 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{11.49}) - returning newSpeed=11.49
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{11.49}
 vNext{11.49}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{11.49}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.49}
[450] bool MSVehicle::moveChecked()
 vNext{11.49}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.10
accel=1.39m/s^2
Fad=28.58N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.03 for Fhc=0.00 calculation
normal slope detected: 0.03 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=658.89N
Fla=3760.25N
Frr=120.97N
Fte=4568.70N
newSpeed=11.49m/s
Pte=52507.15W
omega=425.23
omega nonzero processing
Pmot_out=49881.80W
Torque=117.30
eff_mot=0.91
Pmot_in=45209.57W
computeElectricAuxiliaries()=14725921382.40
Pbat=4135743.28W
my_last_DoD=0.000004219
0.15 * my_last_DoD=0.000000633
2.15 - 0.15 * my_last_DoD=2.149999367
E=928.799726637
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4135743.28)
E*E=862668.93
4*Ri*Pbat=3066955.69
E*E-4*Ri*Pbat=-2204286.76
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434217304}
 my_last_charge_rem{0.000313843}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{7756.166499257}
 my_curr_charge_rem{0.000345227}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.49
my_curr_DoD = 0.000004640
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.32
 my_curr_energy_removed_a = 2.51
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1148.82
 my_curr_energy_removed_c = 0.22
Pbat = 4135743.28
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1148.82
 (printf) Pbat * DELTA_T_hours = 1148.8175798
eff_mot = 0.91
algo1 = 0.00
algo2 = 0.00
slope = 0.03
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=88.62
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{141.30}, bearing{38.70}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,035722.000,A,4350.1254,N,01028.4246,E,22.3,38.7,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999995,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.88}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=46.80
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.04}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=26.03
getPositionOnLane()=2.12
myCurrentTraveledDistance=28.14
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.53}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=13.31
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.34}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=8.49
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.06}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=19.00
getPositionOnLane()=3.73
myCurrentTraveledDistance=22.73
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.05}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=5.05
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.81}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=9.83
getPositionOnLane()=5.06
myCurrentTraveledDistance=14.89
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (628ms ~= 1.59*RT, ~15.92UPS, vehicles TOT 10 ACT 10)             ----> void MSNet::preSimStepOutput() const
Step #16.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.39)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.39) - my_last_speed=13.18
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.39) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.39}) - returning newSpeed=13.39
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.39}
 vNext{13.39}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.39}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.39}
[450] bool MSVehicle::moveChecked()
 vNext{13.39}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.18
accel=0.21m/s^2
Fad=38.78N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=563.62N
Frr=120.97N
Fte=566.39N
newSpeed=13.39m/s
Pte=7582.87W
omega=495.36
omega nonzero processing
Pmot_out=7203.72W
Torque=14.54
eff_mot=0.85
Pmot_in=6087.62W
computeElectricAuxiliaries()=14727999091.20
Pbat=4097198.47W
my_last_DoD=0.000003169
0.15 * my_last_DoD=0.000000475
2.15 - 0.15 * my_last_DoD=2.149999525
E=928.799794618
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4097198.47)
E*E=862669.06
4*Ri*Pbat=3038371.90
E*E-4*Ri*Pbat=-2175702.84
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434139462}
 my_last_charge_rem{0.000235795}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{10323.127486896}
 my_curr_charge_rem{0.000259374}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.39
my_curr_DoD = 0.000003486
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.24
 my_curr_energy_removed_a = 1.63
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1138.11
 my_curr_energy_removed_c = 0.17
Pbat = 4097198.47
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1138.11
 (printf) Pbat * DELTA_T_hours = 1138.1106878
eff_mot = 0.85
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=94.61
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.86)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.86) - my_last_speed=11.49
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.86) - nonzero slope=0.03
normal slope detected: 0.03 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.86}) - returning res=9.86
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{9.86}
 vNext{13.86}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.86}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{9.86}
[450] bool MSVehicle::moveChecked()
 vNext{9.86}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.49
accel=-1.63m/s^2
Fad=21.05N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.03 for Fhc=0.00 calculation
normal slope detected: 0.03 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=658.89N
Fla=-4393.08N
Frr=120.97N
Fte=-3592.16N
newSpeed=9.86m/s
Pte=-35436.03W
omega=365.00
omega nonzero processing
Pte=-10630.81W
Pmot_out=-11190.32W
Torque=-30.66
eff_mot=1.12
Pmot_in=-10028.71W
computeElectricAuxiliaries()=14725921382.40
Pbat=4080505.01W
my_last_DoD=0.000004640
0.15 * my_last_DoD=0.000000696
2.15 - 0.15 * my_last_DoD=2.149999304
E=928.799699301
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4080505.01)
E*E=862668.88
4*Ri*Pbat=3025992.48
E*E-4*Ri*Pbat=-2163323.60
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434248605}
 my_last_charge_rem{0.000345227}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{7051.151122262}
 my_curr_charge_rem{0.000379750}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 9.86
my_curr_DoD = 0.000005104
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.35
 my_curr_energy_removed_a = 2.86
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1133.47
 my_curr_energy_removed_c = 0.24
Pbat = 4080505.01
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1133.47
 (printf) Pbat * DELTA_T_hours = 1133.4736148
eff_mot = 1.12
algo1 = 0.00
algo2 = 0.00
slope = 0.03
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=98.48
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{141.30}, bearing{38.70}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,041402.000,A,4350.1295,N,01028.4293,E,19.2,38.7,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999995,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.42}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=46.80
getPositionOnLane()=4.59
myCurrentTraveledDistance=51.39
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.03}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=13.31
getPositionOnLane()=2.11
myCurrentTraveledDistance=15.42
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.00}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=15.50
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.19}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=12.25
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.72)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.72) - my_last_speed=16.01
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.72) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{12.72}) - returning res=-30.79
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-30.79}
 vNext{12.72}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{12.72}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{12.72}
[450] bool MSVehicle::moveChecked()
 vNext{12.72}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=127.59
getPositionOnLane()=4.97
myCurrentTraveledDistance=132.56
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.50
accel=2.22m/s^2
Fad=35.03N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=100.99N
Fla=5998.63N
Frr=120.97N
Fte=6255.62N
newSpeed=12.72m/s
Pte=79595.38W
omega=470.78
omega nonzero processing
Pmot_out=75615.61W
Torque=160.62
eff_mot=0.89
Pmot_in=67646.30W
computeElectricAuxiliaries()=14688999353.60
Pbat=4147923.90W
my_last_DoD=0.000005615
0.15 * my_last_DoD=0.000000842
2.15 - 0.15 * my_last_DoD=2.149999158
E=928.799636154
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4147923.90)
E*E=862668.76
4*Ri*Pbat=3075988.51
E*E-4*Ri*Pbat=-2213319.75
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434320911}
 my_last_charge_rem{0.000417725}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{5827.570715907}
 my_curr_charge_rem{0.000459497}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 12.72
my_curr_DoD = 0.000006176
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.43
 my_curr_energy_removed_a = 3.67
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1152.20
 my_curr_energy_removed_c = 0.29
Pbat = 4147923.90
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1152.20
 (printf) Pbat * DELTA_T_hours = 1152.2010838
eff_mot = 0.89
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.05}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=28.14
getPositionOnLane()=0.59
myCurrentTraveledDistance=28.73
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.78}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=22.73
getPositionOnLane()=0.60
myCurrentTraveledDistance=23.33
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.73}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=22.62
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000011
 route->getID()=!SHNormVeh000011
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000011
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000011
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000011
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (514ms ~= 1.95*RT, ~21.40UPS, vehicles TOT 11 ACT 11)             ----> void MSNet::preSimStepOutput() const
Step #17.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{0.00}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.82)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.82) - my_last_speed=12.72
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.82) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{14.82}) - returning res=11.45
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{11.45}
 vNext{14.82}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{14.82}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.45}
[450] bool MSVehicle::moveChecked()
 vNext{11.45}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=12.72
accel=-1.28m/s^2
Fad=28.35N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=100.99N
Fla=-3444.63N
Frr=120.97N
Fte=-3194.32N
newSpeed=11.45m/s
Pte=-36566.37W
omega=423.55
omega nonzero processing
Pte=-10969.91W
Pmot_out=-11547.28W
Torque=-27.26
eff_mot=1.12
Pmot_in=-10302.02W
computeElectricAuxiliaries()=14688999353.60
Pbat=4069975.57W
my_last_DoD=0.000006176
0.15 * my_last_DoD=0.000000926
2.15 - 0.15 * my_last_DoD=2.149999074
E=928.799599769
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4069975.57)
E*E=862668.70
4*Ri*Pbat=3018184.13
E*E-4*Ri*Pbat=-2155515.44
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434362572}
 my_last_charge_rem{0.000459497}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{5297.882228307}
 my_curr_charge_rem{0.000505447}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.45
my_curr_DoD = 0.000006794
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.47
 my_curr_energy_removed_a = 4.14
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1130.55
 my_curr_energy_removed_c = 0.32
Pbat = 4069975.57
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1130.55
 (printf) Pbat * DELTA_T_hours = 1130.5487718
eff_mot = 1.12
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=144.01
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.30)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.30) - my_last_speed=13.39
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.30) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{9.30}) - returning res=-32.34
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-32.34}
 vNext{9.30}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{9.30}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{9.30}
[450] bool MSVehicle::moveChecked()
 vNext{9.30}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.39
accel=-4.09m/s^2
Fad=18.70N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=-11039.70N
Frr=120.97N
Fte=-11057.01N
newSpeed=9.30m/s
Pte=-102797.23W
omega=343.99
omega nonzero processing
Pte=-30839.17W
Pmot_out=-32462.28W
Torque=-94.37
eff_mot=1.12
Pmot_in=-28952.66W
computeElectricAuxiliaries()=14727999091.20
Pbat=4062158.20W
my_last_DoD=0.000003486
0.15 * my_last_DoD=0.000000523
2.15 - 0.15 * my_last_DoD=2.149999477
E=928.799774080
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4062158.20)
E*E=862669.02
4*Ri*Pbat=3012386.98
E*E-4*Ri*Pbat=-2149717.96
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434162979}
 my_last_charge_rem{0.000259374}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{9384.752020115}
 my_curr_charge_rem{0.000285312}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 9.30
my_curr_DoD = 0.000003835
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.26
 my_curr_energy_removed_a = 1.89
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1128.38
 my_curr_energy_removed_c = 0.18
Pbat = 4062158.20
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1128.38
 (printf) Pbat * DELTA_T_hours = 1128.3772788
eff_mot = 1.12
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=103.91
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.39)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.39) - my_last_speed=13.86
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.39) - nonzero slope=0.03
normal slope detected: 0.03 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{11.39}) - returning res=-51.02
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-51.02}
 vNext{11.39}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{11.39}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.39}
[450] bool MSVehicle::moveChecked()
 vNext{11.39}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=98.48
getPositionOnLane()=9.94
myCurrentTraveledDistance=108.42
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 6000
 time_ = 6000.00
 time_ = 6.00
 a-b (distance) = 53.18
 avg_speed = 8.86
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=0
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-8
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=fev0
 avg_speed = 31.91
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{139.14}, bearing{40.86}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,043042.000,A,4350.1340,N,01028.4348,E,22.1,40.9,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999995,60.00,21.20,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=9.86
accel=1.53m/s^2
Fad=28.08N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=4120.09N
Frr=120.97N
Fte=4107.71N
newSpeed=11.39m/s
Pte=46793.49W
omega=421.49
omega nonzero processing
Pmot_out=44453.81W
Torque=105.47
eff_mot=0.91
Pmot_in=40488.55W
computeElectricAuxiliaries()=14725921382.40
Pbat=4131022.26W
my_last_DoD=0.000005104
0.15 * my_last_DoD=0.000000766
2.15 - 0.15 * my_last_DoD=2.149999234
E=928.799669231
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4131022.26)
E*E=862668.83
4*Ri*Pbat=3063454.71
E*E-4*Ri*Pbat=-2200785.89
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434283036}
 my_last_charge_rem{0.000379750}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{6410.228052266}
 my_curr_charge_rem{0.000417725}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.39
my_curr_DoD = 0.000005615
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.39
 my_curr_energy_removed_a = 3.25
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1147.51
 my_curr_energy_removed_c = 0.27
Pbat = 4131022.26
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1147.51
 (printf) Pbat * DELTA_T_hours = 1147.5061858
eff_mot = 0.91
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.84}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=24.34
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.25}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=21.50
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.71}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=27.33
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.75}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=60.14
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.60}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=15.42
getPositionOnLane()=4.89
myCurrentTraveledDistance=20.31
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.94}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=36.67
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.24}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=23.33
getPositionOnLane()=0.65
myCurrentTraveledDistance=23.98
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
const MSRoute& MSBaseVehicle::getRoute()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHElecVeh000001
 route->getID()=!SHElecVeh000001
 type->getID()=DEFAULT_ELECVEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHElecVeh000001
  v.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
----> void MSDevice_FEV::buildVehicleDevices(...)
 (v.getVehicleType().getID()==DEFAULT_ELECVEHTYPE)
const std::string& MSBaseVehicle::getId()

----> MSDevice_FEV::MSDevice_FEV(...id=SHElecVeh000001fevDevice...)
[100] MSDevice_FEV::MSDevice_FEV(...id=SHElecVeh000001fevDevice...)
const std::string& MSBaseVehicle::getId()

  holder.getID().c_str()=SHElecVeh000001
  holder.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHElecVeh000001
  pars->color=0.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHElecVeh000001
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (484ms ~= 2.07*RT, ~24.79UPS, vehicles TOT 12 ACT 12)             ----> void MSNet::preSimStepOutput() const
Step #18.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{1.46}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=0.00
getPositionOnLane()=1.46
myCurrentTraveledDistance=1.46
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.23)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.23) - my_last_speed=14.82
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.23) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.23}) - returning res=-63.39
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-63.39}
 vNext{13.23}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.23}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.23}
[450] bool MSVehicle::moveChecked()
 vNext{13.23}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.45
accel=1.79m/s^2
Fad=37.95N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=100.99N
Fla=4822.76N
Frr=120.97N
Fte=5082.68N
newSpeed=13.23m/s
Pte=67266.83W
omega=489.68
omega nonzero processing
Pmot_out=63903.49W
Torque=130.50
eff_mot=0.91
Pmot_in=58131.40W
computeElectricAuxiliaries()=14688999353.60
Pbat=4138409.00W
my_last_DoD=0.000006794
0.15 * my_last_DoD=0.000001019
2.15 - 0.15 * my_last_DoD=2.149998981
E=928.799559746
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4138409.00)
E*E=862668.62
4*Ri*Pbat=3068932.51
E*E-4*Ri*Pbat=-2206263.89
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434408400}
 my_last_charge_rem{0.000505447}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{4816.347239580}
 my_curr_charge_rem{0.000555992}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.23
my_curr_DoD = 0.000007473
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.52
 my_curr_energy_removed_a = 4.66
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1149.56
 my_curr_energy_removed_c = 0.36
Pbat = 4138409.00
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1149.56
 (printf) Pbat * DELTA_T_hours = 1149.5580558
eff_mot = 0.91
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=157.24
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.50)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.50) - my_last_speed=9.30
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.50) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.50}) - returning res=-55.89
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-55.89}
 vNext{5.50}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.50}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.50}
[450] bool MSVehicle::moveChecked()
 vNext{5.50}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=9.30
accel=-3.80m/s^2
Fad=6.56N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=-10242.42N
Frr=120.97N
Fte=-10271.88N
newSpeed=5.50m/s
Pte=-56509.87W
omega=203.55
omega nonzero processing
Pte=-16952.96W
Pmot_out=-17845.22W
Torque=-87.67
eff_mot=1.20
Pmot_in=-14876.95W
computeElectricAuxiliaries()=14727999091.20
Pbat=4076233.91W
my_last_DoD=0.000003835
0.15 * my_last_DoD=0.000000575
2.15 - 0.15 * my_last_DoD=2.149999425
E=928.799751488
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4076233.91)
E*E=862668.98
4*Ri*Pbat=3022825.15
E*E-4*Ri*Pbat=-2160156.17
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434188848}
 my_last_charge_rem{0.000285312}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{8531.683413951}
 my_curr_charge_rem{0.000313843}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.50
my_curr_DoD = 0.000004219
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.29
 my_curr_energy_removed_a = 2.18
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1132.29
 my_curr_energy_removed_c = 0.20
Pbat = 4076233.91
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1132.29
 (printf) Pbat * DELTA_T_hours = 1132.2871988
eff_mot = 1.20
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=109.41
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{10.80}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=35.14
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{11.30}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=32.80
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.32}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=27.33
getPositionOnLane()=2.86
myCurrentTraveledDistance=30.19
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{10.76}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=60.14
getPositionOnLane()=9.98
myCurrentTraveledDistance=70.12
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.19}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=43.86
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.25)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.25) - my_last_speed=11.39
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.25) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.25}) - returning newSpeed=13.25
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.25}
 vNext{13.25}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.25}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.25}
[450] bool MSVehicle::moveChecked()
 vNext{13.25}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.39
accel=1.85m/s^2
Fad=38.02N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=5003.70N
Frr=120.97N
Fte=5001.25N
newSpeed=13.25m/s
Pte=66246.06W
omega=490.10
omega nonzero processing
Pmot_out=62933.75W
Torque=128.41
eff_mot=0.91
Pmot_in=57302.72W
computeElectricAuxiliaries()=14725921382.40
Pbat=4147836.43W
my_last_DoD=0.000005615
0.15 * my_last_DoD=0.000000842
2.15 - 0.15 * my_last_DoD=2.149999158
E=928.799636154
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4147836.43)
E*E=862668.76
4*Ri*Pbat=3075923.65
E*E-4*Ri*Pbat=-2213254.88
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434320911}
 my_last_charge_rem{0.000417725}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{5827.570715907}
 my_curr_charge_rem{0.000459497}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.25
my_curr_DoD = 0.000006176
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.43
 my_curr_energy_removed_a = 3.67
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1152.18
 my_curr_energy_removed_c = 0.29
Pbat = 4147836.43
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1152.18
 (printf) Pbat * DELTA_T_hours = 1152.1767878
eff_mot = 0.91
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=121.67
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{139.14}, bearing{40.86}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,044722.000,A,4350.1393,N,01028.4414,E,25.7,40.9,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

Traceback (most recent call last):
  File "/usr/lib/python2.7/site.py", line 563, in <module>
    main()
  File "/usr/lib/python2.7/site.py", line 545, in main
    known_paths = addusersitepackages(known_paths)
  File "/usr/lib/python2.7/site.py", line 272, in addusersitepackages
    user_site = getusersitepackages()
  File "/usr/lib/python2.7/site.py", line 247, in getusersitepackages
    user_base = getuserbase() # this will also set USER_BASE
  File "/usr/lib/python2.7/site.py", line 237, in getuserbase
    USER_BASE = get_config_var('userbase')
  File "/usr/lib/python2.7/sysconfig.py", line 578, in get_config_var
    return get_config_vars().get(name)
  File "/usr/lib/python2.7/sysconfig.py", line 524, in get_config_vars
    _init_posix(_CONFIG_VARS)
  File "/usr/lib/python2.7/sysconfig.py", line 409, in _init_posix
    vars.update(build_time_vars)
KeyboardInterrupt
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999994,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.07}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=27.38
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{10.62}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=34.60
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.07}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000012
 route->getID()=!SHNormVeh000012
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000012
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000012
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000012
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (305ms ~= 3.28*RT, ~42.62UPS, vehicles TOT 13 ACT 13)             ----> void MSNet::preSimStepOutput() const
Step #19.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=2.15)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=2.15) - my_last_speed=0.00
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=2.15) - nonzero slope=0.01
normal slope detected: 0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{2.15}) - returning newSpeed=2.15
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{2.15}
 vNext{2.15}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{2.15}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{2.15}
[450] bool MSVehicle::moveChecked()
 vNext{2.15}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=0.00
accel=2.15m/s^2
Fad=1.01N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.01 for Fhc=0.00 calculation
normal slope detected: 0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=168.54N
Fla=5810.59N
Frr=120.97N
Fte=6101.10N
newSpeed=2.15m/s
Pte=13143.40W
omega=79.71
omega nonzero processing
Pmot_out=12486.23W
Torque=156.65
eff_mot=0.61
Pmot_in=7620.60W
computeElectricAuxiliaries()=3776604284.87
Pbat=1056677.34W
my_last_DoD=0.000001000
0.15 * my_last_DoD=0.000000150
2.15 - 0.15 * my_last_DoD=2.149999850
E=928.799935200
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1056677.34)
E*E=862669.32
4*Ri*Pbat=783603.42
E*E-4*Ri*Pbat=79065.90
sqrt(E*E-4*Ri*Pbat)=281.19
E-sqrt(E*E-4*Ri*Pbat)=647.61
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1746.59
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.60
 my_curr_charge_rem{1.602017172}
 my_last_charge_rem{0.000100000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{16020.171717984}
 my_curr_charge_rem{0.000110000}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 2.15
my_curr_DoD = 0.000001479
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.10
 my_curr_energy_removed_a = 0.10
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 293.52
 my_curr_energy_removed_c = 0.07
Pbat = 1056677.34
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 293.52
 (printf) Pbat * DELTA_T_hours = 293.5214858
eff_mot = 0.61
algo1 = 0.00
algo2 = 0.00
slope = 0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.93)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.93) - my_last_speed=13.23
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.93) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{14.93}) - returning res=14.07
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{14.07}
 vNext{14.93}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{14.93}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{14.07}
[450] bool MSVehicle::moveChecked()
 vNext{14.07}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.23
accel=0.83m/s^2
Fad=42.88N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=100.99N
Fla=2245.47N
Frr=120.97N
Fte=2510.31N
newSpeed=14.07m/s
Pte=35311.64W
omega=520.47
omega nonzero processing
Pmot_out=33546.06W
Torque=64.45
eff_mot=0.93
Pmot_in=31130.26W
computeElectricAuxiliaries()=14688999353.60
Pbat=4111407.86W
my_last_DoD=0.000007473
0.15 * my_last_DoD=0.000001121
2.15 - 0.15 * my_last_DoD=2.149998879
E=928.799515721
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4111407.86)
E*E=862668.54
4*Ri*Pbat=3048909.20
E*E-4*Ri*Pbat=-2186240.66
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434458811}
 my_last_charge_rem{0.000555992}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{4378.588158919}
 my_curr_charge_rem{0.000611591}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 14.07
my_curr_DoD = 0.000008221
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.57
 my_curr_energy_removed_a = 5.23
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1142.06
 my_curr_energy_removed_c = 0.39
Pbat = 4111407.86
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1142.06
 (printf) Pbat * DELTA_T_hours = 1142.0577408
eff_mot = 0.93
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=171.31
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.09)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.09) - my_last_speed=5.50
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.09) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.09}) - returning res=-196.32
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-196.32}
 vNext{4.09}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.09}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.09}
[450] bool MSVehicle::moveChecked()
 vNext{4.09}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=5.50
accel=-1.41m/s^2
Fad=3.62N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-156.99N
Fla=-3818.11N
Frr=120.97N
Fte=-3850.50N
newSpeed=4.09m/s
Pte=-15735.14W
omega=151.20
omega nonzero processing
Pte=-4720.54W
Pmot_out=-4968.99W
Torque=-32.86
eff_mot=1.24
Pmot_in=-4012.58W
computeElectricAuxiliaries()=14727999091.20
Pbat=4087098.27W
my_last_DoD=0.000004219
0.15 * my_last_DoD=0.000000633
2.15 - 0.15 * my_last_DoD=2.149999367
E=928.799726637
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4087098.27)
E*E=862668.93
4*Ri*Pbat=3030881.87
E*E-4*Ri*Pbat=-2168212.93
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434217304}
 my_last_charge_rem{0.000313843}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{7756.166499257}
 my_curr_charge_rem{0.000345227}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.09
my_curr_DoD = 0.000004640
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.32
 my_curr_energy_removed_a = 2.51
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1135.31
 my_curr_energy_removed_c = 0.22
Pbat = 4087098.27
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1135.31
 (printf) Pbat * DELTA_T_hours = 1135.3050768
eff_mot = 1.24
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=113.50
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.80}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=47.94
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.04}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=45.84
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.23}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=51.10
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.48)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.48) - my_last_speed=13.25
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.48) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.48}) - returning res=10.75
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{10.75}
 vNext{15.48}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.48}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.75}
[450] bool MSVehicle::moveChecked()
 vNext{10.75}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.25
accel=-2.50m/s^2
Fad=25.04N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=-6733.26N
Frr=120.97N
Fte=-6748.68N
newSpeed=10.75m/s
Pte=-72553.06W
omega=397.78
omega nonzero processing
Pte=-21765.92W
Pmot_out=-22911.49W
Torque=-57.60
eff_mot=1.09
Pmot_in=-20961.73W
computeElectricAuxiliaries()=14725921382.40
Pbat=4069571.99W
my_last_DoD=0.000006176
0.15 * my_last_DoD=0.000000926
2.15 - 0.15 * my_last_DoD=2.149999074
E=928.799599769
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4069571.99)
E*E=862668.70
4*Ri*Pbat=3017884.85
E*E-4*Ri*Pbat=-2155216.15
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434362572}
 my_last_charge_rem{0.000459497}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{5297.882228307}
 my_curr_charge_rem{0.000505447}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.75
my_curr_DoD = 0.000006794
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.47
 my_curr_energy_removed_a = 4.14
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1130.44
 my_curr_energy_removed_c = 0.32
Pbat = 4069571.99
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1130.44
 (printf) Pbat * DELTA_T_hours = 1130.4366638
eff_mot = 1.09
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=132.42
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{139.14}, bearing{40.86}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,050402.000,A,4350.1437,N,01028.4468,E,20.9,40.9,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999993,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.76}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=34.14
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.37}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=41.97
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.74}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.74
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.88}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=5.34
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.36}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=30.19
getPositionOnLane()=0.87
myCurrentTraveledDistance=31.06
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.87}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=83.00
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000013
 route->getID()=!SHNormVeh000013
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000013
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000013
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000013
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (508ms ~= 1.97*RT, ~27.56UPS, vehicles TOT 14 ACT 14)             ----> void MSNet::preSimStepOutput() const
Step #20.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.13)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.13) - my_last_speed=2.15
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.13) - nonzero slope=0.01
normal slope detected: 0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.13}) - returning newSpeed=4.13
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{4.13}
 vNext{4.13}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.13}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.13}
[450] bool MSVehicle::moveChecked()
 vNext{4.13}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=2.15
accel=1.98m/s^2
Fad=3.70N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.01 for Fhc=0.00 calculation
normal slope detected: 0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=168.54N
Fla=5332.16N
Frr=120.97N
Fte=5625.36N
newSpeed=4.13m/s
Pte=23234.09W
omega=152.82
omega nonzero processing
Pmot_out=22072.39W
Torque=144.44
eff_mot=0.76
Pmot_in=16820.57W
computeElectricAuxiliaries()=3776604284.87
Pbat=1065877.31W
my_last_DoD=0.000001479
0.15 * my_last_DoD=0.000000222
2.15 - 0.15 * my_last_DoD=2.149999778
E=928.799904188
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1065877.31)
E*E=862669.26
4*Ri*Pbat=790425.87
E*E-4*Ri*Pbat=72243.39
sqrt(E*E-4*Ri*Pbat)=268.78
E-sqrt(E*E-4*Ri*Pbat)=660.02
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1780.05
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.64
 my_curr_charge_rem{1.637676332}
 my_last_charge_rem{0.000110000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{14887.966657616}
 my_curr_charge_rem{0.000121000}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.13
my_curr_DoD = 0.000001626
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.11
 my_curr_energy_removed_a = 0.21
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 296.08
 my_curr_energy_removed_c = 0.08
Pbat = 1065877.31
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 296.08
 (printf) Pbat * DELTA_T_hours = 296.0770328
eff_mot = 0.76
algo1 = 0.00
algo2 = 0.00
slope = 0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=4.13
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.61)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.61) - my_last_speed=14.93
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.61) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{16.61}) - returning res=12.70
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{12.70}
 vNext{16.61}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{16.61}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{12.70}
[450] bool MSVehicle::moveChecked()
 vNext{12.70}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=14.07
accel=-1.37m/s^2
Fad=34.93N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=100.99N
Fla=-3695.50N
Frr=120.97N
Fte=-3438.60N
newSpeed=12.70m/s
Pte=-43660.52W
omega=469.80
omega nonzero processing
Pte=-13098.15W
Pmot_out=-13787.53W
Torque=-29.35
eff_mot=1.12
Pmot_in=-12363.72W
computeElectricAuxiliaries()=14688999353.60
Pbat=4067913.87W
my_last_DoD=0.000008221
0.15 * my_last_DoD=0.000001233
2.15 - 0.15 * my_last_DoD=2.149998767
E=928.799467293
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4067913.87)
E*E=862668.45
4*Ri*Pbat=3016655.23
E*E-4*Ri*Pbat=-2153986.78
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434514263}
 my_last_charge_rem{0.000611591}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3980.625358319}
 my_curr_charge_rem{0.000672750}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 12.70
my_curr_DoD = 0.000009043
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.62
 my_curr_energy_removed_a = 5.85
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1129.98
 my_curr_energy_removed_c = 0.43
Pbat = 4067913.87
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1129.98
 (printf) Pbat * DELTA_T_hours = 1129.9760768
eff_mot = 1.12
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=184.00
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.18)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.18) - my_last_speed=4.09
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.18) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{6.18}) - returning newSpeed=6.18
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{6.18}
 vNext{6.18}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{6.18}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{6.18}
[450] bool MSVehicle::moveChecked()
 vNext{6.18}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=113.50
getPositionOnLane()=4.07
myCurrentTraveledDistance=117.57
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 13000
 time_ = 13000.00
 time_ = 13.00
 a-b (distance) = 113.50
 avg_speed = 8.73
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh000000
 avg_speed = 31.43
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.09
accel=2.09m/s^2
Fad=8.27N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=5645.64N
Frr=120.97N
Fte=5774.89N
newSpeed=6.18m/s
Pte=35681.03W
omega=228.61
omega nonzero processing
Pmot_out=33896.98W
Torque=148.27
eff_mot=0.82
Pmot_in=27905.31W
computeElectricAuxiliaries()=14727999091.20
Pbat=4119016.17W
my_last_DoD=0.000004640
0.15 * my_last_DoD=0.000000696
2.15 - 0.15 * my_last_DoD=2.149999304
E=928.799699301
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4119016.17)
E*E=862668.88
4*Ri*Pbat=3054551.32
E*E-4*Ri*Pbat=-2191882.44
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434248605}
 my_last_charge_rem{0.000345227}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{7051.151122262}
 my_curr_charge_rem{0.000379750}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 6.18
my_curr_DoD = 0.000005104
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.35
 my_curr_energy_removed_a = 2.86
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1144.17
 my_curr_energy_removed_c = 0.24
Pbat = 4119016.17
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1144.17
 (printf) Pbat * DELTA_T_hours = 1144.1711598
eff_mot = 0.82
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.01}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=47.94
getPositionOnLane()=0.15
myCurrentTraveledDistance=48.08
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{14.37}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=60.21
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.27}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=55.37
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.15)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.15) - my_last_speed=15.48
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.15) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.15}) - returning res=-41.24
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-41.24}
 vNext{13.15}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.15}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.15}
[450] bool MSVehicle::moveChecked()
 vNext{13.15}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.75
accel=2.40m/s^2
Fad=37.48N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=6477.40N
Frr=120.97N
Fte=6474.41N
newSpeed=13.15m/s
Pte=85145.42W
omega=486.59
omega nonzero processing
Pmot_out=80888.15W
Torque=166.23
eff_mot=0.89
Pmot_in=72374.68W
computeElectricAuxiliaries()=14725921382.40
Pbat=4162908.40W
my_last_DoD=0.000006794
0.15 * my_last_DoD=0.000001019
2.15 - 0.15 * my_last_DoD=2.149998981
E=928.799559746
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4162908.40)
E*E=862668.62
4*Ri*Pbat=3087100.61
E*E-4*Ri*Pbat=-2224431.99
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434408400}
 my_last_charge_rem{0.000505447}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{4816.347239580}
 my_curr_charge_rem{0.000555992}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.15
my_curr_DoD = 0.000007473
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.52
 my_curr_energy_removed_a = 4.66
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1156.36
 my_curr_energy_removed_c = 0.36
Pbat = 4162908.40
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1156.36
 (printf) Pbat * DELTA_T_hours = 1156.3634438
eff_mot = 0.89
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=145.57
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{139.14}, bearing{40.86}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,052042.000,A,4350.1490,N,01028.4533,E,25.6,40.9,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999993,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.68}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=37.82
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.91}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=45.88
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.48}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=9.21
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.92}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=11.26
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{10.55}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=93.54
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.60}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=31.06
getPositionOnLane()=2.20
myCurrentTraveledDistance=33.26
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.11}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (512ms ~= 1.95*RT, ~27.34UPS, vehicles TOT 14 ACT 14)             ----> void MSNet::preSimStepOutput() const
Step #21.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.85)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.85) - my_last_speed=4.13
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.85) - nonzero slope=0.01
normal slope detected: 0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.85}) - returning newSpeed=5.85
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{5.85}
 vNext{5.85}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.85}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.85}
[450] bool MSVehicle::moveChecked()
 vNext{5.85}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=4.13
getPositionOnLane()=0.29
myCurrentTraveledDistance=4.42
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 2000
 time_ = 2000.00
 time_ = 2.00
 a-b (distance) = 4.13
 avg_speed = 2.07
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh000001
 avg_speed = 7.43
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.13
accel=1.71m/s^2
Fad=7.40N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=4627.65N
Frr=120.97N
Fte=4756.03N
newSpeed=5.85m/s
Pte=27799.63W
omega=216.27
omega nonzero processing
Pmot_out=26409.65W
Torque=122.11
eff_mot=0.84
Pmot_in=22103.00W
computeElectricAuxiliaries()=3776604284.87
Pbat=1071159.75W
my_last_DoD=0.000001626
0.15 * my_last_DoD=0.000000244
2.15 - 0.15 * my_last_DoD=2.149999756
E=928.799894607
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1071159.75)
E*E=862669.24
4*Ri*Pbat=794343.18
E*E-4*Ri*Pbat=68326.06
sqrt(E*E-4*Ri*Pbat)=261.39
E-sqrt(E*E-4*Ri*Pbat)=667.41
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1799.98
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.66
 my_curr_charge_rem{1.658971632}
 my_last_charge_rem{0.000121000}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{13710.509354739}
 my_curr_charge_rem{0.000133100}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.85
my_curr_DoD = 0.000001789
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.12
 my_curr_energy_removed_a = 0.34
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 297.54
 my_curr_energy_removed_c = 0.09
Pbat = 1071159.75
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 297.54
 (printf) Pbat * DELTA_T_hours = 297.5443748
eff_mot = 0.84
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.53)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.53) - my_last_speed=16.61
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.53) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{14.53}) - returning res=-43.68
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-43.68}
 vNext{14.53}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{14.53}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{14.53}
[450] bool MSVehicle::moveChecked()
 vNext{14.53}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=12.70
accel=1.83m/s^2
Fad=45.73N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=100.99N
Fla=4936.93N
Frr=120.97N
Fte=5204.61N
newSpeed=14.53m/s
Pte=75605.78W
omega=537.49
omega nonzero processing
Pmot_out=71825.49W
Torque=133.63
eff_mot=0.91
Pmot_in=65624.13W
computeElectricAuxiliaries()=14688999353.60
Pbat=4145901.72W
my_last_DoD=0.000009043
0.15 * my_last_DoD=0.000001356
2.15 - 0.15 * my_last_DoD=2.149998644
E=928.799414022
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4145901.72)
E*E=862668.35
4*Ri*Pbat=3074488.92
E*E-4*Ri*Pbat=-2211820.57
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434575260}
 my_last_charge_rem{0.000672750}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3618.840994136}
 my_curr_charge_rem{0.000740025}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 14.53
my_curr_DoD = 0.000009947
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.69
 my_curr_energy_removed_a = 6.54
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1151.64
 my_curr_energy_removed_c = 0.47
Pbat = 4145901.72
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1151.64
 (printf) Pbat * DELTA_T_hours = 1151.6393688
eff_mot = 0.91
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=198.53
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{16.22}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=76.43
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.74}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=55.37
getPositionOnLane()=2.43
myCurrentTraveledDistance=57.80
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.64)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.64) - my_last_speed=13.15
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.64) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{14.64}) - returning newSpeed=14.64
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{14.64}
 vNext{14.64}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{14.64}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{14.64}
[450] bool MSVehicle::moveChecked()
 vNext{14.64}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.15
accel=1.49m/s^2
Fad=46.43N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=4011.24N
Frr=120.97N
Fte=4017.21N
newSpeed=14.64m/s
Pte=58802.05W
omega=541.59
omega nonzero processing
Pmot_out=55861.95W
Torque=103.14
eff_mot=0.92
Pmot_in=51577.72W
computeElectricAuxiliaries()=14725921382.40
Pbat=4142111.44W
my_last_DoD=0.000007473
0.15 * my_last_DoD=0.000001121
2.15 - 0.15 * my_last_DoD=2.149998879
E=928.799515721
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4142111.44)
E*E=862668.54
4*Ri*Pbat=3071678.15
E*E-4*Ri*Pbat=-2209009.61
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434458811}
 my_last_charge_rem{0.000555992}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{4378.588158919}
 my_curr_charge_rem{0.000611591}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 14.64
my_curr_DoD = 0.000008221
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.57
 my_curr_energy_removed_a = 5.23
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1150.59
 my_curr_energy_removed_c = 0.39
Pbat = 4142111.44
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1150.59
 (printf) Pbat * DELTA_T_hours = 1150.5865118
eff_mot = 0.92
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=160.21
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{135.82}, bearing{44.18}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,053722.000,A,4350.1547,N,01028.4608,E,28.5,44.2,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999992,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.45}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=37.82
getPositionOnLane()=1.65
myCurrentTraveledDistance=39.47
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.44}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=45.88
getPositionOnLane()=2.88
myCurrentTraveledDistance=48.76
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.85}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=16.06
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.80}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=11.26
getPositionOnLane()=5.79
myCurrentTraveledDistance=17.05
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.93}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=101.48
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.43}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.43
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.36)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.36) - my_last_speed=6.18
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.36) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.36}) - returning res=-150.89
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-150.89}
 vNext{4.36}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.36}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.36}
[450] bool MSVehicle::moveChecked()
 vNext{4.36}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=117.57
getPositionOnLane()=1.76
myCurrentTraveledDistance=119.33
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=6.18
accel=-1.81m/s^2
Fad=4.13N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-200.02N
Fla=-4895.78N
Frr=120.97N
Fte=-4970.69N
newSpeed=4.36m/s
Pte=-21694.08W
omega=161.48
omega nonzero processing
Pte=-6508.22W
Pmot_out=-6850.76W
Torque=-42.42
eff_mot=1.21
Pmot_in=-5673.62W
computeElectricAuxiliaries()=14727999091.20
Pbat=4085437.24W
my_last_DoD=0.000005104
0.15 * my_last_DoD=0.000000766
2.15 - 0.15 * my_last_DoD=2.149999234
E=928.799669231
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4085437.24)
E*E=862668.83
4*Ri*Pbat=3029650.09
E*E-4*Ri*Pbat=-2166981.26
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434283036}
 my_last_charge_rem{0.000379750}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{6410.228052266}
 my_curr_charge_rem{0.000417725}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.36
my_curr_DoD = 0.000005615
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.39
 my_curr_energy_removed_a = 3.25
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1134.84
 my_curr_energy_removed_c = 0.27
Pbat = 4085437.24
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1134.84
 (printf) Pbat * DELTA_T_hours = 1134.8436788
eff_mot = 1.21
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.26}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=61.35
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.02}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=33.26
getPositionOnLane()=2.83
myCurrentTraveledDistance=36.09
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
const MSRoute& MSBaseVehicle::getRoute()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000014
 route->getID()=!SHNormVeh000014
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000014
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000014
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000014
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (588ms ~= 1.70*RT, ~25.51UPS, vehicles TOT 15 ACT 15)             ----> void MSNet::preSimStepOutput() const
Step #22.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.75)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.75) - my_last_speed=4.36
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=6.75) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{6.75}) - returning newSpeed=6.75
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{6.75}
 vNext{6.75}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{6.75}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{6.75}
[450] bool MSVehicle::moveChecked()
 vNext{6.75}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=119.33
getPositionOnLane()=2.21
myCurrentTraveledDistance=121.54
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 1000
 time_ = 1000.00
 time_ = 1.00
 a-b (distance) = 4.54
 avg_speed = 4.54
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh000000
 avg_speed = 16.33
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.36
accel=2.38m/s^2
Fad=9.86N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=6428.49N
Frr=120.97N
Fte=6559.33N
newSpeed=6.75m/s
Pte=44253.42W
omega=249.63
omega nonzero processing
Pmot_out=42040.75W
Torque=168.42
eff_mot=0.82
Pmot_in=34484.60W
computeElectricAuxiliaries()=14727999091.20
Pbat=4125595.45W
my_last_DoD=0.000005615
0.15 * my_last_DoD=0.000000842
2.15 - 0.15 * my_last_DoD=2.149999158
E=928.799636154
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4125595.45)
E*E=862668.76
4*Ri*Pbat=3059430.34
E*E-4*Ri*Pbat=-2196761.57
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434320911}
 my_last_charge_rem{0.000417725}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{5827.570715907}
 my_curr_charge_rem{0.000459497}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 6.75
my_curr_DoD = 0.000006176
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.43
 my_curr_energy_removed_a = 3.67
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1146.00
 my_curr_energy_removed_c = 0.29
Pbat = 4125595.45
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1146.00
 (printf) Pbat * DELTA_T_hours = 1145.9987378
eff_mot = 0.82
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.95}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=17.05
getPositionOnLane()=3.98
myCurrentTraveledDistance=21.03
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.09)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.09) - my_last_speed=14.53
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.09) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{16.09}) - returning res=14.11
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{14.11}
 vNext{16.09}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{16.09}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{14.11}
[450] bool MSVehicle::moveChecked()
 vNext{14.11}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=198.53
getPositionOnLane()=10.18
myCurrentTraveledDistance=208.71
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 6000
 time_ = 6000.00
 time_ = 6.00
 a-b (distance) = 65.97
 avg_speed = 11.00
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh0000001
 avg_speed = 39.58
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=14.53
accel=-0.42m/s^2
Fad=43.13N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=-1128.29N
Frr=120.97N
Fte=-964.19N
newSpeed=14.11m/s
Pte=-13603.27W
omega=522.02
omega nonzero processing
Pte=-4080.98W
Pmot_out=-4295.77W
Torque=-8.23
eff_mot=1.48
Pmot_in=-2912.00W
computeElectricAuxiliaries()=14688999353.60
Pbat=4077365.60W
my_last_DoD=0.000009947
0.15 * my_last_DoD=0.000001492
2.15 - 0.15 * my_last_DoD=2.149998508
E=928.799355424
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4077365.60)
E*E=862668.24
4*Ri*Pbat=3023664.38
E*E-4*Ri*Pbat=-2160996.13
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434642357}
 my_last_charge_rem{0.000740025}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3289.946117607}
 my_curr_charge_rem{0.000814027}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 14.11
my_curr_DoD = 0.000010942
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.76
 my_curr_energy_removed_a = 7.30
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1132.60
 my_curr_energy_removed_c = 0.52
Pbat = 4077365.60
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1132.60
 (printf) Pbat * DELTA_T_hours = 1132.6015558
eff_mot = 1.48
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{18.21}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=94.64
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.80)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.80) - my_last_speed=14.64
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.80) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{16.80}) - returning res=10.30
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{10.30}
 vNext{16.80}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{16.80}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.30}
[450] bool MSVehicle::moveChecked()
 vNext{10.30}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=14.64
accel=-4.34m/s^2
Fad=22.98N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=-11708.94N
Frr=120.97N
Fte=-11726.42N
newSpeed=10.30m/s
Pte=-120764.38W
omega=381.04
omega nonzero processing
Pte=-36229.31W
Pmot_out=-38136.12W
Torque=-100.08
eff_mot=1.11
Pmot_in=-34216.39W
computeElectricAuxiliaries()=14725921382.40
Pbat=4056317.33W
my_last_DoD=0.000008221
0.15 * my_last_DoD=0.000001233
2.15 - 0.15 * my_last_DoD=2.149998767
E=928.799467293
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4056317.33)
E*E=862668.45
4*Ri*Pbat=3008055.55
E*E-4*Ri*Pbat=-2145387.10
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434514263}
 my_last_charge_rem{0.000611591}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3980.625358319}
 my_curr_charge_rem{0.000672750}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.30
my_curr_DoD = 0.000009043
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.62
 my_curr_energy_removed_a = 5.85
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1126.75
 my_curr_energy_removed_c = 0.43
Pbat = 4056317.33
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1126.75
 (printf) Pbat * DELTA_T_hours = 1126.7548138
eff_mot = 1.11
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=170.51
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{133.04}, bearing{46.96}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,055402.000,A,4350.1584,N,01028.4666,E,20.0,47.0,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999991,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.45}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=25.51
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.79}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=105.27
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.84}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=8.27
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.87}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=75.22
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.81)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.81) - my_last_speed=5.85
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.81) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{7.81}) - returning newSpeed=7.81
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{7.81}
 vNext{7.81}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{7.81}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{7.81}
[450] bool MSVehicle::moveChecked()
 vNext{7.81}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=5.85
accel=1.97m/s^2
Fad=13.23N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=5309.75N
Frr=120.97N
Fte=5443.95N
newSpeed=7.81m/s
Pte=42532.50W
omega=289.07
omega nonzero processing
Pmot_out=40405.87W
Torque=139.78
eff_mot=0.86
Pmot_in=34724.46W
computeElectricAuxiliaries()=3776604284.87
Pbat=1083781.20W
my_last_DoD=0.000001789
0.15 * my_last_DoD=0.000000268
2.15 - 0.15 * my_last_DoD=2.149999732
E=928.799884067
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1083781.20)
E*E=862669.22
4*Ri*Pbat=803702.91
E*E-4*Ri*Pbat=58966.31
sqrt(E*E-4*Ri*Pbat)=242.83
E-sqrt(E*E-4*Ri*Pbat)=685.97
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1850.04
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.71
 my_curr_charge_rem{1.712621911}
 my_last_charge_rem{0.000133100}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{12867.181900605}
 my_curr_charge_rem{0.000146410}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 7.81
my_curr_DoD = 0.000001968
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.14
 my_curr_energy_removed_a = 0.47
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 301.05
 my_curr_energy_removed_c = 0.09
Pbat = 1083781.20
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 301.05
 (printf) Pbat * DELTA_T_hours = 301.0503348
eff_mot = 0.86
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=12.23
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.48}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=61.28
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.52}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=46.99
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.89}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=48.76
getPositionOnLane()=5.37
myCurrentTraveledDistance=54.13
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.52}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=36.09
getPositionOnLane()=7.02
myCurrentTraveledDistance=43.11
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{1.53}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHElecVeh000002
 route->getID()=!SHElecVeh000002
 type->getID()=DEFAULT_ELECVEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHElecVeh000002
  v.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
----> void MSDevice_FEV::buildVehicleDevices(...)
 (v.getVehicleType().getID()==DEFAULT_ELECVEHTYPE)
const std::string& MSBaseVehicle::getId()

----> MSDevice_FEV::MSDevice_FEV(...id=SHElecVeh000002fevDevice...)
[100] MSDevice_FEV::MSDevice_FEV(...id=SHElecVeh000002fevDevice...)
const std::string& MSBaseVehicle::getId()

  holder.getID().c_str()=SHElecVeh000002
  holder.getVehicleType().getID().c_str()=DEFAULT_ELECVEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHElecVeh000002
  pars->color=0.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHElecVeh000002
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (518ms ~= 1.93*RT, ~30.89UPS, vehicles TOT 16 ACT 16)             ----> void MSNet::preSimStepOutput() const
Step #23.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{20.30}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=114.94
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.60)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.60) - my_last_speed=16.80
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.60) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{11.60}) - returning res=-20.50
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-20.50}
 vNext{11.60}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{11.60}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.60}
[450] bool MSVehicle::moveChecked()
 vNext{11.60}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.30
accel=1.30m/s^2
Fad=29.17N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=3519.46N
Frr=120.97N
Fte=3508.17N
newSpeed=11.60m/s
Pte=40704.28W
omega=429.30
omega nonzero processing
Pmot_out=38669.07W
Torque=90.07
eff_mot=0.92
Pmot_in=35482.66W
computeElectricAuxiliaries()=14725921382.40
Pbat=4126016.37W
my_last_DoD=0.000009043
0.15 * my_last_DoD=0.000001356
2.15 - 0.15 * my_last_DoD=2.149998644
E=928.799414022
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4126016.37)
E*E=862668.35
4*Ri*Pbat=3059742.48
E*E-4*Ri*Pbat=-2197074.13
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434575260}
 my_last_charge_rem{0.000672750}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3618.840994136}
 my_curr_charge_rem{0.000740025}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.60
my_curr_DoD = 0.000009947
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.69
 my_curr_energy_removed_a = 6.54
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1146.12
 my_curr_energy_removed_c = 0.47
Pbat = 4126016.37
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1146.12
 (printf) Pbat * DELTA_T_hours = 1146.1156598
eff_mot = 0.92
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=182.11
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{133.04}, bearing{46.96}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,061042.000,A,4350.1626,N,01028.4730,E,22.6,47.0,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 62, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 118, in u2open
  File "/usr/lib/python2.7/urllib2.py", line 404, in open
    response = self._open(req, data)
  File "/usr/lib/python2.7/urllib2.py", line 422, in _open
    '_open', req)
  File "/usr/lib/python2.7/urllib2.py", line 382, in _call_chain
    result = func(*args)
  File "/usr/lib/python2.7/urllib2.py", line 1214, in http_open
    return self.do_open(httplib.HTTPConnection, req)
  File "/usr/lib/python2.7/urllib2.py", line 1187, in do_open
    r = h.getresponse(buffering=True)
  File "/usr/lib/python2.7/httplib.py", line 1045, in getresponse
    response.begin()
  File "/usr/lib/python2.7/httplib.py", line 409, in begin
    version, status, reason = self._read_status()
  File "/usr/lib/python2.7/httplib.py", line 365, in _read_status
    line = self.fp.readline(_MAXLINE + 1)
  File "/usr/lib/python2.7/socket.py", line 476, in readline
    data = self._sock.recv(self._rbufsize)
KeyboardInterrupt
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999990,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{11.41}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=25.51
getPositionOnLane()=3.89
myCurrentTraveledDistance=29.40
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.17}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=105.27
getPositionOnLane()=1.92
myCurrentTraveledDistance=107.19
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.42}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=14.69
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.29}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=88.51
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.32)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.32) - my_last_speed=7.81
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.32) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{9.32}) - returning newSpeed=9.32
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{9.32}
 vNext{9.32}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{9.32}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{9.32}
[450] bool MSVehicle::moveChecked()
 vNext{9.32}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=7.81
accel=1.50m/s^2
Fad=18.81N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=4056.45N
Frr=120.97N
Fte=4196.23N
newSpeed=9.32m/s
Pte=39092.22W
omega=344.69
omega nonzero processing
Pmot_out=37137.61W
Torque=107.74
eff_mot=0.90
Pmot_in=33266.41W
computeElectricAuxiliaries()=3776604284.87
Pbat=1082323.16W
my_last_DoD=0.000001968
0.15 * my_last_DoD=0.000000295
2.15 - 0.15 * my_last_DoD=2.149999705
E=928.799872474
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1082323.16)
E*E=862669.20
4*Ri*Pbat=802621.67
E*E-4*Ri*Pbat=60047.54
sqrt(E*E-4*Ri*Pbat)=245.05
E-sqrt(E*E-4*Ri*Pbat)=683.75
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1844.06
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.71
 my_curr_charge_rem{1.706219032}
 my_last_charge_rem{0.000146410}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{11653.705565280}
 my_curr_charge_rem{0.000161051}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 9.32
my_curr_DoD = 0.000002165
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.15
 my_curr_energy_removed_a = 0.62
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 300.65
 my_curr_energy_removed_c = 0.10
Pbat = 1082323.16
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 300.65
 (printf) Pbat * DELTA_T_hours = 300.6453228
eff_mot = 0.90
algo1 = 0.00
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=21.55
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.65}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=61.28
getPositionOnLane()=2.05
myCurrentTraveledDistance=63.33
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.06}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=46.99
getPositionOnLane()=7.65
myCurrentTraveledDistance=54.63
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.94}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.94
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.42)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.42) - my_last_speed=6.75
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.42) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.42}) - returning res=-170.25
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-170.25}
 vNext{5.42}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.42}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.42}
[450] bool MSVehicle::moveChecked()
 vNext{5.42}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=6.75
accel=-1.33m/s^2
Fad=6.36N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=-3581.73N
Frr=120.97N
Fte=-3454.39N
newSpeed=5.42m/s
Pte=-18720.53W
omega=200.52
omega nonzero processing
Pte=-5616.16W
Pmot_out=-5911.75W
Torque=-29.48
eff_mot=1.18
Pmot_in=-4990.61W
computeElectricAuxiliaries()=14727999091.20
Pbat=4086120.24W
my_last_DoD=0.000006176
0.15 * my_last_DoD=0.000000926
2.15 - 0.15 * my_last_DoD=2.149999074
E=928.799599769
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4086120.24)
E*E=862668.70
4*Ri*Pbat=3030156.59
E*E-4*Ri*Pbat=-2167487.89
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434362572}
 my_last_charge_rem{0.000459497}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{5297.882228307}
 my_curr_charge_rem{0.000505447}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.42
my_curr_DoD = 0.000006794
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.47
 my_curr_energy_removed_a = 4.14
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1135.03
 my_curr_energy_removed_c = 0.32
Pbat = 4086120.24
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1135.03
 (printf) Pbat * DELTA_T_hours = 1135.0334018
eff_mot = 1.18
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=126.96
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.25}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=21.03
getPositionOnLane()=6.70
myCurrentTraveledDistance=27.72
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.77)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.77) - my_last_speed=16.09
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.77) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.77}) - returning res=-227.98
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-227.98}
 vNext{15.77}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.77}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{15.77}
[450] bool MSVehicle::moveChecked()
 vNext{15.77}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=208.71
getPositionOnLane()=9.82
myCurrentTraveledDistance=218.52
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=14.11
accel=1.66m/s^2
Fad=53.88N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.02 for Fhc=0.00 calculation
normal slope detected: 0.02 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=590.86N
Fla=4479.28N
Frr=120.97N
Fte=5245.00N
newSpeed=15.77m/s
Pte=82705.67W
omega=583.43
omega nonzero processing
Pmot_out=78570.38W
Torque=134.67
eff_mot=0.92
Pmot_in=72065.49W
computeElectricAuxiliaries()=14688999353.60
Pbat=4152343.09W
my_last_DoD=0.000010942
0.15 * my_last_DoD=0.000001641
2.15 - 0.15 * my_last_DoD=2.149998359
E=928.799290966
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4152343.09)
E*E=862668.12
4*Ri*Pbat=3079265.66
E*E-4*Ri*Pbat=-2216597.54
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434716164}
 my_last_charge_rem{0.000814027}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2990.950775307}
 my_curr_charge_rem{0.000895430}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 15.77
my_curr_DoD = 0.000012036
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.83
 my_curr_energy_removed_a = 8.13
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1153.43
 my_curr_energy_removed_c = 0.57
Pbat = 4152343.09
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1153.43
 (printf) Pbat * DELTA_T_hours = 1153.4286368
eff_mot = 0.92
algo1 = 0.01
algo2 = 0.00
slope = 0.02
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.92}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=64.05
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{10.64}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=53.75
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{1.56}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000015
 route->getID()=!SHNormVeh000015
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000015
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000015
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000015
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (441ms ~= 2.27*RT, ~38.55UPS, vehicles TOT 17 ACT 17)             ----> void MSNet::preSimStepOutput() const
Step #24.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=18.16)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=18.16) - my_last_speed=15.77
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=18.16) - nonzero slope=0.02
normal slope detected: 0.02 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{18.16}) - returning res=7.63
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{7.63}
 vNext{18.16}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{18.16}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{7.63}
[450] bool MSVehicle::moveChecked()
 vNext{7.63}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=15.77
accel=-8.14m/s^2
Fad=12.61N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.02 for Fhc=0.00 calculation
normal slope detected: 0.02 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=590.86N
Fla=-21963.71N
Frr=120.97N
Fte=-21239.26N
newSpeed=7.63m/s
Pte=-162039.61W
omega=282.28
omega nonzero processing
Pte=-48611.88W
Pmot_out=-51170.40W
Torque=-181.27
eff_mot=1.26
Pmot_in=-40571.64W
computeElectricAuxiliaries()=14688999353.60
Pbat=4039705.96W
my_last_DoD=0.000012036
0.15 * my_last_DoD=0.000001805
2.15 - 0.15 * my_last_DoD=2.149998195
E=928.799220063
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4039705.96)
E*E=862667.99
4*Ri*Pbat=2995737.00
E*E-4*Ri*Pbat=-2133069.01
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434797351}
 my_last_charge_rem{0.000895430}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2719.136827762}
 my_curr_charge_rem{0.000984973}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 7.63
my_curr_DoD = 0.000013240
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.91
 my_curr_energy_removed_a = 9.04
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1122.14
 my_curr_energy_removed_c = 0.63
Pbat = 4039705.96
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1122.14
 (printf) Pbat * DELTA_T_hours = 1122.1405448
eff_mot = 1.26
algo1 = 0.01
algo2 = 0.00
slope = 0.02
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=226.15
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.85}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=31.57
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{22.73}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=137.67
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.18)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.18) - my_last_speed=11.60
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.18) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.18}) - returning newSpeed=13.18
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.18}
 vNext{13.18}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.18}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.18}
[450] bool MSVehicle::moveChecked()
 vNext{13.18}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.60
accel=1.57m/s^2
Fad=37.62N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=4246.42N
Frr=120.97N
Fte=4243.58N
newSpeed=13.18m/s
Pte=55914.78W
omega=487.52
omega nonzero processing
Pmot_out=53119.04W
Torque=108.96
eff_mot=0.92
Pmot_in=48725.59W
computeElectricAuxiliaries()=14725921382.40
Pbat=4139259.31W
my_last_DoD=0.000009947
0.15 * my_last_DoD=0.000001492
2.15 - 0.15 * my_last_DoD=2.149998508
E=928.799355424
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4139259.31)
E*E=862668.24
4*Ri*Pbat=3069563.08
E*E-4*Ri*Pbat=-2206894.84
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434642357}
 my_last_charge_rem{0.000740025}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3289.946117607}
 my_curr_charge_rem{0.000814027}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.18
my_curr_DoD = 0.000010942
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.76
 my_curr_energy_removed_a = 7.30
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1149.79
 my_curr_energy_removed_c = 0.52
Pbat = 4139259.31
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1149.79
 (printf) Pbat * DELTA_T_hours = 1149.7942538
eff_mot = 0.92
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=195.29
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{133.04}, bearing{46.96}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,062722.000,A,4350.1674,N,01028.4803,E,25.6,47.0,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999989,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.55}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=23.23
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.76}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=102.27
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.62)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.62) - my_last_speed=9.32
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.62) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{11.62}) - returning newSpeed=11.62
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{11.62}
 vNext{11.62}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{11.62}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.62}
[450] bool MSVehicle::moveChecked()
 vNext{11.62}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=21.55
getPositionOnLane()=3.78
myCurrentTraveledDistance=25.33
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=9.32
accel=2.31m/s^2
Fad=29.27N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.01 for Fhc=0.00 calculation
normal slope detected: 0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=133.82N
Fla=6223.36N
Frr=120.97N
Fte=6507.42N
newSpeed=11.62m/s
Pte=75630.92W
omega=430.02
omega nonzero processing
Pmot_out=71849.37W
Torque=167.08
eff_mot=0.88
Pmot_in=63524.72W
computeElectricAuxiliaries()=3776604284.87
Pbat=1112581.46W
my_last_DoD=0.000002165
0.15 * my_last_DoD=0.000000325
2.15 - 0.15 * my_last_DoD=2.149999675
E=928.799859721
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1112581.46)
E*E=862669.18
4*Ri*Pbat=825060.41
E*E-4*Ri*Pbat=37608.77
sqrt(E*E-4*Ri*Pbat)=193.93
E-sqrt(E*E-4*Ri*Pbat)=734.87
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1981.92
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.86
 my_curr_charge_rem{1.855050267}
 my_last_charge_rem{0.000161051}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{11518.402663412}
 my_curr_charge_rem{0.000177156}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.62
my_curr_DoD = 0.000002381
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.16
 my_curr_energy_removed_a = 0.79
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 309.05
 my_curr_energy_removed_c = 0.11
Pbat = 1112581.46
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 309.05
 (printf) Pbat * DELTA_T_hours = 309.0504068
eff_mot = 0.88
algo1 = 0.00
algo2 = 0.00
slope = 0.01
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.24}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=10.17
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.09)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.09) - my_last_speed=5.42
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.09) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{3.09}) - returning res=-155.79
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-155.79}
 vNext{3.09}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{3.09}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{3.09}
[450] bool MSVehicle::moveChecked()
 vNext{3.09}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=126.96
getPositionOnLane()=1.57
myCurrentTraveledDistance=128.53
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=5.42
accel=-2.33m/s^2
Fad=2.06N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.07 for Fhc=0.00 calculation
normal slope detected: -0.07 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-1643.75N
Fla=-6295.20N
Frr=120.97N
Fte=-7815.92N
newSpeed=3.09m/s
Pte=-24123.70W
omega=114.20
omega nonzero processing
Pte=-7237.11W
Pmot_out=-7618.01W
Torque=-66.71
eff_mot=1.34
Pmot_in=-5664.17W
computeElectricAuxiliaries()=14727999091.20
Pbat=4085446.69W
my_last_DoD=0.000006794
0.15 * my_last_DoD=0.000001019
2.15 - 0.15 * my_last_DoD=2.149998981
E=928.799559746
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4085446.69)
E*E=862668.62
4*Ri*Pbat=3029657.09
E*E-4*Ri*Pbat=-2166988.47
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434408400}
 my_last_charge_rem{0.000505447}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{4816.347239580}
 my_curr_charge_rem{0.000555992}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 3.09
my_curr_DoD = 0.000007473
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.52
 my_curr_energy_removed_a = 4.66
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1134.85
 my_curr_energy_removed_c = 0.36
Pbat = 4085446.69
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1134.85
 (printf) Pbat * DELTA_T_hours = 1134.8463028
eff_mot = 1.34
algo1 = 0.01
algo2 = 0.00
slope = -0.07
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{11.32}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=75.37
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.82}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=66.57
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.83}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.83
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.91}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=29.40
getPositionOnLane()=9.89
myCurrentTraveledDistance=39.29
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.17}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=114.36
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.00}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=63.33
getPositionOnLane()=0.52
myCurrentTraveledDistance=63.85
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.02}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=62.65
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.38)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.38) - my_last_speed=0.00
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=1.38) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{1.38}) - returning newSpeed=1.38
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{1.38}
 vNext{1.38}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{1.38}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{1.38}
[450] bool MSVehicle::moveChecked()
 vNext{1.38}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=0.00
accel=1.38m/s^2
Fad=0.41N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh000002fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000002}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=125.14N
Fla=3713.36N
Frr=120.97N
Fte=3959.89N
newSpeed=1.38m/s
Pte=5453.09W
omega=50.95
omega nonzero processing
Pmot_out=5180.44W
Torque=101.67
eff_mot=0.58
Pmot_in=3019.66W
computeElectricAuxiliaries()=6014.80
Pbat=3021.33W
my_last_DoD=0.000001000
0.15 * my_last_DoD=0.000000150
2.15 - 0.15 * my_last_DoD=2.149999850
E=928.799935200
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000002 is requiring energy from its batteries (Pbat=3021.33)
E*E=862669.32
4*Ri*Pbat=2240.54
E*E-4*Ri*Pbat=860428.78
sqrt(E*E-4*Ri*Pbat)=927.59
E-sqrt(E*E-4*Ri*Pbat)=1.21
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=3.26
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 0.00
 my_curr_charge_rem{0.001192107}
 my_last_charge_rem{0.000100000}
 my_curr_charge_rem{0.001192107}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 1.38
my_curr_DoD = 0.000016024
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.11
 my_curr_energy_removed_a = 1.11
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 0.84
 my_curr_energy_removed_c = 0.76
Pbat = 3021.33
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 0.84
 (printf) Pbat * DELTA_T_hours = 0.8392598
eff_mot = 0.58
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (484ms ~= 2.07*RT, ~35.12UPS, vehicles TOT 17 ACT 17)             ----> void MSNet::preSimStepOutput() const
Step #25.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.43}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=69.28
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.49)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.49) - my_last_speed=3.09
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.49) - nonzero slope=-0.07
normal slope detected: -0.07 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.49}) - returning newSpeed=4.49
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{4.49}
 vNext{4.49}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.49}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.49}
[450] bool MSVehicle::moveChecked()
 vNext{4.49}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=128.53
getPositionOnLane()=3.00
myCurrentTraveledDistance=131.53
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 1000
 time_ = 1000.00
 time_ = 1.00
 a-b (distance) = 1.49
 avg_speed = 1.49
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh000000
 avg_speed = 5.38
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=3.09
accel=1.41m/s^2
Fad=4.37N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=3795.65N
Frr=120.97N
Fte=3921.00N
newSpeed=4.49m/s
Pte=17617.29W
omega=166.24
omega nonzero processing
Pmot_out=16736.43W
Torque=100.67
eff_mot=0.82
Pmot_in=13719.61W
computeElectricAuxiliaries()=14727999091.20
Pbat=4104830.47W
my_last_DoD=0.000007473
0.15 * my_last_DoD=0.000001121
2.15 - 0.15 * my_last_DoD=2.149998879
E=928.799515721
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4104830.47)
E*E=862668.54
4*Ri*Pbat=3044031.58
E*E-4*Ri*Pbat=-2181363.04
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434458811}
 my_last_charge_rem{0.000555992}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{4378.588158919}
 my_curr_charge_rem{0.000611591}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.49
my_curr_DoD = 0.000008221
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.57
 my_curr_energy_removed_a = 5.23
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1140.23
 my_curr_energy_removed_c = 0.39
Pbat = 4104830.47
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1140.23
 (printf) Pbat * DELTA_T_hours = 1140.2306868
eff_mot = 0.82
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.48)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.48) - my_last_speed=11.62
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.48) - nonzero slope=0.01
normal slope detected: 0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.48}) - returning newSpeed=13.48
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.48}
 vNext{13.48}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.48}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.48}
[450] bool MSVehicle::moveChecked()
 vNext{13.48}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.62
accel=1.86m/s^2
Fad=39.39N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.01 for Fhc=0.00 calculation
normal slope detected: 0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=133.82N
Fla=5021.45N
Frr=120.97N
Fte=5315.64N
newSpeed=13.48m/s
Pte=71671.22W
omega=498.87
omega nonzero processing
Pmot_out=68087.66W
Torque=136.48
eff_mot=0.91
Pmot_in=61856.45W
computeElectricAuxiliaries()=3776604284.87
Pbat=1110913.19W
my_last_DoD=0.000002381
0.15 * my_last_DoD=0.000000357
2.15 - 0.15 * my_last_DoD=2.149999643
E=928.799845694
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1110913.19)
E*E=862669.15
4*Ri*Pbat=823823.27
E*E-4*Ri*Pbat=38845.89
sqrt(E*E-4*Ri*Pbat)=197.09
E-sqrt(E*E-4*Ri*Pbat)=731.71
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1973.39
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.85
 my_curr_charge_rem{1.845806049}
 my_last_charge_rem{0.000177156}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{10419.093947098}
 my_curr_charge_rem{0.000194872}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.48
my_curr_DoD = 0.000002619
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.18
 my_curr_energy_removed_a = 0.97
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 308.59
 my_curr_energy_removed_c = 0.12
Pbat = 1110913.19
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 308.59
 (printf) Pbat * DELTA_T_hours = 308.5869988
eff_mot = 0.91
algo1 = 0.00
algo2 = 0.00
slope = 0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=38.81
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.20)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.20) - my_last_speed=18.16
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.20) - nonzero slope=0.02
normal slope detected: 0.02 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{9.20}) - returning res=-14.36
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-14.36}
 vNext{9.20}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{9.20}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{9.20}
[450] bool MSVehicle::moveChecked()
 vNext{9.20}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=226.15
getPositionOnLane()=2.76
myCurrentTraveledDistance=228.92
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 2000
 time_ = 2000.00
 time_ = 2.00
 a-b (distance) = 7.63
 avg_speed = 3.81
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh0000001
 avg_speed = 13.73
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=7.63
accel=1.57m/s^2
Fad=18.33N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=4234.19N
Frr=120.97N
Fte=4373.50N
newSpeed=9.20m/s
Pte=40228.90W
omega=340.34
omega nonzero processing
Pmot_out=38217.45W
Torque=112.29
eff_mot=0.89
Pmot_in=34100.48W
computeElectricAuxiliaries()=14688999353.60
Pbat=4114378.08W
my_last_DoD=0.000013240
0.15 * my_last_DoD=0.000001986
2.15 - 0.15 * my_last_DoD=2.149998014
E=928.799142069
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4114378.08)
E*E=862667.85
4*Ri*Pbat=3051111.83
E*E-4*Ri*Pbat=-2188443.99
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434886657}
 my_last_charge_rem{0.000984973}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2472.033239085}
 my_curr_charge_rem{0.001083471}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 9.20
my_curr_DoD = 0.000014564
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.01
 my_curr_energy_removed_a = 10.05
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1142.88
 my_curr_energy_removed_c = 0.69
Pbat = 4114378.08
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1142.88
 (printf) Pbat * DELTA_T_hours = 1142.8827998
eff_mot = 0.89
algo1 = 0.01
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.92}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=31.57
getPositionOnLane()=2.82
myCurrentTraveledDistance=34.39
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{25.22}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=162.89
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.04)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.04) - my_last_speed=13.18
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.04) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.04}) - returning res=13.41
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.41}
 vNext{15.04}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.04}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.41}
[450] bool MSVehicle::moveChecked()
 vNext{13.41}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.18
accel=0.23m/s^2
Fad=38.95N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=620.34N
Frr=120.97N
Fte=618.82N
newSpeed=13.41m/s
Pte=8296.06W
omega=496.03
omega nonzero processing
Pmot_out=7881.25W
Torque=15.89
eff_mot=0.86
Pmot_in=6739.22W
computeElectricAuxiliaries()=14725921382.40
Pbat=4097272.93W
my_last_DoD=0.000010942
0.15 * my_last_DoD=0.000001641
2.15 - 0.15 * my_last_DoD=2.149998359
E=928.799290966
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4097272.93)
E*E=862668.12
4*Ri*Pbat=3038427.12
E*E-4*Ri*Pbat=-2175759.00
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434716164}
 my_last_charge_rem{0.000814027}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2990.950775307}
 my_curr_charge_rem{0.000895430}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.41
my_curr_DoD = 0.000012036
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.83
 my_curr_energy_removed_a = 8.13
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1138.13
 my_curr_energy_removed_c = 0.57
Pbat = 4097272.93
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1138.13
 (printf) Pbat * DELTA_T_hours = 1138.1313718
eff_mot = 0.86
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=208.69
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{133.04}, bearing{46.96}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,064402.000,A,4350.1722,N,01028.4877,E,26.1,47.0,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999988,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.31}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=28.55
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.92}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=115.19
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.88}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=10.17
getPositionOnLane()=1.57
myCurrentTraveledDistance=11.74
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.06}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=88.43
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.73}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=80.31
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.84}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=9.67
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.76}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=114.36
getPositionOnLane()=9.33
myCurrentTraveledDistance=123.68
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.50}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=70.16
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.87)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.87) - my_last_speed=1.38
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=3.87) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{3.87}) - returning newSpeed=3.87
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{3.87}
 vNext{3.87}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{3.87}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{3.87}
[450] bool MSVehicle::moveChecked()
 vNext{3.87}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=1.38
accel=2.49m/s^2
Fad=3.24N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh000002fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000002}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=125.14N
Fla=6717.69N
Frr=120.97N
Fte=6967.04N
newSpeed=3.87m/s
Pte=26938.06W
omega=143.06
omega nonzero processing
Pmot_out=25591.15W
Torque=178.88
eff_mot=0.71
Pmot_in=18283.34W
computeElectricAuxiliaries()=6014.80
Pbat=18285.01W
my_last_DoD=0.000016024
0.15 * my_last_DoD=0.000002404
2.15 - 0.15 * my_last_DoD=2.149997596
E=928.798961652
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000002 is requiring energy from its batteries (Pbat=18285.01)
E*E=862667.51
4*Ri*Pbat=13559.67
E*E-4*Ri*Pbat=849107.84
sqrt(E*E-4*Ri*Pbat)=921.47
E-sqrt(E*E-4*Ri*Pbat)=7.33
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=19.76
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 0.01
 my_curr_charge_rem{0.010041838}
 my_last_charge_rem{0.001192107}
 my_curr_charge_rem{0.010041838}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 3.87
my_curr_DoD = 0.000134979
 my_curr_charge_rem = 0.01
 E = 928.80
 my_curr_charge_rem * E = 9.33
 my_curr_energy_removed_a = 10.43
 my_curr_energy_removed_b = 0.01
 Pbat * DELTA_T_hours = 5.08
 my_curr_energy_removed_c = 6.43
Pbat = 18285.01
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 5.08
 (printf) Pbat * DELTA_T_hours = 5.0791698
eff_mot = 0.71
algo1 = 0.13
algo2 = 0.01
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.87
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{14.95}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=54.24
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000016
 route->getID()=!SHNormVeh000016
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000016
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000016
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000016
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (521ms ~= 1.92*RT, ~34.55UPS, vehicles TOT 18 ACT 18)             ----> void MSNet::preSimStepOutput() const
Step #26.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.00}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=69.28
getPositionOnLane()=3.08
myCurrentTraveledDistance=72.36
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.12)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.12) - my_last_speed=13.48
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.12) - nonzero slope=0.01
normal slope detected: 0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.12}) - returning res=14.21
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{14.21}
 vNext{15.12}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.12}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{14.21}
[450] bool MSVehicle::moveChecked()
 vNext{14.21}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.48
accel=0.73m/s^2
Fad=43.77N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.01 for Fhc=0.00 calculation
normal slope detected: 0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=133.82N
Fla=1965.91N
Frr=120.97N
Fte=2264.47N
newSpeed=14.21m/s
Pte=32181.77W
omega=525.83
omega nonzero processing
Pmot_out=30572.68W
Torque=58.14
eff_mot=0.93
Pmot_in=28352.81W
computeElectricAuxiliaries()=3776604284.87
Pbat=1077409.55W
my_last_DoD=0.000002619
0.15 * my_last_DoD=0.000000393
2.15 - 0.15 * my_last_DoD=2.149999607
E=928.799830263
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1077409.55)
E*E=862669.12
4*Ri*Pbat=798977.87
E*E-4*Ri*Pbat=63691.25
sqrt(E*E-4*Ri*Pbat)=252.37
E-sqrt(E*E-4*Ri*Pbat)=676.43
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1824.31
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.69
 my_curr_charge_rem{1.685083462}
 my_last_charge_rem{0.000194872}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{8647.142581803}
 my_curr_charge_rem{0.000214359}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 14.21
my_curr_DoD = 0.000002881
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.20
 my_curr_energy_removed_a = 1.17
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 299.28
 my_curr_energy_removed_c = 0.14
Pbat = 1077409.55
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 299.28
 (printf) Pbat * DELTA_T_hours = 299.2804328
eff_mot = 0.93
algo1 = 0.00
algo2 = 0.00
slope = 0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=53.02
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{23.01}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=185.90
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.76)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.76) - my_last_speed=15.04
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.76) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.76}) - returning newSpeed=15.76
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{15.76}
 vNext{15.76}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.76}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{15.76}
[450] bool MSVehicle::moveChecked()
 vNext{15.76}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.41
accel=2.35m/s^2
Fad=53.81N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=6347.49N
Frr=120.97N
Fte=6360.84N
newSpeed=15.76m/s
Pte=100236.92W
omega=583.06
omega nonzero processing
Pmot_out=95225.07W
Torque=163.32
eff_mot=0.91
Pmot_in=86461.93W
computeElectricAuxiliaries()=14725921382.40
Pbat=4176995.65W
my_last_DoD=0.000012036
0.15 * my_last_DoD=0.000001805
2.15 - 0.15 * my_last_DoD=2.149998195
E=928.799220063
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4176995.65)
E*E=862667.99
4*Ri*Pbat=3097547.33
E*E-4*Ri*Pbat=-2234879.34
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434797351}
 my_last_charge_rem{0.000895430}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2719.136827762}
 my_curr_charge_rem{0.000984973}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 15.76
my_curr_DoD = 0.000013240
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.91
 my_curr_energy_removed_a = 9.04
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1160.28
 my_curr_energy_removed_c = 0.63
Pbat = 4176995.65
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1160.28
 (printf) Pbat * DELTA_T_hours = 1160.2765698
eff_mot = 0.91
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=224.45
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{128.79}, bearing{51.21}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,070042.000,A,4350.1776,N,01028.4968,E,30.6,51.2,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999987,60.00,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.64}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=28.55
getPositionOnLane()=0.99
myCurrentTraveledDistance=29.54
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.38}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=128.57
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{15.51}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=103.94
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.20}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=80.31
getPositionOnLane()=5.30
myCurrentTraveledDistance=85.61
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.42}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=18.10
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.52}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=74.68
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.26)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.26) - my_last_speed=3.87
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.26) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.26}) - returning newSpeed=5.26
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{5.26}
 vNext{5.26}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.26}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.26}
[450] bool MSVehicle::moveChecked()
 vNext{5.26}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=3.87
accel=1.39m/s^2
Fad=6.00N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh000002fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000002}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=125.14N
Fla=3761.85N
Frr=120.97N
Fte=4013.96N
newSpeed=5.26m/s
Pte=21115.63W
omega=194.64
omega nonzero processing
Pmot_out=20059.85W
Torque=103.06
eff_mot=0.84
Pmot_in=16834.84W
computeElectricAuxiliaries()=6014.80
Pbat=16836.52W
my_last_DoD=0.000134979
0.15 * my_last_DoD=0.000020247
2.15 - 0.15 * my_last_DoD=2.149979753
E=928.791253366
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000002 is requiring energy from its batteries (Pbat=16836.52)
E*E=862653.19
4*Ri*Pbat=12485.51
E*E-4*Ri*Pbat=850167.69
sqrt(E*E-4*Ri*Pbat)=922.05
E-sqrt(E*E-4*Ri*Pbat)=6.75
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=18.19
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.01
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 0.02
 my_curr_charge_rem{0.018080761}
 my_last_charge_rem{0.010041838}
 my_curr_charge_rem{0.018080761}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.26
my_curr_DoD = 0.000243035
 my_curr_charge_rem = 0.02
 E = 928.79
 my_curr_charge_rem * E = 16.79
 my_curr_energy_removed_a = 27.23
 my_curr_energy_removed_b = 0.01
 Pbat * DELTA_T_hours = 4.68
 my_curr_energy_removed_c = 11.57
Pbat = 16836.52
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 4.68
 (printf) Pbat * DELTA_T_hours = 4.6768108
eff_mot = 0.84
algo1 = 0.23
algo2 = 0.02
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=9.13
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{16.84}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=71.08
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.87)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.87) - my_last_speed=4.49
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.87) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.87}) - returning newSpeed=5.87
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{5.87}
 vNext{5.87}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.87}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.87}
[450] bool MSVehicle::moveChecked()
 vNext{5.87}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=131.53
getPositionOnLane()=1.71
myCurrentTraveledDistance=133.23
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.49
accel=1.38m/s^2
Fad=7.46N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.02 for Fhc=0.00 calculation
normal slope detected: -0.02 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-396.85N
Fla=3711.27N
Frr=120.97N
Fte=3442.86N
newSpeed=5.87m/s
Pte=20203.96W
omega=217.13
omega nonzero processing
Pmot_out=19193.76W
Torque=88.40
eff_mot=0.86
Pmot_in=16586.47W
computeElectricAuxiliaries()=14727999091.20
Pbat=4107697.33W
my_last_DoD=0.000008221
0.15 * my_last_DoD=0.000001233
2.15 - 0.15 * my_last_DoD=2.149998767
E=928.799467293
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4107697.33)
E*E=862668.45
4*Ri*Pbat=3046157.57
E*E-4*Ri*Pbat=-2183489.12
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434514263}
 my_last_charge_rem{0.000611591}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3980.625358319}
 my_curr_charge_rem{0.000672750}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.87
my_curr_DoD = 0.000009043
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.62
 my_curr_energy_removed_a = 5.85
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1141.03
 my_curr_energy_removed_c = 0.43
Pbat = 4107697.33
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1141.03
 (printf) Pbat * DELTA_T_hours = 1141.0270358
eff_mot = 0.86
algo1 = 0.01
algo2 = 0.00
slope = -0.02
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.62)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.62) - my_last_speed=9.20
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=10.62) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{10.62}) - returning newSpeed=10.62
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{10.62}
 vNext{10.62}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{10.62}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.62}
[450] bool MSVehicle::moveChecked()
 vNext{10.62}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=228.92
getPositionOnLane()=8.20
myCurrentTraveledDistance=237.12
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=9.20
accel=1.42m/s^2
Fad=24.45N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-29.82N
Fla=3841.82N
Frr=120.97N
Fte=3957.42N
newSpeed=10.62m/s
Pte=42035.85W
omega=393.01
omega nonzero processing
Pmot_out=39934.06W
Torque=101.61
eff_mot=0.91
Pmot_in=36265.08W
computeElectricAuxiliaries()=14688999353.60
Pbat=4116542.67W
my_last_DoD=0.000014564
0.15 * my_last_DoD=0.000002185
2.15 - 0.15 * my_last_DoD=2.149997815
E=928.799056276
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4116542.67)
E*E=862667.69
4*Ri*Pbat=3052717.04
E*E-4*Ri*Pbat=-2190049.35
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434984894}
 my_last_charge_rem{0.001083471}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2247.393613014}
 my_curr_charge_rem{0.001191818}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.62
my_curr_DoD = 0.000016020
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.11
 my_curr_energy_removed_a = 11.15
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1143.48
 my_curr_energy_removed_c = 0.76
Pbat = 4116542.67
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1143.48
 (printf) Pbat * DELTA_T_hours = 1143.4840768
eff_mot = 0.91
algo1 = 0.01
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.24}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=34.39
getPositionOnLane()=4.78
myCurrentTraveledDistance=39.17
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.29}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=21.03
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.06}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=135.74
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000015
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.36}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (500ms ~= 2.00*RT, ~36.00UPS, vehicles TOT 18 ACT 18)             ----> void MSNet::preSimStepOutput() const
Step #27.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.36)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.36) - my_last_speed=15.12
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=16.36) - nonzero slope=0.01
normal slope detected: 0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{16.36}) - returning newSpeed=16.36
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{16.36}
 vNext{16.36}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{16.36}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{16.36}
[450] bool MSVehicle::moveChecked()
 vNext{16.36}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=53.02
getPositionOnLane()=4.42
myCurrentTraveledDistance=57.44
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 3000
 time_ = 3000.00
 time_ = 3.00
 a-b (distance) = 27.69
 avg_speed = 9.23
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh000001
 avg_speed = 33.23
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=14.21
accel=2.15m/s^2
Fad=58.01N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-164.70N
Fla=5799.78N
Frr=120.97N
Fte=5814.06N
newSpeed=16.36m/s
Pte=95123.03W
omega=605.35
omega nonzero processing
Pmot_out=90366.88W
Torque=149.28
eff_mot=0.91
Pmot_in=82635.24W
computeElectricAuxiliaries()=3776604284.87
Pbat=1131691.98W
my_last_DoD=0.000002881
0.15 * my_last_DoD=0.000000432
2.15 - 0.15 * my_last_DoD=2.149999568
E=928.799813289
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1131691.98)
E*E=862669.09
4*Ri*Pbat=839232.26
E*E-4*Ri*Pbat=23436.84
sqrt(E*E-4*Ri*Pbat)=153.09
E-sqrt(E*E-4*Ri*Pbat)=775.71
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2092.06
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.98
 my_curr_charge_rem{1.975201614}
 my_last_charge_rem{0.000214359}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{9214.461301881}
 my_curr_charge_rem{0.000235795}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 16.36
my_curr_DoD = 0.000003169
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.22
 my_curr_energy_removed_a = 1.39
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 314.36
 my_curr_energy_removed_c = 0.15
Pbat = 1131691.98
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 314.36
 (printf) Pbat * DELTA_T_hours = 314.3588848
eff_mot = 0.91
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.88)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.88) - my_last_speed=10.62
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.88) - nonzero slope=-0.00
normal slope detected: -0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{12.88}) - returning res=12.37
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{12.37}
 vNext{12.88}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{12.88}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{12.37}
[450] bool MSVehicle::moveChecked()
 vNext{12.37}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.62
accel=1.75m/s^2
Fad=33.15N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-29.82N
Fla=4713.64N
Frr=120.97N
Fte=4837.95N
newSpeed=12.37m/s
Pte=59839.64W
omega=457.65
omega nonzero processing
Pmot_out=56847.65W
Torque=124.22
eff_mot=0.91
Pmot_in=51622.51W
computeElectricAuxiliaries()=14688999353.60
Pbat=4131900.11W
my_last_DoD=0.000016020
0.15 * my_last_DoD=0.000002403
2.15 - 0.15 * my_last_DoD=2.149997597
E=928.798961904
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4131900.11)
E*E=862667.51
4*Ri*Pbat=3064105.70
E*E-4*Ri*Pbat=-2201438.19
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.44
 my_curr_charge_rem{2.435092954}
 my_last_charge_rem{0.001191818}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2043.175771132}
 my_curr_charge_rem{0.001310999}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 12.37
my_curr_DoD = 0.000017622
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.22
 my_curr_energy_removed_a = 12.37
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1147.75
 my_curr_energy_removed_c = 0.84
Pbat = 4131900.11
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1147.75
 (printf) Pbat * DELTA_T_hours = 1147.7500308
eff_mot = 0.91
algo1 = 0.02
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=249.49
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.89)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.89) - my_last_speed=5.87
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=7.89) - nonzero slope=-0.02
normal slope detected: -0.02 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{7.89}) - returning newSpeed=7.89
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{7.89}
 vNext{7.89}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{7.89}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{7.89}
[450] bool MSVehicle::moveChecked()
 vNext{7.89}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=5.87
accel=2.02m/s^2
Fad=13.48N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.02 for Fhc=0.00 calculation
normal slope detected: -0.02 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-396.85N
Fla=5448.15N
Frr=120.97N
Fte=5185.76N
newSpeed=7.89m/s
Pte=40901.76W
omega=291.83
omega nonzero processing
Pmot_out=38856.68W
Torque=133.15
eff_mot=0.86
Pmot_in=33605.32W
computeElectricAuxiliaries()=14727999091.20
Pbat=4124716.18W
my_last_DoD=0.000009043
0.15 * my_last_DoD=0.000001356
2.15 - 0.15 * my_last_DoD=2.149998644
E=928.799414022
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4124716.18)
E*E=862668.35
4*Ri*Pbat=3058778.29
E*E-4*Ri*Pbat=-2196109.94
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434575260}
 my_last_charge_rem{0.000672750}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3618.840994136}
 my_curr_charge_rem{0.000740025}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 7.89
my_curr_DoD = 0.000009947
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.69
 my_curr_energy_removed_a = 6.54
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1145.75
 my_curr_energy_removed_c = 0.47
Pbat = 4124716.18
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1145.75
 (printf) Pbat * DELTA_T_hours = 1145.7544958
eff_mot = 0.86
algo1 = 0.01
algo2 = 0.00
slope = -0.02
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=141.12
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{19.47}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=205.38
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.37)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.37) - my_last_speed=15.76
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.37) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{17.37}) - returning res=13.48
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.48}
 vNext{17.37}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{17.37}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.48}
[450] bool MSVehicle::moveChecked()
 vNext{13.48}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=15.76
accel=-2.28m/s^2
Fad=39.36N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=-6156.31N
Frr=120.97N
Fte=-6157.41N
newSpeed=13.48m/s
Pte=-82983.83W
omega=498.65
omega nonzero processing
Pte=-24895.15W
Pmot_out=-26205.42W
Torque=-52.55
eff_mot=1.09
Pmot_in=-24107.07W
computeElectricAuxiliaries()=14725921382.40
Pbat=4066426.65W
my_last_DoD=0.000013240
0.15 * my_last_DoD=0.000001986
2.15 - 0.15 * my_last_DoD=2.149998014
E=928.799142069
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4066426.65)
E*E=862667.85
4*Ri*Pbat=3015552.35
E*E-4*Ri*Pbat=-2152884.50
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434886657}
 my_last_charge_rem{0.000984973}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2472.033239085}
 my_curr_charge_rem{0.001083471}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.48
my_curr_DoD = 0.000014564
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.01
 my_curr_energy_removed_a = 10.05
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1129.56
 my_curr_energy_removed_c = 0.69
Pbat = 4066426.65
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1129.56
 (printf) Pbat * DELTA_T_hours = 1129.5629598
eff_mot = 1.09
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=237.93
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{128.79}, bearing{51.21}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,071722.000,A,4350.1820,N,01028.5048,E,26.2,51.2,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999985,59.40,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.81}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=141.38
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{17.71}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=121.65
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.81}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=27.90
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.64}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=74.68
getPositionOnLane()=2.80
myCurrentTraveledDistance=77.48
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.54)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.54) - my_last_speed=5.26
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.54) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.54}) - returning newSpeed=5.54
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{5.54}
 vNext{5.54}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.54}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.54}
[450] bool MSVehicle::moveChecked()
 vNext{5.54}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=5.26
accel=0.28m/s^2
Fad=6.66N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh000002fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000002}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=125.14N
Fla=761.42N
Frr=120.97N
Fte=1014.20N
newSpeed=5.54m/s
Pte=5621.40W
omega=205.08
omega nonzero processing
Pmot_out=5340.33W
Torque=26.04
eff_mot=0.86
Pmot_in=4594.38W
computeElectricAuxiliaries()=6014.80
Pbat=4596.05W
my_last_DoD=0.000243035
0.15 * my_last_DoD=0.000036455
2.15 - 0.15 * my_last_DoD=2.149963545
E=928.784251310
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000002 is requiring energy from its batteries (Pbat=4596.05)
E*E=862640.19
4*Ri*Pbat=3408.31
E*E-4*Ri*Pbat=859231.88
sqrt(E*E-4*Ri*Pbat)=926.95
E-sqrt(E*E-4*Ri*Pbat)=1.84
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=4.95
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.02
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 0.02
 my_curr_charge_rem{0.019858144}
 my_last_charge_rem{0.018080761}
 my_curr_charge_rem{0.019858144}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.54
my_curr_DoD = 0.000266926
 my_curr_charge_rem = 0.02
 E = 928.78
 my_curr_charge_rem * E = 18.44
 my_curr_energy_removed_a = 45.67
 my_curr_energy_removed_b = 0.01
 Pbat * DELTA_T_hours = 1.28
 my_curr_energy_removed_c = 12.71
Pbat = 4596.05
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1.28
 (printf) Pbat * DELTA_T_hours = 1.2766808
eff_mot = 0.86
algo1 = 0.25
algo2 = 0.02
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=14.67
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{19.16}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=90.24
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{11.14}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=21.03
getPositionOnLane()=1.19
myCurrentTraveledDistance=22.22
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{14.59}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=150.33
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000015
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.91}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=4.91
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.29}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=72.36
getPositionOnLane()=1.42
myCurrentTraveledDistance=73.78
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.04}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=29.54
getPositionOnLane()=6.62
myCurrentTraveledDistance=36.16
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.39}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=99.00
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{10.39}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=39.17
getPositionOnLane()=4.69
myCurrentTraveledDistance=43.87
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000017
 route->getID()=!SHNormVeh000017
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000017
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000017
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000017
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (505ms ~= 1.98*RT, ~37.62UPS, vehicles TOT 19 ACT 19)             ----> void MSNet::preSimStepOutput() const
Step #28.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000016
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.23}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.94}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=56.80
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.93)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.93) - my_last_speed=16.36
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.93) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{17.93}) - returning res=13.44
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.44}
 vNext{17.93}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{17.93}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.44}
[450] bool MSVehicle::moveChecked()
 vNext{13.44}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=16.36
accel=-2.92m/s^2
Fad=39.12N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-164.70N
Fla=-7892.41N
Frr=120.97N
Fte=-7897.02N
newSpeed=13.44m/s
Pte=-106105.30W
omega=497.14
omega nonzero processing
Pte=-31831.59W
Pmot_out=-33506.94W
Torque=-67.40
eff_mot=1.09
Pmot_in=-30880.08W
computeElectricAuxiliaries()=3776604284.87
Pbat=1018176.67W
my_last_DoD=0.000003169
0.15 * my_last_DoD=0.000000475
2.15 - 0.15 * my_last_DoD=2.149999525
E=928.799794618
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1018176.67)
E*E=862669.06
4*Ri*Pbat=755052.36
E*E-4*Ri*Pbat=107616.70
sqrt(E*E-4*Ri*Pbat)=328.05
E-sqrt(E*E-4*Ri*Pbat)=600.75
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1620.20
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.47
 my_curr_charge_rem{1.468480635}
 my_last_charge_rem{0.000235795}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{6227.791400314}
 my_curr_charge_rem{0.000259374}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.44
my_curr_DoD = 0.000003486
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.24
 my_curr_energy_removed_a = 1.63
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 282.83
 my_curr_energy_removed_c = 0.17
Pbat = 1018176.67
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 282.83
 (printf) Pbat * DELTA_T_hours = 282.8268538
eff_mot = 1.09
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=70.88
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.26)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.26) - my_last_speed=12.88
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=14.26) - nonzero slope=-0.00
normal slope detected: -0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{14.26}) - returning newSpeed=14.26
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{14.26}
 vNext{14.26}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{14.26}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{14.26}
[450] bool MSVehicle::moveChecked()
 vNext{14.26}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=12.37
accel=1.89m/s^2
Fad=44.07N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-29.82N
Fla=5105.40N
Frr=120.97N
Fte=5240.63N
newSpeed=14.26m/s
Pte=74735.23W
omega=527.65
omega nonzero processing
Pmot_out=70998.47W
Torque=134.56
eff_mot=0.91
Pmot_in=64777.06W
computeElectricAuxiliaries()=14688999353.60
Pbat=4145054.66W
my_last_DoD=0.000017622
0.15 * my_last_DoD=0.000002643
2.15 - 0.15 * my_last_DoD=2.149997357
E=928.798858094
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4145054.66)
E*E=862667.32
4*Ri*Pbat=3073860.76
E*E-4*Ri*Pbat=-2211193.44
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.44
 my_curr_charge_rem{2.435211820}
 my_last_charge_rem{0.001310999}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{1857.523187603}
 my_curr_charge_rem{0.001442099}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 14.26
my_curr_DoD = 0.000019384
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.34
 my_curr_energy_removed_a = 13.71
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1151.40
 my_curr_energy_removed_c = 0.92
Pbat = 4145054.66
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1151.40
 (printf) Pbat * DELTA_T_hours = 1151.4040718
eff_mot = 0.91
algo1 = 0.02
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=263.75
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.73)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.73) - my_last_speed=7.89
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=9.73) - nonzero slope=-0.02
normal slope detected: -0.02 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{9.73}) - returning newSpeed=9.73
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{9.73}
 vNext{9.73}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{9.73}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{9.73}
[450] bool MSVehicle::moveChecked()
 vNext{9.73}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=141.12
getPositionOnLane()=0.27
myCurrentTraveledDistance=141.40
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 2000
 time_ = 2000.00
 time_ = 2.00
 a-b (distance) = 7.89
 avg_speed = 3.94
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh000000
 avg_speed = 14.20
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=7.89
accel=1.84m/s^2
Fad=20.51N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.08 for Fhc=0.00 calculation
normal slope detected: 0.08 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=1892.78N
Fla=4968.92N
Frr=120.97N
Fte=7003.18N
newSpeed=9.73m/s
Pte=68131.77W
omega=359.96
omega nonzero processing
Pmot_out=64725.18W
Torque=179.81
eff_mot=0.86
Pmot_in=55639.86W
computeElectricAuxiliaries()=14727999091.20
Pbat=4146750.72W
my_last_DoD=0.000009947
0.15 * my_last_DoD=0.000001492
2.15 - 0.15 * my_last_DoD=2.149998508
E=928.799355424
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4146750.72)
E*E=862668.24
4*Ri*Pbat=3075118.51
E*E-4*Ri*Pbat=-2212450.27
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434642357}
 my_last_charge_rem{0.000740025}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{3289.946117607}
 my_curr_charge_rem{0.000814027}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 9.73
my_curr_DoD = 0.000010942
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.76
 my_curr_energy_removed_a = 7.30
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1151.88
 my_curr_energy_removed_c = 0.52
Pbat = 4146750.72
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1151.88
 (printf) Pbat * DELTA_T_hours = 1151.8751998
eff_mot = 0.86
algo1 = 0.01
algo2 = 0.00
slope = 0.08
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{15.30}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=205.38
getPositionOnLane()=8.65
myCurrentTraveledDistance=214.03
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.46)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.46) - my_last_speed=17.37
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.46) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.46}) - returning res=-42.62
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-42.62}
 vNext{15.46}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.46}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{15.46}
[450] bool MSVehicle::moveChecked()
 vNext{15.46}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.48
accel=1.98m/s^2
Fad=51.78N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=5345.38N
Frr=120.97N
Fte=5356.70N
newSpeed=15.46m/s
Pte=82803.52W
omega=571.94
omega nonzero processing
Pmot_out=78663.34W
Torque=137.54
eff_mot=0.92
Pmot_in=72010.41W
computeElectricAuxiliaries()=14725921382.40
Pbat=4162544.13W
my_last_DoD=0.000014564
0.15 * my_last_DoD=0.000002185
2.15 - 0.15 * my_last_DoD=2.149997815
E=928.799056276
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4162544.13)
E*E=862667.69
4*Ri*Pbat=3086830.48
E*E-4*Ri*Pbat=-2224162.79
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434984894}
 my_last_charge_rem{0.001083471}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2247.393613014}
 my_curr_charge_rem{0.001191818}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 15.46
my_curr_DoD = 0.000016020
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.11
 my_curr_energy_removed_a = 11.15
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1156.26
 my_curr_energy_removed_c = 0.76
Pbat = 4162544.13
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1156.26
 (printf) Pbat * DELTA_T_hours = 1156.2622588
eff_mot = 0.92
algo1 = 0.01
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=253.39
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{117.49}, bearing{62.51}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,073402.000,A,4350.1864,N,01028.5145,E,30.0,62.5,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 109, in __init__
  File "build/bdist.linux-x86_64/egg/suds/cache.py", line 141, in __init__
  File "/usr/lib/python2.7/tempfile.py", line 269, in gettempdir
    tempdir = _get_default_tempdir()
  File "/usr/lib/python2.7/tempfile.py", line 205, in _get_default_tempdir
    _os.unlink(filename)
KeyboardInterrupt
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999984,59.40,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.97}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=154.35
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{19.27}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=140.93
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{11.40}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=39.31
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.06)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.06) - my_last_speed=5.54
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.06) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.06}) - returning res=-493.59
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-493.59}
 vNext{5.06}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.06}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.06}
[450] bool MSVehicle::moveChecked()
 vNext{5.06}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=5.54
accel=-0.48m/s^2
Fad=5.55N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh000002fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000002}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=125.14N
Fla=-1303.76N
Frr=120.97N
Fte=-1052.10N
newSpeed=5.06m/s
Pte=-5323.15W
omega=187.20
omega nonzero processing
Pte=-1596.95W
Pmot_out=-1681.00W
Torque=-8.98
eff_mot=1.67
Pmot_in=-1005.28W
computeElectricAuxiliaries()=6014.80
Pbat=-1003.61W
my_last_DoD=0.000266926
0.15 * my_last_DoD=0.000040039
2.15 - 0.15 * my_last_DoD=2.149959961
E=928.782703176
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[265] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000002 is generating energy to its batteries (Pbat=-1003.61)
E*E=862637.31
4*Ri*Pbat=-744.25
E*E+4*Ri*Pbat=861893.06
sqrt(E*E+4*Ri*Pbat)=928.38
-E+sqrt(E*E+4*Ri*Pbat)=-0.40
2*2*Ri=0.74
I=(-E+sqrt(E*E+4*Ri*Pbat))/(2*2*Ri)=-0.54
[270] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem = 0.02
[275] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 0.02
 my_curr_charge_rem{0.020008255}
 my_last_charge_rem{0.019858144}
 my_curr_charge_rem{0.020008255}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.06
my_curr_DoD = 0.000268944
 my_curr_charge_rem = 0.02
 E = 928.78
 my_curr_charge_rem * E = 18.58
 my_curr_energy_removed_a = 64.25
 my_curr_energy_removed_b = 0.01
 Pbat * DELTA_T_hours = -0.28
 my_curr_energy_removed_c = 12.81
Pbat = -1003.61
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = -0.28
 (printf) Pbat * DELTA_T_hours = -0.2787818
eff_mot = 1.67
algo1 = 0.25
algo2 = 0.02
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=19.73
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{21.32}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=111.56
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{16.04}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=166.38
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000015
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.13}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=12.05
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{9.76}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=108.76
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.20}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=81.68
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.32}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=22.22
getPositionOnLane()=4.99
myCurrentTraveledDistance=27.21
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.33}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=78.12
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{10.33}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=46.49
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000018
 route->getID()=!SHNormVeh000018
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000018
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000018
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000018
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (374ms ~= 2.67*RT, ~53.48UPS, vehicles TOT 20 ACT 20)             ----> void MSNet::preSimStepOutput() const
Step #29.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.04)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.04) - my_last_speed=9.73
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.04) - nonzero slope=0.08
normal slope detected: 0.08 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{11.04}) - returning newSpeed=11.04
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{11.04}
 vNext{11.04}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{11.04}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.04}
[450] bool MSVehicle::moveChecked()
 vNext{11.04}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=141.40
getPositionOnLane()=4.29
myCurrentTraveledDistance=145.68
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 1000
 time_ = 1000.00
 time_ = 1.00
 a-b (distance) = 2.12
 avg_speed = 2.12
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=-19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-27
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=SHElecVeh000000
 avg_speed = 7.62
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=9.73
accel=1.31m/s^2
Fad=26.39N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.01 for Fhc=0.00 calculation
normal slope detected: 0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=321.18N
Fla=3527.06N
Frr=120.97N
Fte=3995.61N
newSpeed=11.04m/s
Pte=44094.49W
omega=408.32
omega nonzero processing
Pmot_out=41889.77W
Torque=102.59
eff_mot=0.91
Pmot_in=38123.26W
computeElectricAuxiliaries()=14727999091.20
Pbat=4129234.11W
my_last_DoD=0.000010942
0.15 * my_last_DoD=0.000001641
2.15 - 0.15 * my_last_DoD=2.149998359
E=928.799290966
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4129234.11)
E*E=862668.12
4*Ri*Pbat=3062128.67
E*E-4*Ri*Pbat=-2199460.55
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434716164}
 my_last_charge_rem{0.000814027}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2990.950775307}
 my_curr_charge_rem{0.000895430}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.04
my_curr_DoD = 0.000012036
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.83
 my_curr_energy_removed_a = 8.13
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1147.01
 my_curr_energy_removed_c = 0.57
Pbat = 4129234.11
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1147.01
 (printf) Pbat * DELTA_T_hours = 1147.0094768
eff_mot = 0.91
algo1 = 0.01
algo2 = 0.00
slope = 0.01
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000016
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.67}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.67
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{14.69}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=71.49
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.97)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.97) - my_last_speed=17.93
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.97) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.97}) - returning res=-40.34
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-40.34}
 vNext{15.97}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.97}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{15.97}
[450] bool MSVehicle::moveChecked()
 vNext{15.97}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.44
accel=2.54m/s^2
Fad=55.29N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-164.70N
Fla=6845.91N
Frr=120.97N
Fte=6857.47N
newSpeed=15.97m/s
Pte=109534.71W
omega=591.00
omega nonzero processing
Pmot_out=104057.98W
Torque=176.07
eff_mot=0.90
Pmot_in=94116.62W
computeElectricAuxiliaries()=3776604284.87
Pbat=1143173.36W
my_last_DoD=0.000003486
0.15 * my_last_DoD=0.000000523
2.15 - 0.15 * my_last_DoD=2.149999477
E=928.799774080
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1143173.36)
E*E=862669.02
4*Ri*Pbat=847746.54
E*E-4*Ri*Pbat=14922.48
sqrt(E*E-4*Ri*Pbat)=122.16
E-sqrt(E*E-4*Ri*Pbat)=806.64
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2175.49
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.07
 my_curr_charge_rem{2.066893534}
 my_last_charge_rem{0.000259374}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{7968.769320557}
 my_curr_charge_rem{0.000285312}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 15.97
my_curr_DoD = 0.000003835
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.26
 my_curr_energy_removed_a = 1.89
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 317.55
 my_curr_energy_removed_c = 0.18
Pbat = 1143173.36
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 317.55
 (printf) Pbat * DELTA_T_hours = 317.5481568
eff_mot = 0.90
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=86.85
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.67)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.67) - my_last_speed=14.26
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.67) - nonzero slope=-0.00
normal slope detected: -0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.67}) - returning newSpeed=15.67
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{15.67}
 vNext{15.67}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.67}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{15.67}
[450] bool MSVehicle::moveChecked()
 vNext{15.67}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=14.26
accel=1.41m/s^2
Fad=53.20N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-29.82N
Fla=3799.85N
Frr=120.97N
Fte=3944.21N
newSpeed=15.67m/s
Pte=61801.29W
omega=579.75
omega nonzero processing
Pmot_out=58711.22W
Torque=101.27
eff_mot=0.93
Pmot_in=54351.90W
computeElectricAuxiliaries()=14688999353.60
Pbat=4134629.50W
my_last_DoD=0.000019384
0.15 * my_last_DoD=0.000002908
2.15 - 0.15 * my_last_DoD=2.149997092
E=928.798743904
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4134629.50)
E*E=862667.11
4*Ri*Pbat=3066129.74
E*E-4*Ri*Pbat=-2203462.64
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.44
 my_curr_charge_rem{2.435342573}
 my_last_charge_rem{0.001442099}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{1688.748111667}
 my_curr_charge_rem{0.001586309}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 15.67
my_curr_DoD = 0.000021323
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.47
 my_curr_energy_removed_a = 15.19
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1148.51
 my_curr_energy_removed_c = 1.02
Pbat = 4134629.50
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1148.51
 (printf) Pbat * DELTA_T_hours = 1148.5081958
eff_mot = 0.93
algo1 = 0.02
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=279.42
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.10)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.10) - my_last_speed=15.46
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.10) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{17.10}) - returning res=13.45
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{13.45}
 vNext{17.10}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{17.10}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.45}
[450] bool MSVehicle::moveChecked()
 vNext{13.45}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=15.46
accel=-2.00m/s^2
Fad=39.22N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-161.44N
Fla=-5409.32N
Frr=120.97N
Fte=-5410.56N
newSpeed=13.45m/s
Pte=-72790.23W
omega=497.77
omega nonzero processing
Pte=-21837.07W
Pmot_out=-22986.39W
Torque=-46.18
eff_mot=1.09
Pmot_in=-21080.19W
computeElectricAuxiliaries()=14725921382.40
Pbat=4069453.53W
my_last_DoD=0.000016020
0.15 * my_last_DoD=0.000002403
2.15 - 0.15 * my_last_DoD=2.149997597
E=928.798961904
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4069453.53)
E*E=862667.51
4*Ri*Pbat=3017797.00
E*E-4*Ri*Pbat=-2155129.49
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.44
 my_curr_charge_rem{2.435092954}
 my_last_charge_rem{0.001191818}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2043.175771132}
 my_curr_charge_rem{0.001310999}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.45
my_curr_DoD = 0.000017622
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.22
 my_curr_energy_removed_a = 12.37
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1130.40
 my_curr_energy_removed_c = 0.84
Pbat = 4069453.53
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1130.40
 (printf) Pbat * DELTA_T_hours = 1130.4037588
eff_mot = 1.09
algo1 = 0.02
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=266.84
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{115.03}, bearing{64.97}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,075042.000,A,4350.1895,N,01028.5236,E,26.2,65.0,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 62, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 118, in u2open
  File "/usr/lib/python2.7/urllib2.py", line 404, in open
    response = self._open(req, data)
  File "/usr/lib/python2.7/urllib2.py", line 422, in _open
    '_open', req)
  File "/usr/lib/python2.7/urllib2.py", line 382, in _call_chain
    result = func(*args)
  File "/usr/lib/python2.7/urllib2.py", line 1214, in http_open
    return self.do_open(httplib.HTTPConnection, req)
  File "/usr/lib/python2.7/urllib2.py", line 1187, in do_open
    r = h.getresponse(buffering=True)
  File "/usr/lib/python2.7/httplib.py", line 1045, in getresponse
    response.begin()
  File "/usr/lib/python2.7/httplib.py", line 409, in begin
    version, status, reason = self._read_status()
  File "/usr/lib/python2.7/httplib.py", line 365, in _read_status
    line = self.fp.readline(_MAXLINE + 1)
  File "/usr/lib/python2.7/socket.py", line 476, in readline
    data = self._sock.recv(self._rbufsize)
KeyboardInterrupt
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999982,59.40,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 62, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 118, in u2open
  File "/usr/lib/python2.7/urllib2.py", line 404, in open
    response = self._open(req, data)
  File "/usr/lib/python2.7/urllib2.py", line 422, in _open
    '_open', req)
  File "/usr/lib/python2.7/urllib2.py", line 382, in _call_chain
    result = func(*args)
  File "/usr/lib/python2.7/urllib2.py", line 1214, in http_open
    return self.do_open(httplib.HTTPConnection, req)
  File "/usr/lib/python2.7/urllib2.py", line 1187, in do_open
    r = h.getresponse(buffering=True)
  File "/usr/lib/python2.7/httplib.py", line 1045, in getresponse
    response.begin()
  File "/usr/lib/python2.7/httplib.py", line 409, in begin
    version, status, reason = self._read_status()
  File "/usr/lib/python2.7/httplib.py", line 365, in _read_status
    line = self.fp.readline(_MAXLINE + 1)
  File "/usr/lib/python2.7/socket.py", line 476, in readline
    data = self._sock.recv(self._rbufsize)
KeyboardInterrupt
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.88}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=168.23
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{21.41}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=140.93
getPositionOnLane()=4.78
myCurrentTraveledDistance=145.71
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.36}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=46.67
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.55)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.55) - my_last_speed=5.06
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.55) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.55}) - returning res=-512.04
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-512.04}
 vNext{4.55}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.55}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.55}
[450] bool MSVehicle::moveChecked()
 vNext{4.55}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=5.06
accel=-0.51m/s^2
Fad=4.49N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh000002fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000002}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=125.14N
Fla=-1366.03N
Frr=120.97N
Fte=-1115.42N
newSpeed=4.55m/s
Pte=-5078.89W
omega=168.47
omega nonzero processing
Pte=-1523.67W
Pmot_out=-1603.86W
Torque=-9.52
eff_mot=1.71
Pmot_in=-935.92W
computeElectricAuxiliaries()=6014.80
Pbat=-934.24W
my_last_DoD=0.000268944
0.15 * my_last_DoD=0.000040342
2.15 - 0.15 * my_last_DoD=2.149959658
E=928.782572426
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[265] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000002 is generating energy to its batteries (Pbat=-934.24)
E*E=862637.07
4*Ri*Pbat=-692.81
E*E+4*Ri*Pbat=861944.26
sqrt(E*E+4*Ri*Pbat)=928.41
-E+sqrt(E*E+4*Ri*Pbat)=-0.37
2*2*Ri=0.74
I=(-E+sqrt(E*E+4*Ri*Pbat))/(2*2*Ri)=-0.50
[270] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem = 0.02
[275] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 0.02
 my_curr_charge_rem{0.020147988}
 my_last_charge_rem{0.020008255}
 my_curr_charge_rem{0.020147988}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.55
my_curr_DoD = 0.000270822
 my_curr_charge_rem = 0.02
 E = 928.78
 my_curr_charge_rem * E = 18.71
 my_curr_energy_removed_a = 82.97
 my_curr_energy_removed_b = 0.01
 Pbat * DELTA_T_hours = -0.26
 my_curr_energy_removed_c = 12.89
Pbat = -934.24
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = -0.26
 (printf) Pbat * DELTA_T_hours = -0.2595128
eff_mot = 1.71
algo1 = 0.25
algo2 = 0.02
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=24.28
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{21.26}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=132.82
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{17.60}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=166.38
getPositionOnLane()=1.58
myCurrentTraveledDistance=167.96
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000015
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{8.30}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=20.34
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.76}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=114.52
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.19}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=81.68
getPositionOnLane()=3.68
myCurrentTraveledDistance=85.36
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.42}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=78.12
getPositionOnLane()=2.58
myCurrentTraveledDistance=80.70
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.69}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=59.18
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{11.57}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=225.60
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{14.83}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=27.21
getPositionOnLane()=2.06
myCurrentTraveledDistance=29.27
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000017
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{1.76}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (425ms ~= 2.35*RT, ~47.06UPS, vehicles TOT 20 ACT 20)             ----> void MSNet::preSimStepOutput() const
Step #30.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.43)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.43) - my_last_speed=11.04
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=12.43) - nonzero slope=0.01
normal slope detected: 0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{12.43}) - returning newSpeed=12.43
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{12.43}
 vNext{12.43}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{12.43}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{12.43}
[450] bool MSVehicle::moveChecked()
 vNext{12.43}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=11.04
accel=1.40m/s^2
Fad=33.49N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.01 for Fhc=0.00 calculation
normal slope detected: 0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=321.18N
Fla=3768.27N
Frr=120.97N
Fte=4243.92N
newSpeed=12.43m/s
Pte=52761.18W
omega=459.99
omega nonzero processing
Pmot_out=50123.12W
Torque=108.97
eff_mot=0.91
Pmot_in=45830.48W
computeElectricAuxiliaries()=14727999091.20
Pbat=4136941.34W
my_last_DoD=0.000012036
0.15 * my_last_DoD=0.000001805
2.15 - 0.15 * my_last_DoD=2.149998195
E=928.799220063
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4136941.34)
E*E=862667.99
4*Ri*Pbat=3067844.14
E*E-4*Ri*Pbat=-2205176.15
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434797351}
 my_last_charge_rem{0.000895430}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2719.136827762}
 my_curr_charge_rem{0.000984973}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 12.43
my_curr_DoD = 0.000013240
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.91
 my_curr_energy_removed_a = 9.04
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1149.15
 my_curr_energy_removed_c = 0.63
Pbat = 4136941.34
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1149.15
 (printf) Pbat * DELTA_T_hours = 1149.1503728
eff_mot = 0.91
algo1 = 0.01
algo2 = 0.00
slope = 0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=158.12
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000016
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.96}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=9.62
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{16.12}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=87.61
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.91)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.91) - my_last_speed=15.97
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.91) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{17.91}) - returning res=10.80
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{10.80}
 vNext{17.91}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{17.91}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{10.80}
[450] bool MSVehicle::moveChecked()
 vNext{10.80}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=15.97
accel=-5.17m/s^2
Fad=25.27N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-164.70N
Fla=-13964.03N
Frr=120.97N
Fte=-13982.48N
newSpeed=10.80m/s
Pte=-150987.32W
omega=399.54
omega nonzero processing
Pte=-45296.20W
Pmot_out=-47680.21W
Torque=-119.34
eff_mot=1.12
Pmot_in=-42448.86W
computeElectricAuxiliaries()=3776604284.87
Pbat=1006607.88W
my_last_DoD=0.000003835
0.15 * my_last_DoD=0.000000575
2.15 - 0.15 * my_last_DoD=2.149999425
E=928.799751488
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1006607.88)
E*E=862668.98
4*Ri*Pbat=746473.26
E*E-4*Ri*Pbat=116195.72
sqrt(E*E-4*Ri*Pbat)=340.87
E-sqrt(E*E-4*Ri*Pbat)=587.92
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1585.62
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.43
 my_curr_charge_rem{1.432232562}
 my_last_charge_rem{0.000285312}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{5019.887757134}
 my_curr_charge_rem{0.000313843}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 10.80
my_curr_DoD = 0.000004219
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.29
 my_curr_energy_removed_a = 2.18
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 279.61
 my_curr_energy_removed_c = 0.20
Pbat = 1006607.88
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 279.61
 (printf) Pbat * DELTA_T_hours = 279.6133008
eff_mot = 1.12
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=97.65
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.03)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.03) - my_last_speed=15.67
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.03) - nonzero slope=-0.00
normal slope detected: -0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.03}) - returning res=-128.80
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-128.80}
 vNext{15.03}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.03}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{15.03}
[450] bool MSVehicle::moveChecked()
 vNext{15.03}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=15.67
accel=-0.63m/s^2
Fad=48.98N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-29.82N
Fla=-1711.70N
Frr=120.97N
Fte=-1571.56N
newSpeed=15.03m/s
Pte=-23627.75W
omega=556.28
omega nonzero processing
Pte=-7088.32W
Pmot_out=-7461.39W
Torque=-13.41
eff_mot=1.27
Pmot_in=-5891.10W
computeElectricAuxiliaries()=14688999353.60
Pbat=4074386.49W
my_last_DoD=0.000021323
0.15 * my_last_DoD=0.000003198
2.15 - 0.15 * my_last_DoD=2.149996802
E=928.798618294
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4074386.49)
E*E=862666.87
4*Ri*Pbat=3021455.15
E*E-4*Ri*Pbat=-2158788.28
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.44
 my_curr_charge_rem{2.435486401}
 my_last_charge_rem{0.001586309}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{1535.316224453}
 my_curr_charge_rem{0.001744940}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 15.03
my_curr_DoD = 0.000023455
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.62
 my_curr_energy_removed_a = 16.81
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1131.77
 my_curr_energy_removed_c = 1.12
Pbat = 4074386.49
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1131.77
 (printf) Pbat * DELTA_T_hours = 1131.7740268
eff_mot = 1.27
algo1 = 0.02
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=294.45
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.66)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.66) - my_last_speed=17.10
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.66) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.66}) - returning res=-55.20
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-55.20}
 vNext{15.66}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.66}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{15.66}
[450] bool MSVehicle::moveChecked()
 vNext{15.66}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=266.84
getPositionOnLane()=6.05
myCurrentTraveledDistance=272.89
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
----> MSVehicle::writeFevSyntheticData(...)
 time_on_lane = 13000
 time_ = 13000.00
 time_ = 13.00
 a-b (distance) = 158.42
 avg_speed = 12.19
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"fev0")=0
const std::string& MSBaseVehicle::getId()

 strcmp(getID().c_str(),"normVeh004")=-8
const std::string& MSBaseVehicle::getId()

 {MSVehicle}getID()=fev0
 avg_speed = 43.87
const std::string& MSBaseVehicle::getId()

[704] bool MSVehicle::moveChecked()
ARFTmode is set
[803] amAdas
----> void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[100] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

[250] void MSVehicle::adasWriteGpsString()
[400] void MSVehicle::adasWriteGpsString()
 angle{107.74}, bearing{72.26}
[500] void MSVehicle::adasWriteGpsString()
const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendWithoutChecksum.py -i \$GPRMC,080722.000,A,4350.1924,N,01028.5345,E,30.4,72.3,260115,,,A* -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n  -Z 
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendWithoutChecksum.py", line 33, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
const std::string& MSBaseVehicle::getId()

<---- void MSVehicle::adasWriteGpsString()
<---> void MSVehicle::adasWriteExtendedInfo()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

python ../../scripts/sudsVdadasPresendExtInfo.py -i 0,22146.05,1.000000,0.999982,59.40,20.75,0,0,0,fev0,2570.00 -u http://93.62.202.221/VDAdas?wsdl -I fev0 -n -Z 
HTTP Error 400: Bad Request
Traceback (most recent call last):
  File "../../scripts/sudsVdadasPresendExtInfo.py", line 47, in <module>
    client = Client(url)
  File "build/bdist.linux-x86_64/egg/suds/client.py", line 112, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 152, in open
  File "build/bdist.linux-x86_64/egg/suds/wsdl.py", line 136, in __init__
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 79, in open
  File "build/bdist.linux-x86_64/egg/suds/reader.py", line 95, in download
  File "build/bdist.linux-x86_64/egg/suds/transport/https.py", line 60, in open
  File "build/bdist.linux-x86_64/egg/suds/transport/http.py", line 64, in open
suds.transport.TransportError: HTTP Error 400: Bad Request
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
[807] bool MSVehicle::moveChecked()
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=13.45
accel=2.21m/s^2
Fad=53.14N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=nan for Fhc=0.00 calculation
NaN slope detected: nan (setting to 0)
 getID(){fev0fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){fev0}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=0.00N
Fla=5952.92N
Frr=120.97N
Fte=6127.04N
newSpeed=15.66m/s
Pte=95945.62W
omega=579.40
omega nonzero processing
Pmot_out=91148.34W
Torque=157.32
eff_mot=0.91
Pmot_in=82911.65W
computeElectricAuxiliaries()=14725921382.40
Pbat=4173445.37W
my_last_DoD=0.000017622
0.15 * my_last_DoD=0.000002643
2.15 - 0.15 * my_last_DoD=2.149997357
E=928.798858094
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle fev0 is requiring energy from its batteries (Pbat=4173445.37)
E*E=862667.32
4*Ri*Pbat=3094914.54
E*E-4*Ri*Pbat=-2232247.22
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.44
 my_curr_charge_rem{2.435211820}
 my_last_charge_rem{0.001310999}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{1857.523187603}
 my_curr_charge_rem{0.001442099}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 15.66
my_curr_DoD = 0.000019384
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.34
 my_curr_energy_removed_a = 13.71
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1159.29
 my_curr_energy_removed_c = 0.92
Pbat = 4173445.37
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1159.29
 (printf) Pbat * DELTA_T_hours = 1159.2903808
eff_mot = 0.91
algo1 = 0.02
algo2 = 0.00
slope = 0.00
my_SOH = 1.00
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.72}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=180.95
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.47}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=51.14
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.66)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.66) - my_last_speed=4.55
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=4.66) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{4.66}) - returning newSpeed=4.66
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{4.66}
 vNext{4.66}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{4.66}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{4.66}
[450] bool MSVehicle::moveChecked()
 vNext{4.66}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.55
accel=0.11m/s^2
Fad=4.70N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh000002fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000002}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=125.14N
Fla=284.36N
Frr=120.97N
Fte=535.18N
newSpeed=4.66m/s
Pte=2493.27W
omega=172.37
omega nonzero processing
Pmot_out=2368.61W
Torque=13.74
eff_mot=0.77
Pmot_in=1828.59W
computeElectricAuxiliaries()=6014.80
Pbat=1830.26W
my_last_DoD=0.000270822
0.15 * my_last_DoD=0.000040623
2.15 - 0.15 * my_last_DoD=2.149959377
E=928.782450716
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000002 is requiring energy from its batteries (Pbat=1830.26)
E*E=862636.84
4*Ri*Pbat=1357.27
E*E-4*Ri*Pbat=861279.57
sqrt(E*E-4*Ri*Pbat)=928.05
E-sqrt(E*E-4*Ri*Pbat)=0.73
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=1.97
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.02
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 0.02
 my_curr_charge_rem{0.020758412}
 my_last_charge_rem{0.020147988}
 my_curr_charge_rem{0.020758412}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 4.66
my_curr_DoD = 0.000279027
 my_curr_charge_rem = 0.02
 E = 928.78
 my_curr_charge_rem * E = 19.28
 my_curr_energy_removed_a = 102.25
 my_curr_energy_removed_b = 0.01
 Pbat * DELTA_T_hours = 0.51
 my_curr_energy_removed_c = 13.29
Pbat = 1830.26
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 0.51
 (printf) Pbat * DELTA_T_hours = 0.5084068
eff_mot = 0.77
algo1 = 0.26
algo2 = 0.02
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=28.94
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{21.48}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=154.30
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000015
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.90}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=28.25
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.56}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=117.08
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000012
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{12.71}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=59.18
getPositionOnLane()=0.61
myCurrentTraveledDistance=59.80
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.77}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=233.36
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000017
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.57}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=3.57
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000005
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{19.89}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=145.71
getPositionOnLane()=15.17
myCurrentTraveledDistance=160.87
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{19.65}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=167.96
getPositionOnLane()=14.18
myCurrentTraveledDistance=182.14
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{6.97}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=85.36
getPositionOnLane()=1.12
myCurrentTraveledDistance=86.47
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.17}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=80.70
getPositionOnLane()=0.60
myCurrentTraveledDistance=81.30
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{17.01}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=46.27
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
const MSRoute& MSBaseVehicle::getRoute()
----> void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
[100] void SUMOVehicleParameter* SUMOVehicleParserHelper::parseVehicleAttributes(...)
 (will now execute... SUMOVehicleParameter* ret=new SUMOVehicleParameter(DEFAULT_VTYPE_ID);)
----> SUMOVehicleParameter::SUMOVehicleParameter(const std::string vTypeId{DEFAULT_VEHTYPE})
void SUMOVehicleParserHelper::parseCommonAttributes(...)
SUMOVehicle* MSVehicleControl::buildVehicle(...)
 defs->getID()=SHNormVeh000019
 route->getID()=!SHNormVeh000019
 type->getID()=DEFAULT_VEHTYPE
MSBaseVehicle::MSBaseVehicle(...)
MSDevice_Vehroutes* MSDevice_Vehroutes::buildVehicleDevices(...)
const std::string& MSBaseVehicle::getId()

  v.getID().c_str()=SHNormVeh000019
  v.getVehicleType().getID().c_str()=DEFAULT_VEHTYPE
void MSBaseVehicle::calculateArrivalPos()
MSVehicle::MSVehicle(...)

  pars->id=SHNormVeh000019
  pars->color=1.00,1.00,0.00
attempting to catch vehicles to track
catched vehicles to track
----> void MSInsertionControl::add(SUMOVehicle* veh)
const std::string& MSBaseVehicle::getId()

 veh->getID()=SHNormVeh000019
unsigned int MSInsertionControl::emitVehicles(SUMOTime time)
unsigned int MSInsertionControl::checkFlows(...)
----> unsigned int MSInsertionControl::tryInsert(...)
const MSRoute& MSBaseVehicle::getRoute()
----> void MSNet::updateWeather()
initialTimeString{2015-01-26T10:13:51.0Z}
----> void MSNet::postSimStepOutput() const
 (471ms ~= 2.12*RT, ~44.59UPS, vehicles TOT 21 ACT 21)             ----> void MSNet::preSimStepOutput() const
Step #31.00----> void MSNet::simulationStep()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000018
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{2.50}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
beginning the trip
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000003
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.22}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=88.52
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000007
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.99}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=91.47
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000000
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.02)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.02) - my_last_speed=12.43
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=15.02) - nonzero slope=0.01
normal slope detected: 0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{15.02}) - returning res=8.80
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{8.80}
 vNext{15.02}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{15.02}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{8.80}
[450] bool MSVehicle::moveChecked()
 vNext{8.80}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=12.43
accel=-3.63m/s^2
Fad=16.78N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.01 for Fhc=0.00 calculation
normal slope detected: 0.01 (no action required)
 getID(){SHElecVeh000000fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000000}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=321.18N
Fla=-9804.67N
Frr=120.97N
Fte=-9345.74N
newSpeed=8.80m/s
Pte=-82231.16W
omega=325.56
omega nonzero processing
Pte=-24669.35W
Pmot_out=-25967.73W
Torque=-79.76
eff_mot=1.12
Pmot_in=-23253.95W
computeElectricAuxiliaries()=14727999091.20
Pbat=4067856.91W
my_last_DoD=0.000013240
0.15 * my_last_DoD=0.000001986
2.15 - 0.15 * my_last_DoD=2.149998014
E=928.799142069
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000000 is requiring energy from its batteries (Pbat=4067856.91)
E*E=862667.85
4*Ri*Pbat=3016612.99
E*E-4*Ri*Pbat=-2153945.14
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.43
 my_curr_charge_rem{2.434886657}
 my_last_charge_rem{0.000984973}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{2472.033239085}
 my_curr_charge_rem{0.001083471}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 8.80
my_curr_DoD = 0.000014564
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.01
 my_curr_energy_removed_a = 10.05
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1129.96
 my_curr_energy_removed_c = 0.69
Pbat = 4067856.91
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1129.96
 (printf) Pbat * DELTA_T_hours = 1129.9602538
eff_mot = 1.12
algo1 = 0.01
algo2 = 0.00
slope = 0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=166.92
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000016
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.04}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=16.67
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000010
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{17.61}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=105.22
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.21)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.21) - my_last_speed=17.91
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=13.21) - nonzero slope=-0.01
normal slope detected: -0.01 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{13.21}) - returning res=-20.15
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-20.15}
 vNext{13.21}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{13.21}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{13.21}
[450] bool MSVehicle::moveChecked()
 vNext{13.21}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=10.80
accel=2.41m/s^2
Fad=37.82N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.01 for Fhc=0.00 calculation
normal slope detected: -0.01 (no action required)
 getID(){SHElecVeh000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-164.70N
Fla=6511.20N
Frr=120.97N
Fte=6505.29N
newSpeed=13.21m/s
Pte=85942.81W
omega=488.81
omega nonzero processing
Pmot_out=81645.67W
Torque=167.03
eff_mot=0.89
Pmot_in=73053.81W
computeElectricAuxiliaries()=3776604284.87
Pbat=1122110.55W
my_last_DoD=0.000004219
0.15 * my_last_DoD=0.000000633
2.15 - 0.15 * my_last_DoD=2.149999367
E=928.799726637
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000001 is requiring energy from its batteries (Pbat=1122110.55)
E*E=862668.93
4*Ri*Pbat=832126.93
E*E-4*Ri*Pbat=30542.00
sqrt(E*E-4*Ri*Pbat)=174.76
E-sqrt(E*E-4*Ri*Pbat)=754.04
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2033.61
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 1.91
 my_curr_charge_rem{1.911439442}
 my_last_charge_rem{0.000313843}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{6090.435123865}
 my_curr_charge_rem{0.000345227}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 13.21
my_curr_DoD = 0.000004640
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 0.32
 my_curr_energy_removed_a = 2.51
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 311.70
 my_curr_energy_removed_c = 0.22
Pbat = 1122110.55
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 311.70
 (printf) Pbat * DELTA_T_hours = 311.6973768
eff_mot = 0.89
algo1 = 0.00
algo2 = 0.00
slope = -0.01
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=110.86
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh0000001
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.77)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.77) - my_last_speed=15.03
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=11.77) - nonzero slope=-0.00
normal slope detected: -0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{11.77}) - returning res=-33.26
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{-33.26}
 vNext{11.77}
[320] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{11.77}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{11.77}
[450] bool MSVehicle::moveChecked()
 vNext{11.77}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=15.03
accel=-3.26m/s^2
Fad=30.04N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=-0.00 for Fhc=0.00 calculation
normal slope detected: -0.00 (no action required)
 getID(){SHElecVeh0000001fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh0000001}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=-29.82N
Fla=-8800.61N
Frr=120.97N
Fte=-8679.42N
newSpeed=11.77m/s
Pte=-102184.93W
omega=435.61
omega nonzero processing
Pte=-30655.48W
Pmot_out=-32268.93W
Torque=-74.08
eff_mot=1.09
Pmot_in=-29565.82W
computeElectricAuxiliaries()=14688999353.60
Pbat=4050711.78W
my_last_DoD=0.000023455
0.15 * my_last_DoD=0.000003518
2.15 - 0.15 * my_last_DoD=2.149996482
E=928.798480124
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh0000001 is requiring energy from its batteries (Pbat=4050711.78)
E*E=862666.62
4*Ri*Pbat=3003898.62
E*E-4*Ri*Pbat=-2141232.00
sqrt(E*E-4*Ri*Pbat)=0.00
E-sqrt(E*E-4*Ri*Pbat)=928.80
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=2504.94
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.00
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 2.44
 my_curr_charge_rem{2.435644612}
 my_last_charge_rem{0.001744940}
 CRITICAL: my_curr_charge_rem/my_last_charge_rem>1.1
 my_curr_charge_rem/my_last_charge_rem{1395.832690622}
 my_curr_charge_rem{0.001919434}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 11.77
my_curr_DoD = 0.000025800
 my_curr_charge_rem = 0.00
 E = 928.80
 my_curr_charge_rem * E = 1.78
 my_curr_energy_removed_a = 18.59
 my_curr_energy_removed_b = 0.00
 Pbat * DELTA_T_hours = 1125.20
 my_curr_energy_removed_c = 1.23
Pbat = 4050711.78
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 1125.20
 (printf) Pbat * DELTA_T_hours = 1125.1977168
eff_mot = 1.09
algo1 = 0.02
algo2 = 0.00
slope = -0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=306.23
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000008
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{13.81}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=194.76
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000014
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{3.18}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=54.32
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHElecVeh000002
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.50)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.50) - my_last_speed=4.66
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=5.50) - nonzero slope=0.00
normal slope detected: 0.00 (no action required)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{5.50}) - returning newSpeed=5.50
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{5.50}
 vNext{5.50}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{5.50}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{5.50}
[450] bool MSVehicle::moveChecked()
 vNext{5.50}
[500] bool MSVehicle::moveChecked()
----> bool MSDevice_FEV::notifyMove(...)
----> void MSVehicleType::updateCapacity(SUMOReal et)
 getCapacity(){51.26}
 getCapacity(){51.26}
my_last_speed=4.66
accel=0.85m/s^2
Fad=6.56N
[200] MSDevice_FEV::notifyMove(...)
[210] MSDevice_FEV::notifyMove(...) - using a nonzero slope=0.00 for Fhc=0.00 calculation
normal slope detected: 0.00 (no action required)
 getID(){SHElecVeh000002fevDevice}
const std::string& MSBaseVehicle::getId()

 veh.getID(){SHElecVeh000002}
 veh.getVehicleType().getMass{2570.00kg}
Fhc=125.14N
Fla=2280.85N
Frr=120.97N
Fte=2533.53N
newSpeed=5.50m/s
Pte=13944.47W
omega=203.65
omega nonzero processing
Pmot_out=13247.25W
Torque=65.05
eff_mot=0.87
Pmot_in=11561.12W
computeElectricAuxiliaries()=6014.80
Pbat=11562.79W
my_last_DoD=0.000279027
0.15 * my_last_DoD=0.000041854
2.15 - 0.15 * my_last_DoD=2.149958146
E=928.781919025
veh.getVehicleType().getCapacity()=51.26
veh.getVehicleType().getNumCells()=432.00
Ri=(0.022/veh.getVehicleType().getCapacity())*veh.getVehicleType().getNumCells()=0.185393258
const std::string& MSBaseVehicle::getId()

[250] bool MSDevice_FEV::notifyMove(...) - the vehicle SHElecVeh000002 is requiring energy from its batteries (Pbat=11562.79)
E*E=862635.85
4*Ri*Pbat=8574.65
E*E-4*Ri*Pbat=854061.20
sqrt(E*E-4*Ri*Pbat)=924.15
E-sqrt(E*E-4*Ri*Pbat)=4.63
2*Ri=0.37
I=(E-sqrt(E*E-4*Ri*Pbat))/2*Ri=12.48
[255] bool MSDevice_FEV::notifyMove(...) - my_last_charge_rem=0.02
[260] bool MSDevice_FEV::notifyMove(...) - my_curr_charge_rem = 0.03
 my_curr_charge_rem{0.025950316}
 my_last_charge_rem{0.020758412}
 my_curr_charge_rem{0.025950316}
[280] bool MSDevice_FEV::notifyMove(...) - PeuCap = 74.40
[285] bool MSDevice_FEV::notifyMove(...) - my_curr_DoD = 0.00
[290] my_SOH = 1.00
veh.getVehicleType().getCapacity()=51.26 (per battery?)
veh.getVehicleType().getNumCells()=432.00
my_curr_speed = 5.50
my_curr_DoD = 0.000348815
 my_curr_charge_rem = 0.03
 E = 928.78
 my_curr_charge_rem * E = 24.10
 my_curr_energy_removed_a = 126.35
 my_curr_energy_removed_b = 0.02
 Pbat * DELTA_T_hours = 3.21
 my_curr_energy_removed_c = 16.61
Pbat = 11562.79
DELTA_T = 1000
DELTA_T_secs = 1.00
 (std::cout) DELTA_T_hours = 0.00
 (std::cout) OutputDevice::realString(DELTA_T_hours, 9) = 0.000277778
 (printf) DELTA_T_hours = 0.0002788
 (std::cout) Pbat * DELTA_T_hours = 3.21
 (printf) Pbat * DELTA_T_hours = 3.2118858
eff_mot = 0.87
algo1 = 0.32
algo2 = 0.03
slope = 0.00
my_SOH = 1.00
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=34.45
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000011
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{21.52}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=154.30
getPositionOnLane()=3.40
myCurrentTraveledDistance=157.69
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000015
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{7.27}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=35.52
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000006
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.24}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myLastTraveledDistance=117.08
getPositionOnLane()=1.35
myCurrentTraveledDistance=118.43
[701] bool MSVehicle::moveChecked()
[702] bool MSVehicle::moveChecked()
[703] bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[804] bool MSVehicle::moveChecked()
[805] bool MSVehicle::moveChecked()
[806] bool MSVehicle::moveChecked()
  CRITICAL ERROR asking for the MSDevice_FEV of a non FEV vehicle in file MSVehicle.cpp:1343
[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000009
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{4.67}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=238.04
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000017
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{5.88}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=9.45
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=SHNormVeh000013
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[450] bool MSVehicle::moveChecked()
 vNext{18.62}
[500] bool MSVehicle::moveChecked()
[600] bool MSVehicle::moveChecked()
[700] bool MSVehicle::moveChecked()
myCurrentTraveledDistance=64.89
[701] bool MSVehicle::moveChecked()
ARFTmode is set
const std::string& MSBaseVehicle::getId()

const std::string& MSBaseVehicle::getId()

[808] bool MSVehicle::moveChecked()
<---- bool MSVehicle::moveChecked()
----> bool MSVehicle::moveChecked()
const std::string& MSBaseVehicle::getId()

  this->getID()=fev0
[100] bool MSVehicle::moveChecked()
[200] bool MSVehicle::moveChecked()
[300] bool MSVehicle::moveChecked()
----> SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.09)
[100] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.09) - my_last_speed=15.66
[200] SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed=17.09) - nonzero slope=nan
NaN slope detected: nan (setting to 0)
<---- SUMOReal MSDevice_FEV::computeMaxSpeed(SUMOReal newSpeed{17.09}) - returning res=14.82
[310] bool MSVehicle::moveChecked()
 maxSpeedByTorque{14.82}
 vNext{17.09}
[330] bool MSVehicle::moveChecked()
[400] bool MSVehicle::moveChecked()
[425] bool MSVehicle::moveChecked()
 vNext{17.09}
 getMaxSpeed(){70.00}
 maxSpeedByTorque{14.82}
